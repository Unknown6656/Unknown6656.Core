<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
////////////////////////////////////////////////////// AUTOGENERATED //////////////////////////////////////////////////////
// WARNING: All code changes to this file will be lost upon regeneration.                                                //
// Autogenerated on <#=$"{DateTime.Now:yyyy-MM-dd HH:mm:ss:ffffff}"#>                                                                           //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System.Runtime.CompilerServices;
using System;


namespace Unknown6656.Common
{
    public static class Currying
    {
<#
    int maxsize = 10;

    try
    {
        string path = Host.ResolvePath("../../maxdim.txt");

        maxsize = int.Parse(File.ReadAllText(path).Trim()) + 1;
    }
    catch { }

    var types = Enumerable.Range(0, maxsize + 1).Select(x => $"T{x}");
    var args = Enumerable.Range(0, maxsize + 1).Select(x => $"arg{x}");
    string t(int n) => $"<{string.Join(", ", types.Take(n))}>".Replace("<>", "");
    string t2(int o, int n) => $"<{string.Join(", ", types.Skip(o).Take(n))}>".Replace("<>", "");

    for (int i = 1; i <= maxsize; ++i)
        for (int j = 1; j <= i; ++j)
        {
            string adecl = string.Join(", ", Enumerable.Range(0, j).Select(x => $"T{x} arg{x}"));
            string a(int o, int n) => string.Join(", ", Enumerable.Range(o, n).Select(x => $"arg{x}"));
#>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Action<#=t2(j, i - j)#> Curry<#=t(i)#>(this Action<#=t(i)#> f, <#=adecl#>) => (<#=a(j, i - j)#>) => f(<#=a(0, i)#>);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Func<#=t2(j, i - j + 1)#> Curry<#=t(i + 1)#>(this Func<#=t(i + 1)#> f, <#=adecl#>) => (<#=a(j, i - j)#>) => f(<#=a(0, i)#>);
<#
        }
#>
    }
}
