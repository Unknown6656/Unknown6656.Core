<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
////////////////////////////////////////////////////// AUTOGENERATED //////////////////////////////////////////////////////
// WARNING: All code changes to this file will be lost upon regeneration.                                                //
// Autogenerated on <#=$"{DateTime.Now:yyyy-MM-dd HH:mm:ss:ffffff}"#>                                                                           //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System.Runtime.CompilerServices;
using System;


namespace Unknown6656.Common
{
    public static partial class LINQ
    {
<#
    int maxsize = 10;

    try
    {
        string path = Host.ResolvePath("../../maxdim.txt");

        maxsize = int.Parse(File.ReadAllText(path).Trim()) + 1;
    }
    catch { }
    
    IEnumerable<int> r(int f, int t) => Enumerable.Range(f, t);

    for (int dim = 2; dim <= maxsize; ++dim)
    {
        string[] types = r(0, dim).Select(i => $"T{i}").ToArray();
        string res_type = string.Join(", ", types);

        if (dim > 2)
            for (int i = 1; i < dim; ++i)
            {
                string left = string.Join(", ", types.Take(i));
                string right = string.Join(", ", types.Skip(i));
                string left_acc = "tuple.left";
                string right_acc = "tuple.right";

                if (i > 1)
                {
                    left = $"({left})";
                    left_acc = string.Join(", ", r(1, i).Select(j => $"tuple.left.Item{j}").ToArray());
                }

                if (i < dim - 1)
                {
                    right = $"({right})";
                    right_acc = string.Join(", ", r(1, dim - i).Select(j => $"tuple.right.Item{j}").ToArray());
                }
#>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static (<#=res_type#>) Join<<#=res_type#>>(this (<#=left#> left, <#=right#> right) tuple) => (<#=left_acc#>, <#=right_acc#>);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static (<#=res_type#>) Join<<#=res_type#>>(this <#=left#> left, <#=right#> right) => (<#=left_acc.Replace("tuple.", "")#>, <#=right_acc.Replace("tuple.", "")#>);
<#
            }
#>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static (<#=res_type#>) Join<<#=res_type#>>(this <#=string.Join(", ", types.Select((t, i) => $"{t} t{i}"))#>) => (<#=res_type.ToLower()#>);
<#
    }
#>
    }
}
