///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED 2021-01-07 17:39:01.702407              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

using Unknown6656.Computation.ParticleSwarmOptimization;
using Unknown6656.Mathematics.LinearAlgebra;


namespace Unknown6656.Computation.ParticleSwarmOptimization
{
    /// <summary>
    /// A Particle Swarm Optimization (PSO) based solver for 2-dimensional linear equations of the form Ax=b.
    /// </summary>
    public class LinearEquation2Solver
        : PSOProblem<Scalar, LinearEquation2Solver>
    {
        /// <inheritdoc/>
        /// <summary>
        /// The dimensionality of the linear equations (2).
        /// </summary>
        public override int Dimensionality { get; } = 2;
        /// <summary>
        /// The 2x2-matrix A.
        /// </summary>
        public Matrix2 A { get; }
        /// <summary>
        /// The 2-dimensional vector b.
        /// </summary>
        public Vector2 b { get; }


        /// <summary>
        /// Creates the problem definition for the linear equation system Ax=b.
        /// </summary>
        /// <param name="A">The 2x2-matrix A.</param>
        /// <param name="b">The 2-dimensional vector b.</param>
        public LinearEquation2Solver(Matrix2 A, Vector2 b) => (this.A, this.b) = (A, b);

        /// <inheritdoc/>
        /// <summary>
        /// Returns the value of |Ax-b|.
        /// </summary>
        /// <param name="x">Candidate solution x.</param>
        /// <returns>|Ax-b|</returns>
        public override Scalar GetValue(VectorN x) => A.Multiply(new Vector2(x)).DistanceTo(b);
        
        /// <inheritdoc/>
        internal protected override bool IsValidSearchPosition(VectorN position) => true;
    }

    /// <summary>
    /// A Particle Swarm Optimization (PSO) based solver for 3-dimensional linear equations of the form Ax=b.
    /// </summary>
    public class LinearEquation3Solver
        : PSOProblem<Scalar, LinearEquation3Solver>
    {
        /// <inheritdoc/>
        /// <summary>
        /// The dimensionality of the linear equations (3).
        /// </summary>
        public override int Dimensionality { get; } = 3;
        /// <summary>
        /// The 3x3-matrix A.
        /// </summary>
        public Matrix3 A { get; }
        /// <summary>
        /// The 3-dimensional vector b.
        /// </summary>
        public Vector3 b { get; }


        /// <summary>
        /// Creates the problem definition for the linear equation system Ax=b.
        /// </summary>
        /// <param name="A">The 3x3-matrix A.</param>
        /// <param name="b">The 3-dimensional vector b.</param>
        public LinearEquation3Solver(Matrix3 A, Vector3 b) => (this.A, this.b) = (A, b);

        /// <inheritdoc/>
        /// <summary>
        /// Returns the value of |Ax-b|.
        /// </summary>
        /// <param name="x">Candidate solution x.</param>
        /// <returns>|Ax-b|</returns>
        public override Scalar GetValue(VectorN x) => A.Multiply(new Vector3(x)).DistanceTo(b);
        
        /// <inheritdoc/>
        internal protected override bool IsValidSearchPosition(VectorN position) => true;
    }

    /// <summary>
    /// A Particle Swarm Optimization (PSO) based solver for 4-dimensional linear equations of the form Ax=b.
    /// </summary>
    public class LinearEquation4Solver
        : PSOProblem<Scalar, LinearEquation4Solver>
    {
        /// <inheritdoc/>
        /// <summary>
        /// The dimensionality of the linear equations (4).
        /// </summary>
        public override int Dimensionality { get; } = 4;
        /// <summary>
        /// The 4x4-matrix A.
        /// </summary>
        public Matrix4 A { get; }
        /// <summary>
        /// The 4-dimensional vector b.
        /// </summary>
        public Vector4 b { get; }


        /// <summary>
        /// Creates the problem definition for the linear equation system Ax=b.
        /// </summary>
        /// <param name="A">The 4x4-matrix A.</param>
        /// <param name="b">The 4-dimensional vector b.</param>
        public LinearEquation4Solver(Matrix4 A, Vector4 b) => (this.A, this.b) = (A, b);

        /// <inheritdoc/>
        /// <summary>
        /// Returns the value of |Ax-b|.
        /// </summary>
        /// <param name="x">Candidate solution x.</param>
        /// <returns>|Ax-b|</returns>
        public override Scalar GetValue(VectorN x) => A.Multiply(new Vector4(x)).DistanceTo(b);
        
        /// <inheritdoc/>
        internal protected override bool IsValidSearchPosition(VectorN position) => true;
    }

    /// <summary>
    /// A Particle Swarm Optimization (PSO) based solver for 5-dimensional linear equations of the form Ax=b.
    /// </summary>
    public class LinearEquation5Solver
        : PSOProblem<Scalar, LinearEquation5Solver>
    {
        /// <inheritdoc/>
        /// <summary>
        /// The dimensionality of the linear equations (5).
        /// </summary>
        public override int Dimensionality { get; } = 5;
        /// <summary>
        /// The 5x5-matrix A.
        /// </summary>
        public Matrix5 A { get; }
        /// <summary>
        /// The 5-dimensional vector b.
        /// </summary>
        public Vector5 b { get; }


        /// <summary>
        /// Creates the problem definition for the linear equation system Ax=b.
        /// </summary>
        /// <param name="A">The 5x5-matrix A.</param>
        /// <param name="b">The 5-dimensional vector b.</param>
        public LinearEquation5Solver(Matrix5 A, Vector5 b) => (this.A, this.b) = (A, b);

        /// <inheritdoc/>
        /// <summary>
        /// Returns the value of |Ax-b|.
        /// </summary>
        /// <param name="x">Candidate solution x.</param>
        /// <returns>|Ax-b|</returns>
        public override Scalar GetValue(VectorN x) => A.Multiply(new Vector5(x)).DistanceTo(b);
        
        /// <inheritdoc/>
        internal protected override bool IsValidSearchPosition(VectorN position) => true;
    }

    /// <summary>
    /// A Particle Swarm Optimization (PSO) based solver for 6-dimensional linear equations of the form Ax=b.
    /// </summary>
    public class LinearEquation6Solver
        : PSOProblem<Scalar, LinearEquation6Solver>
    {
        /// <inheritdoc/>
        /// <summary>
        /// The dimensionality of the linear equations (6).
        /// </summary>
        public override int Dimensionality { get; } = 6;
        /// <summary>
        /// The 6x6-matrix A.
        /// </summary>
        public Matrix6 A { get; }
        /// <summary>
        /// The 6-dimensional vector b.
        /// </summary>
        public Vector6 b { get; }


        /// <summary>
        /// Creates the problem definition for the linear equation system Ax=b.
        /// </summary>
        /// <param name="A">The 6x6-matrix A.</param>
        /// <param name="b">The 6-dimensional vector b.</param>
        public LinearEquation6Solver(Matrix6 A, Vector6 b) => (this.A, this.b) = (A, b);

        /// <inheritdoc/>
        /// <summary>
        /// Returns the value of |Ax-b|.
        /// </summary>
        /// <param name="x">Candidate solution x.</param>
        /// <returns>|Ax-b|</returns>
        public override Scalar GetValue(VectorN x) => A.Multiply(new Vector6(x)).DistanceTo(b);
        
        /// <inheritdoc/>
        internal protected override bool IsValidSearchPosition(VectorN position) => true;
    }

    /// <summary>
    /// A Particle Swarm Optimization (PSO) based solver for 7-dimensional linear equations of the form Ax=b.
    /// </summary>
    public class LinearEquation7Solver
        : PSOProblem<Scalar, LinearEquation7Solver>
    {
        /// <inheritdoc/>
        /// <summary>
        /// The dimensionality of the linear equations (7).
        /// </summary>
        public override int Dimensionality { get; } = 7;
        /// <summary>
        /// The 7x7-matrix A.
        /// </summary>
        public Matrix7 A { get; }
        /// <summary>
        /// The 7-dimensional vector b.
        /// </summary>
        public Vector7 b { get; }


        /// <summary>
        /// Creates the problem definition for the linear equation system Ax=b.
        /// </summary>
        /// <param name="A">The 7x7-matrix A.</param>
        /// <param name="b">The 7-dimensional vector b.</param>
        public LinearEquation7Solver(Matrix7 A, Vector7 b) => (this.A, this.b) = (A, b);

        /// <inheritdoc/>
        /// <summary>
        /// Returns the value of |Ax-b|.
        /// </summary>
        /// <param name="x">Candidate solution x.</param>
        /// <returns>|Ax-b|</returns>
        public override Scalar GetValue(VectorN x) => A.Multiply(new Vector7(x)).DistanceTo(b);
        
        /// <inheritdoc/>
        internal protected override bool IsValidSearchPosition(VectorN position) => true;
    }

    /// <summary>
    /// A Particle Swarm Optimization (PSO) based solver for 8-dimensional linear equations of the form Ax=b.
    /// </summary>
    public class LinearEquation8Solver
        : PSOProblem<Scalar, LinearEquation8Solver>
    {
        /// <inheritdoc/>
        /// <summary>
        /// The dimensionality of the linear equations (8).
        /// </summary>
        public override int Dimensionality { get; } = 8;
        /// <summary>
        /// The 8x8-matrix A.
        /// </summary>
        public Matrix8 A { get; }
        /// <summary>
        /// The 8-dimensional vector b.
        /// </summary>
        public Vector8 b { get; }


        /// <summary>
        /// Creates the problem definition for the linear equation system Ax=b.
        /// </summary>
        /// <param name="A">The 8x8-matrix A.</param>
        /// <param name="b">The 8-dimensional vector b.</param>
        public LinearEquation8Solver(Matrix8 A, Vector8 b) => (this.A, this.b) = (A, b);

        /// <inheritdoc/>
        /// <summary>
        /// Returns the value of |Ax-b|.
        /// </summary>
        /// <param name="x">Candidate solution x.</param>
        /// <returns>|Ax-b|</returns>
        public override Scalar GetValue(VectorN x) => A.Multiply(new Vector8(x)).DistanceTo(b);
        
        /// <inheritdoc/>
        internal protected override bool IsValidSearchPosition(VectorN position) => true;
    }

    /// <summary>
    /// A Particle Swarm Optimization (PSO) based solver for 9-dimensional linear equations of the form Ax=b.
    /// </summary>
    public class LinearEquation9Solver
        : PSOProblem<Scalar, LinearEquation9Solver>
    {
        /// <inheritdoc/>
        /// <summary>
        /// The dimensionality of the linear equations (9).
        /// </summary>
        public override int Dimensionality { get; } = 9;
        /// <summary>
        /// The 9x9-matrix A.
        /// </summary>
        public Matrix9 A { get; }
        /// <summary>
        /// The 9-dimensional vector b.
        /// </summary>
        public Vector9 b { get; }


        /// <summary>
        /// Creates the problem definition for the linear equation system Ax=b.
        /// </summary>
        /// <param name="A">The 9x9-matrix A.</param>
        /// <param name="b">The 9-dimensional vector b.</param>
        public LinearEquation9Solver(Matrix9 A, Vector9 b) => (this.A, this.b) = (A, b);

        /// <inheritdoc/>
        /// <summary>
        /// Returns the value of |Ax-b|.
        /// </summary>
        /// <param name="x">Candidate solution x.</param>
        /// <returns>|Ax-b|</returns>
        public override Scalar GetValue(VectorN x) => A.Multiply(new Vector9(x)).DistanceTo(b);
        
        /// <inheritdoc/>
        internal protected override bool IsValidSearchPosition(VectorN position) => true;
    }

    /// <summary>
    /// A Particle Swarm Optimization (PSO) based solver for 10-dimensional linear equations of the form Ax=b.
    /// </summary>
    public class LinearEquation10Solver
        : PSOProblem<Scalar, LinearEquation10Solver>
    {
        /// <inheritdoc/>
        /// <summary>
        /// The dimensionality of the linear equations (10).
        /// </summary>
        public override int Dimensionality { get; } = 10;
        /// <summary>
        /// The 10x10-matrix A.
        /// </summary>
        public Matrix10 A { get; }
        /// <summary>
        /// The 10-dimensional vector b.
        /// </summary>
        public Vector10 b { get; }


        /// <summary>
        /// Creates the problem definition for the linear equation system Ax=b.
        /// </summary>
        /// <param name="A">The 10x10-matrix A.</param>
        /// <param name="b">The 10-dimensional vector b.</param>
        public LinearEquation10Solver(Matrix10 A, Vector10 b) => (this.A, this.b) = (A, b);

        /// <inheritdoc/>
        /// <summary>
        /// Returns the value of |Ax-b|.
        /// </summary>
        /// <param name="x">Candidate solution x.</param>
        /// <returns>|Ax-b|</returns>
        public override Scalar GetValue(VectorN x) => A.Multiply(new Vector10(x)).DistanceTo(b);
        
        /// <inheritdoc/>
        internal protected override bool IsValidSearchPosition(VectorN position) => true;
    }

}

namespace Unknown6656.Mathematics.LinearAlgebra
{
    public readonly partial struct Matrix2
    {
        public readonly PSOSolver<Scalar, LinearEquation2Solver> CreatePSOSolver(Vector2 b) => CreatePSOSolver(b, PSOSolverConfiguration.Default);

        public readonly PSOSolver<Scalar, LinearEquation2Solver> CreatePSOSolver(Vector2 b, PSOSolverConfiguration configuration) => new LinearEquation2Solver(this, b).CreateSolver(configuration);
    }

    public readonly partial struct Matrix3
    {
        public readonly PSOSolver<Scalar, LinearEquation3Solver> CreatePSOSolver(Vector3 b) => CreatePSOSolver(b, PSOSolverConfiguration.Default);

        public readonly PSOSolver<Scalar, LinearEquation3Solver> CreatePSOSolver(Vector3 b, PSOSolverConfiguration configuration) => new LinearEquation3Solver(this, b).CreateSolver(configuration);
    }

    public readonly partial struct Matrix4
    {
        public readonly PSOSolver<Scalar, LinearEquation4Solver> CreatePSOSolver(Vector4 b) => CreatePSOSolver(b, PSOSolverConfiguration.Default);

        public readonly PSOSolver<Scalar, LinearEquation4Solver> CreatePSOSolver(Vector4 b, PSOSolverConfiguration configuration) => new LinearEquation4Solver(this, b).CreateSolver(configuration);
    }

    public readonly partial struct Matrix5
    {
        public readonly PSOSolver<Scalar, LinearEquation5Solver> CreatePSOSolver(Vector5 b) => CreatePSOSolver(b, PSOSolverConfiguration.Default);

        public readonly PSOSolver<Scalar, LinearEquation5Solver> CreatePSOSolver(Vector5 b, PSOSolverConfiguration configuration) => new LinearEquation5Solver(this, b).CreateSolver(configuration);
    }

    public readonly partial struct Matrix6
    {
        public readonly PSOSolver<Scalar, LinearEquation6Solver> CreatePSOSolver(Vector6 b) => CreatePSOSolver(b, PSOSolverConfiguration.Default);

        public readonly PSOSolver<Scalar, LinearEquation6Solver> CreatePSOSolver(Vector6 b, PSOSolverConfiguration configuration) => new LinearEquation6Solver(this, b).CreateSolver(configuration);
    }

    public readonly partial struct Matrix7
    {
        public readonly PSOSolver<Scalar, LinearEquation7Solver> CreatePSOSolver(Vector7 b) => CreatePSOSolver(b, PSOSolverConfiguration.Default);

        public readonly PSOSolver<Scalar, LinearEquation7Solver> CreatePSOSolver(Vector7 b, PSOSolverConfiguration configuration) => new LinearEquation7Solver(this, b).CreateSolver(configuration);
    }

    public readonly partial struct Matrix8
    {
        public readonly PSOSolver<Scalar, LinearEquation8Solver> CreatePSOSolver(Vector8 b) => CreatePSOSolver(b, PSOSolverConfiguration.Default);

        public readonly PSOSolver<Scalar, LinearEquation8Solver> CreatePSOSolver(Vector8 b, PSOSolverConfiguration configuration) => new LinearEquation8Solver(this, b).CreateSolver(configuration);
    }

    public readonly partial struct Matrix9
    {
        public readonly PSOSolver<Scalar, LinearEquation9Solver> CreatePSOSolver(Vector9 b) => CreatePSOSolver(b, PSOSolverConfiguration.Default);

        public readonly PSOSolver<Scalar, LinearEquation9Solver> CreatePSOSolver(Vector9 b, PSOSolverConfiguration configuration) => new LinearEquation9Solver(this, b).CreateSolver(configuration);
    }

    public readonly partial struct Matrix10
    {
        public readonly PSOSolver<Scalar, LinearEquation10Solver> CreatePSOSolver(Vector10 b) => CreatePSOSolver(b, PSOSolverConfiguration.Default);

        public readonly PSOSolver<Scalar, LinearEquation10Solver> CreatePSOSolver(Vector10 b, PSOSolverConfiguration configuration) => new LinearEquation10Solver(this, b).CreateSolver(configuration);
    }

}

