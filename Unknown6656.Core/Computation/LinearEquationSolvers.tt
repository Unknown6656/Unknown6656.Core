<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    int maxdim = 4;

    try
    {
        string path = Host.ResolvePath("../maxdim.txt");

        maxdim = int.Parse(File.ReadAllText(path).Trim()) + 1;
    }
    catch { }

    IEnumerable<int> r(int f, int t) => Enumerable.Range(f, t);
#>
///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffffff")#>              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

using Unknown6656.Computation.ParticleSwarmOptimization;
using Unknown6656.Mathematics.LinearAlgebra;


namespace Unknown6656.Computation.ParticleSwarmOptimization
{
<#
    for (int dim = 2; dim < maxdim; ++dim)
    {
        string[] cols = r(0, dim).Select(i => "_c" + i).ToArray();
        string matname = "Matrix" + dim;
        string vecname = "Vector" + dim;
        string typename = $"LinearEquation{dim}Solver";
#>
    /// <summary>
    /// A Particle Swarm Optimization (PSO) based solver for <#=dim#>-dimensional linear equations of the form Ax=b.
    /// </summary>
    public class <#=typename#>
        : PSOProblem<Scalar, <#=typename#>>
    {
        /// <inheritdoc/>
        /// <summary>
        /// The dimensionality of the linear equations (<#=dim#>).
        /// </summary>
        public override int Dimensionality { get; } = <#=dim#>;
        /// <summary>
        /// The <#=dim#>x<#=dim#>-matrix A.
        /// </summary>
        public Matrix<#=dim#> A { get; }
        /// <summary>
        /// The <#=dim#>-dimensional vector b.
        /// </summary>
        public <#=vecname#> b { get; }


        /// <summary>
        /// Creates the problem definition for the linear equation system Ax=b.
        /// </summary>
        /// <param name="A">The <#=dim#>x<#=dim#>-matrix A.</param>
        /// <param name="b">The <#=dim#>-dimensional vector b.</param>
        public <#=typename#>(<#=matname#> A, <#=vecname#> b) => (this.A, this.b) = (A, b);

        /// <inheritdoc/>
        /// <summary>
        /// Returns the value of |Ax-b|.
        /// </summary>
        /// <param name="x">Candidate solution x.</param>
        /// <returns>|Ax-b|</returns>
        public override Scalar GetValue(VectorN x) => A.Multiply(new <#=vecname#>(x)).DistanceTo(b);
        
        /// <inheritdoc/>
        internal protected override bool IsValidSearchPosition(VectorN position) => true;
    }

<#
    }
#>
}

namespace Unknown6656.Mathematics.LinearAlgebra
{
<#
    for (int dim = 2; dim < maxdim; ++dim)
    {
        string[] cols = r(0, dim).Select(i => "_c" + i).ToArray();
        string solname = $"LinearEquation{dim}Solver";
        string matname = "Matrix" + dim;
        string vecname = "Vector" + dim;
#>
    public readonly partial struct <#=matname#>
    {
        public readonly PSOSolver<Scalar, <#=solname#>> CreatePSOSolver(<#=vecname#> b) => CreatePSOSolver(b, PSOSolverConfiguration.Default);

        public readonly PSOSolver<Scalar, <#=solname#>> CreatePSOSolver(<#=vecname#> b, PSOSolverConfiguration configuration) => new <#=solname#>(this, b).CreateSolver(configuration);
    }

<#
    }
#>
}

