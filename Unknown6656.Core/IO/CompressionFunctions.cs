///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED 2020-08-31 11:29:02.588715              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

#nullable enable

using System.IO.Compression;
using System.IO;

namespace Unknown6656.IO
{
    public abstract partial class CompressionFunction
    {

        public static GZipCompression GZip { get; } = new GZipCompression();

        public static DeflateCompression Deflate { get; } = new DeflateCompression();

        public static BrotliCompression Brotli { get; } = new BrotliCompression();
    }

    public sealed class GZipCompression
        : CompressionFunction
    {
        public override byte[] CompressData(byte[] data)
        {
            using MemoryStream mso = new MemoryStream();
            using GZipStream compr = new GZipStream(mso, CompressionLevel.Optimal);
            using BinaryWriter wr = new BinaryWriter(compr);

            wr.Write(data.Length);
            wr.Write(data, 0, data.Length);
            wr.Flush();
            wr.Close();
            compr.Close();

            return mso.ToArray();
        }

        public override byte[] UncompressData(byte[] data)
        {
            using MemoryStream msi = new MemoryStream(data);
            using GZipStream decompr = new GZipStream(msi, CompressionMode.Decompress);
            using MemoryStream mso = new MemoryStream();
            using BinaryReader rd = new BinaryReader(mso);

            decompr.CopyTo(mso);
            decompr.Close();
            mso.Seek(0, SeekOrigin.Begin);

            int count = rd.ReadInt32();

            return rd.ReadBytes(count);
        }
    }

    public sealed class DeflateCompression
        : CompressionFunction
    {
        public override byte[] CompressData(byte[] data)
        {
            using MemoryStream mso = new MemoryStream();
            using DeflateStream compr = new DeflateStream(mso, CompressionLevel.Optimal);
            using BinaryWriter wr = new BinaryWriter(compr);

            wr.Write(data.Length);
            wr.Write(data, 0, data.Length);
            wr.Flush();
            wr.Close();
            compr.Close();

            return mso.ToArray();
        }

        public override byte[] UncompressData(byte[] data)
        {
            using MemoryStream msi = new MemoryStream(data);
            using DeflateStream decompr = new DeflateStream(msi, CompressionMode.Decompress);
            using MemoryStream mso = new MemoryStream();
            using BinaryReader rd = new BinaryReader(mso);

            decompr.CopyTo(mso);
            decompr.Close();
            mso.Seek(0, SeekOrigin.Begin);

            int count = rd.ReadInt32();

            return rd.ReadBytes(count);
        }
    }

    public sealed class BrotliCompression
        : CompressionFunction
    {
        public override byte[] CompressData(byte[] data)
        {
            using MemoryStream mso = new MemoryStream();
            using BrotliStream compr = new BrotliStream(mso, CompressionLevel.Optimal);
            using BinaryWriter wr = new BinaryWriter(compr);

            wr.Write(data.Length);
            wr.Write(data, 0, data.Length);
            wr.Flush();
            wr.Close();
            compr.Close();

            return mso.ToArray();
        }

        public override byte[] UncompressData(byte[] data)
        {
            using MemoryStream msi = new MemoryStream(data);
            using BrotliStream decompr = new BrotliStream(msi, CompressionMode.Decompress);
            using MemoryStream mso = new MemoryStream();
            using BinaryReader rd = new BinaryReader(mso);

            decompr.CopyTo(mso);
            decompr.Close();
            mso.Seek(0, SeekOrigin.Begin);

            int count = rd.ReadInt32();

            return rd.ReadBytes(count);
        }
    }
}