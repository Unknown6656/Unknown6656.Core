<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffffff")#>              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

#nullable enable

using System.IO.Compression;
using System.IO;
<#
    var algorithms = new string[]
    {
        "GZip",
        "Deflate",
        "Brotli",
    };
#>

namespace Unknown6656.IO
{
    public abstract partial class CompressionFunction
    {
<#
    foreach (string name in algorithms)
    {
#>

        public static <#=name#>Compression <#=name#> { get; } = new <#=name#>Compression();
<#
    }
#>
    }
<#
    foreach (string name in algorithms)
    {
#>

    public sealed class <#=name#>Compression
        : CompressionFunction
    {
        public override byte[] CompressData(byte[] data)
        {
            using MemoryStream mso = new MemoryStream();
            using <#=name#>Stream compr = new <#=name#>Stream(mso, CompressionLevel.Optimal);
            using BinaryWriter wr = new BinaryWriter(compr);

            wr.Write(data.Length);
            wr.Write(data, 0, data.Length);
            wr.Flush();
            wr.Close();
            compr.Close();

            return mso.ToArray();
        }

        public override byte[] UncompressData(byte[] data)
        {
            using MemoryStream msi = new MemoryStream(data);
            using <#=name#>Stream decompr = new <#=name#>Stream(msi, CompressionMode.Decompress);
            using MemoryStream mso = new MemoryStream();
            using BinaryReader rd = new BinaryReader(mso);

            decompr.CopyTo(mso);
            decompr.Close();
            mso.Seek(0, SeekOrigin.Begin);

            int count = rd.ReadInt32();

            return rd.ReadBytes(count);
        }
    }
<#
    }
#>
}