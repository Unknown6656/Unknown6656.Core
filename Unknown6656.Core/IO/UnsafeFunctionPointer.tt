<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffffff")#>              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

using System.Runtime.CompilerServices;
using System;

<#
    const int MAX_SIZE = 16;

    IEnumerable<int> r(int f, int t) => Enumerable.Range(f, t);
#>
namespace Unknown6656.IO;


public unsafe sealed partial class UnsafeFunctionPointer
{
<#
    for (int i = 0; i <= MAX_SIZE; ++i)
    {
        string typestr = string.Join(", ", r(0, i).Select(j => "T" + j));

        if (!string.IsNullOrEmpty(typestr))
            typestr = "<" + typestr + ">";
#>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Action<#=typestr#> AsAction<#=typestr#>()
        => new(Invoke);

<#
    }
    
    for (int i = 0; i <= MAX_SIZE; ++i)
    {
        string typestr = '<' + string.Join(", ", r(0, i).Select(j => "T" + j).Append("T")) + '>';
#>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Func<#=typestr#> AsFunction<#=typestr#>() =>
        new(Invoke<#=typestr#>);

<#
    }
    
    for (int i = 0; i <= MAX_SIZE; ++i)
    {
        string typestr = '<' + string.Join(", ", r(0, i).Select(j => "T" + j).Append("T")) + '>';
#>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public delegate*<#=typestr#> AsUnsafe<#=typestr#>() =>
        (delegate*<#=typestr#>)BufferAddress;

<#
    }
    
    for (int i = 0; i <= MAX_SIZE; ++i)
    {
        var typeargs = r(0, i).Select(j => "T" + j);
        string typestr = string.Join(", ", typeargs);
        string typestr_e = '<' + string.Join(", ", typeargs.Append("T")) + '>';
        string argstr = string.Join(", ", typeargs.Select((a, i) => $"{a} t{i}"));
        string args = string.Join(", ", r(0, i).Select(j => "t" + j));

        if (!string.IsNullOrEmpty(typestr))
            typestr = "<" + typestr + ">";
#>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Invoke<#=typestr#>(<#=argstr#>) =>
        ((<#= i == 0 ? "delegate*<void>" : typestr.Replace("<", "delegate*<").Replace(">", ", void>") #>)BufferAddress)(<#=args#>);

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T Invoke<#=typestr_e#>(<#=argstr#>) =>
        ((delegate*<#=typestr_e#>)BufferAddress)(<#=args#>);

<#
    }
#>
}
