///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED 2021-10-02 09:13:34.749365              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Linq;
using System;

using Unknown6656.Mathematics.LinearAlgebra;
using Unknown6656.Mathematics.Analysis;
using Unknown6656.Mathematics;
using Unknown6656.Common;


namespace Unknown6656.Imaging
{

    public unsafe partial struct HDRColor
    {
        /// <inheritdoc/>
        public readonly double Average => (R + G + B) / 3;

        /// <inheritdoc/>
        public readonly double CIEGray => (.299 * R) + (.587 * G) + (.114 * B);

        /// <inheritdoc/>
        public readonly (double L, double a, double b) CIELAB94 => ToCIELAB94();

        /// <inheritdoc/>
        public (double Hue, double Saturation, double Luminosity) HSL
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            readonly get => ToHSL();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                HDRColor color = FromHSL(value.Hue, value.Saturation, value.Luminosity);
                (R, G, B) = (color.R, color.G, color.B);
            }
        }

        /// <inheritdoc/>
        public (double Hue, double Saturation, double Value) HSV
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            readonly get => ToHSV();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                HDRColor color = FromHSV(value.Hue, value.Saturation, value.Value);
                (R, G, B) = (color.R, color.G, color.B);
            }
        }

        /// <inheritdoc/>
        public (double C, double M, double Y, double K) CMYK
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            readonly get => ToCMYK();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                HDRColor color = FromCMYK(value.C, value.M, value.Y, value.K);
                (R, G, B) = (color.R, color.G, color.B);
            }
        }

        /// <inheritdoc/>
        public (double Y, double U, double V) YUV
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            readonly get => ToYUV();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                HDRColor color = FromYUV(value.Y, value.U, value.V);
                (R, G, B) = (color.R, color.G, color.B);
            }
        }

        /// <inheritdoc/>
        public readonly (HDRColor @this, HDRColor Triadic1, HDRColor Triadic2) Triadic
        {
            get
            {
                (double h, double s, double l) = ToHSL();

                return (
                    this,
                    FromHSL(h + Math.PI * 2 / 3, s, l, A),
                    FromHSL(h + Math.PI * 4 / 3, s, l, A)
                );
            }
        }

        /// <inheritdoc/>
        public readonly HDRColor[] Analogous
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                HDRColor copy = this;

                return Enumerable.Range(-3, 7).Select(i => copy.Rotate(i * Math.PI / 6)).ToArray();
            }
        }

        /// <inheritdoc/>
        public readonly HDRColor[] Neutrals
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                HDRColor copy = this;

                return Enumerable.Range(-3, 7).Select(i => copy.Rotate(i * Math.PI / 12)).ToArray();
            }
        }

        /// <inheritdoc/>
        public readonly HDRColor Normalized
        {
            get
            {
                HDRColor copy = this;
                double max = Math.Max(copy.R, Math.Max(copy.G, copy.B));

                if (max > 0)
                {
                    copy.R /= max;
                    copy.G /= max;
                    copy.B /= max;
                }

                return copy;
            }
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public HDRColor(uint argb)
            : this((int)argb)
        {
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public HDRColor(double r, double g, double b)
            : this(r, g, b, 1)
        {
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public HDRColor(HDRColor color)
            : this(color, color.A)
        {
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public HDRColor(HDRColor color, double α)
            : this(color.R, color.G, color.B, α)
        {
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public HDRColor(HDRColor* ptr)
            : this(*ptr)
        {
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public HDRColor(HDRColor** ptr)
            : this(**ptr)
        {
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public HDRColor(double r, double g, double b, double α)
            : this()
        {
            A = α;
            R = r;
            G = g;
            B = b;
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public HDRColor(int argb) : this() => ARGB32 = argb;

        /// <inheritdoc/>
        public readonly HDRColor Rotate(Scalar φ)
        {
            φ += Scalar.Tau;
            φ %= Scalar.Tau;

            if (φ.IsZero)
                return this;
            else if (φ.Is(Scalar.Pi))
                return Complement;

            (double h, double s, double l) = ToHSL();

            return FromHSL(h + φ, s, l, A);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly HDRColor[] GetNeutrals(Scalar φ_step, int count)
        {
            HDRColor copy = this;

            return Enumerable.Range(-count / 2, count).Select(i => copy.Rotate(i * φ_step)).ToArray();
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly HDRColor CorrectGamma(Scalar gamma) => new HDRColor(
            Math.Pow(R, 1 / gamma),
            Math.Pow(G, 1 / gamma),
            Math.Pow(B, 1 / gamma),
            A
        );

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly Scalar EucledianDistanceTo(HDRColor other) => ((Vector4)this).DistanceTo(other);

        /// <inheritdoc/>
        public Scalar CIALAB94DistanceTo(IColor other)
        {
            (double L1, double a1, double b1) = ToCIELAB94();
            (double L2, double a2, double b2) = other.ToCIELAB94();

            double δL = L1 - L2;
            double δa = a1 - a2;
            double δb = b1 - b2;

            double c1 = Math.Sqrt(a1 * a1 + b1 *b1);
            double c2 = Math.Sqrt(a2 * a2 + b2 * b2);
            double δC = c1 - c2;
            double δH = δa * δa + δb * δb - δC * δC;

            δH = δH < 0 ? 0 : Math.Sqrt(δH);

            double sc = 1 + .045 * c1;
            double sh = 1 + .015 * c1;

            double δCkcsc = δC / sc;
            double δHkhsh = δH / sh;

            double i = δL * δL + δCkcsc * δCkcsc + δHkhsh * δHkhsh;

            return i < 0 ? 0 : Math.Sqrt(i);
        }

        /// <inheritdoc/>
        public readonly (double H, double S, double L) ToHSL()
        {
            double a = Math.Min(Math.Min(R, G), B);
            double b = Math.Max(Math.Max(R, G), B);
            double δ = b - a;
            double l = (b + a) / 2;
            double h, s;

            if (δ < 1e-5)
                s = h = 0;
            else
            {
                s = δ / (l < .5 ? b + a : 2 - b - a);

                double δr = (b - R) / δ;
                double δg = (b - G) / δ;
                double δb = (b - B) / δ;

                h = R == b ? δb - δg :
                    G == b ? 2 + δr - δb :
                              4 + δg - δr;

                h *= 60;

                if (h < 0)
                    h += 360;

                h *= Math.PI / 180;
            }

            return (h, s, l);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly (double H, double S, double V) ToHSV()
        {
            (double H, double S, double L) = ToHSL();
            double V = S * Math.Min(L, 1 - L) + L;

            return (H, V > 0 ? 2 - 2 * L / V : 0, V);
        }

        /// <inheritdoc/>
        public readonly (double L, double a, double b) ToCIELAB94()
        {
            static double pre(double channel) => channel > .04045 ? Math.Pow((channel + .055) / 1.055, 2.4) : channel / 12.92;
            static double post(double channel) => channel > .008856 ? Math.Pow(channel, 1 / 3) : (7.787 * channel) + 16 / 116;

            double rf = pre(R);
            double gf = pre(G);
            double bf = pre(B);
            double x = (rf * .4124 + gf * .3576 + bf * .1805) /  .95047;
            double y = (rf * .2126 + gf * .7152 + bf * .0722) / 1.00000;
            double z = (rf * .0193 + gf * .1192 + bf * .9505) / 1.08883;

            x = post(x);
            y = post(y);
            z = post(z);

            return (
                L: (116 * y) - 16,
                a: 500 * (x - y),
                b: 200 * (y - z)
            );
        }

        /// <inheritdoc/>
        public readonly (double C, double M, double Y, double K) ToCMYK()
        {
            double K = 1 - Math.Max(Math.Max(R, G), B);

            return (
                (1 - R - K) / (1 - K),
                (1 - G - K) / (1 - K),
                (1 - B - K) / (1 - K),
                K
            );
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly DiscreteSpectrum ToSpectrum()
        {
            HDRColor color = this;
            Dictionary<Wavelength, double> intensities = Wavelength.VisibleWavelengths.ToDictionary(LINQ.id, w => color.GetIntensity(w, 0));

            return new DiscreteSpectrum(intensities);
        }

        /// <inheritdoc/>
        public readonly double GetIntensity(Wavelength wavelength, double tolerance = 1e-1)
        {
            (Wavelength lo, Wavelength hi) = (wavelength.InNanometers + tolerance, wavelength.InNanometers - tolerance);
            double dist_mid = wavelength.ToColor().CIALAB94DistanceTo(this);

            if (tolerance < Scalar.ComputationalEpsilon)
                return dist_mid;

            double dist_lo = lo.ToColor().CIALAB94DistanceTo(this);
            double dist_hi = hi.ToColor().CIALAB94DistanceTo(this);

            return (dist_lo * .2 + dist_mid * .6 + dist_hi * .2).Clamp();
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly (double Y, double U, double V) ToYUV() => (
             .257 * R + .504 * G + .098 * B + 16,
            -.148 * R - .291 * G + .439 * B + 128,
             .439 * R - .368 * G - .071 * B + 128
        );

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly (double Y, double Cb, double Cr) ToYCbCr() => (
             .299   * R + .587   * G + .114   * B,
            -.16874 * R - .33126 * G + .5     * B + 128,
             .5     * R - .41869 * G - .08131 * B + 128
        );

        /// <inheritdoc/>
        public readonly ConsoleColor ToConsoleColor(ConsoleColorScheme color_scheme)
        {
            HDRColor copy = this;
            Scalar norm = Scalar.Sqrt(3);

            return (from kvp in IColor.ConsoleColorSchemes[color_scheme]
                    orderby copy.EucledianDistanceTo(kvp.Value) / norm ascending
                    select kvp.Key).FirstOrDefault();
        }

        /// <inheritdoc/>
        public readonly double DistanceTo(HDRColor other, ColorEqualityMetric metric)
        {
            switch (metric)
            {
                case ColorEqualityMetric.RGBAChannels:
                    return Math.Abs(R - other.R)
                        + Math.Abs(G - other.G)
                        + Math.Abs(B - other.B)
                        + Math.Abs(A - other.A);
                case ColorEqualityMetric.RGBChannels:
                    return Math.Abs(R - other.R)
                        + Math.Abs(G - other.G)
                        + Math.Abs(B - other.B);
                case ColorEqualityMetric.RChannel:
                    return Math.Abs(R - other.R);
                case ColorEqualityMetric.GChannel:
                    return Math.Abs(G - other.G);
                case ColorEqualityMetric.BChannel:
                    return Math.Abs(B - other.B);
                case ColorEqualityMetric.Alpha:
                    return Math.Abs(A - other.A);
                case ColorEqualityMetric.RGChannels:
                    return Math.Abs(R - other.R)
                        + Math.Abs(G - other.G);
                case ColorEqualityMetric.RBChannels:
                    return Math.Abs(R - other.R)
                        + Math.Abs(B - other.B);
                case ColorEqualityMetric.RAChannels:
                    return Math.Abs(R - other.R)
                        + Math.Abs(A - other.A);
                case ColorEqualityMetric.GBChannels:
                    return Math.Abs(G - other.G)
                        + Math.Abs(B - other.B);
                case ColorEqualityMetric.GAChannels:
                    return Math.Abs(G - other.G)
                        + Math.Abs(A - other.A);
                case ColorEqualityMetric.BAChannels:
                    return Math.Abs(A - other.A)
                        + Math.Abs(B - other.B);
                case ColorEqualityMetric.RGAChannels:
                    return Math.Abs(R - other.R)
                        + Math.Abs(G - other.G)
                        + Math.Abs(A - other.A);
                case ColorEqualityMetric.RBAChannels:
                    return Math.Abs(R - other.R)
                        + Math.Abs(B - other.B)
                        + Math.Abs(A - other.A);
                case ColorEqualityMetric.GBAChannels:
                    return Math.Abs(G - other.G)
                        + Math.Abs(B - other.B)
                        + Math.Abs(A - other.A);
                case ColorEqualityMetric.CChannel:
                    return Math.Abs(ToCMYK().C - other.ToCMYK().C);
                case ColorEqualityMetric.MChannel:
                    return Math.Abs(ToCMYK().M - other.ToCMYK().M);
                case ColorEqualityMetric.YChannel:
                    return Math.Abs(ToCMYK().Y - other.ToCMYK().Y);
                case ColorEqualityMetric.KChannel:
                    return Math.Abs(ToCMYK().K - other.ToCMYK().K);
                case ColorEqualityMetric.Hue:
                    return Math.Abs(ToHSL().H - other.ToHSL().H);
                case ColorEqualityMetric.Saturation:
                    return Math.Abs(ToHSL().S - other.ToHSL().S);
                case ColorEqualityMetric.Luminance:
                    return Math.Abs(ToHSL().L - other.ToHSL().L);
                case ColorEqualityMetric.CIEGray:
                    return Math.Abs(CIEGray - other.CIEGray);
                case ColorEqualityMetric.Average:
                    return Math.Abs(Average - other.Average);
                case ColorEqualityMetric.EucledianLength:
                    return EucledianDistanceTo(other);
                case ColorEqualityMetric.LegacyConsoleColor:
                    return FromConsoleColor(ToConsoleColor(ConsoleColorScheme.Legacy), ConsoleColorScheme.Legacy).DistanceTo(
                        FromConsoleColor(other.ToConsoleColor(ConsoleColorScheme.Legacy), ConsoleColorScheme.Legacy),
                        ColorEqualityMetric.RGAChannels
                    );
                case ColorEqualityMetric.Windows10ConsoleColor:
                    return FromConsoleColor(ToConsoleColor(ConsoleColorScheme.Windows10), ConsoleColorScheme.Windows10).DistanceTo(
                        FromConsoleColor(other.ToConsoleColor(ConsoleColorScheme.Windows10), ConsoleColorScheme.Windows10),
                        ColorEqualityMetric.RGAChannels
                    );
                default:
                    throw new ArgumentOutOfRangeException(nameof(metric));
            }
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly bool Equals(HDRColor other, ColorEqualityMetric metric) => Equals(other, metric, Scalar.ComputationalEpsilon);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly bool Equals(HDRColor other, ColorEqualityMetric metric, double tolerance) => Equals(other, new(tolerance, metric));

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly bool Equals(HDRColor other, ColorTolerance tolerance) => DistanceTo(other, tolerance.Metric) <= tolerance.Tolerance;

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromConsoleColor(ConsoleColor color, ConsoleColorScheme color_scheme) => IColor.ConsoleColorSchemes[color_scheme][color];

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromComplexWrapped(Complex c) => FromComplexWrapped(c, 1);

        /// <inheritdoc/>
        public static HDRColor FromComplexWrapped(Complex c, double α)
        {
            Scalar l = c.Length;
            Scalar i = 1L << (int)Math.Log2(l);

            if (l < 1)
                return FromHSL(c.Argument, 1, l / 2, α);

            l %= i;
            l /= (long)i << 1;
            l *= 4 / 5d;
            l += 1 / 5d;

            return FromHSL(c.Argument, 1, l, α);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromComplexSmooth(Complex c) => FromComplexSmooth(c, 1);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromComplexSmooth(Complex c, double α) => FromComplexSmooth(c, α, .95);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromComplexSmooth(Complex c, double α, Scalar white_shift) => FromHSL(c.Argument, 1, 1 - white_shift.Clamp().Power(c.Length), α);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        /// <summary>
        /// Converts the given HSL-color to a RGBA-color instance.
        /// </summary>
        /// <param name="H">The HSL-color's hue channel [0..2π]</param>
        /// <param name="S">The HSL-color's saturation channel [0..1]</param>
        /// <param name="L">The HSL-color's luminosity channel [0..1]</param>
        public static HDRColor FromHSL(double H, double S, double L) => FromHSL(H, S, L, 1);

        /// <summary>
        /// Converts the given HSL-color to a RGBA-color instance.
        /// </summary>
        /// <param name="H">The HSL-color's hue channel [0..2π]</param>
        /// <param name="S">The HSL-color's saturation channel [0..1]</param>
        /// <param name="L">The HSL-color's luminosity channel [0..1]</param>
        /// <param name="α">The color's α-channel (opacity) [0..1]</param>
        public static HDRColor FromHSL(double H, double S, double L, double α)
        {
            if (S.IsZero())
            {
                byte gray = (byte)Math.Round(L * 255);

                return new HDRColor(gray, gray, gray, α);
            }
            else
            {
                double t2 = L < .5 ? L * (1 + S) : L + S - (L * S);
                double t1 = (2 * L) - t2;

                H *= 180 / Math.PI;

                return new HDRColor(
                    calc(H + 120, t1, t2),
                    calc(H, t1, t2),
                    calc(H - 120, t1, t2),
                    α
                );

                static double calc(double h, double t1, double t2)
                {
                    h = (h + 360) % 360;

                    return h < 60 ? t1 + ((t2 - t1) * h / 60)
                        : h < 180 ? t2
                        : h < 240 ? t1 + ((t2 - t1) * (240 - h) / 60)
                        : t1;
                }
            }
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromHSV(double H, double S, double V) => FromHSV(H, S, V, 1);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromHSV(double H, double S, double V, double α)
        {
            double L = V - V * S / 2;
            double m = Math.Min(L, 1 - L);

            return FromHSL(H, m > 0 ? (V - L) / m : 0, L, α);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromCIELAB94(double L, double a, double b) => FromCIELAB94(L, a, b, 1);

        /// <inheritdoc/>
        public static HDRColor FromCIELAB94(double L, double a, double b, double α)
        {
            double y = (L + 16) / 116;
            double x = a / 500 + y;
            double z = y - b / 200;
            void pre(double fac, ref double channel)
            {
                double c3 = channel * channel * channel;

                channel = fac * ((c3 > .008856) ? c3 : (channel - 16 / 116) / 7.787);
            }
            double post(double channel) => ((channel > .0031308) ? (1.055 * Math.Pow(channel, 1 / 2.4) - .055) : 12.92 * channel).Clamp();

            pre( .95047, ref x);
            pre(1.00000, ref y);
            pre(1.08883, ref z);

            double rf = post(3.2406 * x - 1.5372 * y -  .4986 * z);
            double gf = post(-.9689 * x + 1.8758 * y +  .0415 * z);
            double bf = post( .0557 * x -  .2040 * y + 1.0570 * z);

            return new HDRColor(rf, gf, bf, α);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromXYZ(double X, double Y) => FromXYZ(X, Y, 0);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromXYZ(double X, double Y, double Z) => FromXYZ(X, Y, Z, 1);

        /// <inheritdoc/>
        public static HDRColor FromXYZ(double X, double Y, double Z, double α)
        {
            Matrix3 M = (
                2.28783845614809,    -.833367666472978,  -.45447078967511,
                -.511651382108328,   1.42275838011598,    .0888930019923529,
                 .00572041000477002, -.0159068489924701, 1.0101864389877
            );

            return new Vector4(M * (X, Y, Z), α);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromUV(double U, double V) => FromUV(U, V, 1);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromUV(double U, double V, double α) => FromXYZ((9 * U) / ((6 * U) - (16 * V) + 12), (4 * V) / ((6 * U) - (16 * V) + 12), α);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromYUV(double Y, double U, double V) => FromYUV(Y, U, V, 1);

        /// <inheritdoc/>
        public static HDRColor FromYUV(double Y, double U, double V, double α)
        {
            Y -= 16;
            U -= 128;
            V -= 128;

            return new HDRColor(
                1.164 * Y + 1.596 * V,
                1.164 * Y -  .392 * U - .813 * V,
                1.164 * Y + 2.017 * U,
                α
            );
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromYCbCr(double Y, double Cb, double Cr) => FromYCbCr(Y, Cb, Cr, 1);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromYCbCr(double Y, double Cb, double Cr, double α) => new HDRColor(
            Y + (Cr - 128) * 1.402,
            Y + (Cb - 128) * -.34414 + (Cr - 128) * -.71414,
            Y + (Cb - 128) * 1.772,
            α
        );

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromCMYK(double C, double M, double Y, double K) => FromCMYK(C, M, Y, K, 1);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromCMYK(double C, double M, double Y, double K, double α) => (
            (1 - C) * (1 - K),
            (1 - M) * (1 - K),
            (1 - Y) * (1 - K),
            α
        );

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromWavelength(in Wavelength wavelength) => FromWavelength(in wavelength, 1);

        /// <inheritdoc/>
        public static HDRColor FromWavelength(in Wavelength wavelength, double α)
        {
            double r = 0, g = 0, b = 0;

            if (wavelength.IsVisible)
            {
                double l = wavelength.InNanometers;
                double t;

                if (l < 410)
                {
                    t = (l - 400) / 10d;
                    r = .33 * t - .20 * t * t;
                }
                else if ((l >= 410) && (l < 475))
                { 
                    t = (l - 410) / 65d;
                    r = .14 - .13 * t * t;
                }
                else if ((l >= 545) && (l < 595))
                {
                    t = (l - 545) / 50d;
                    r = 1.98 * t - t * t;
                }
                else if ((l >= 595) && (l < 650))
                {
                    t = (l - 595) / 55d;
                    r = .98 + .06 * t - .40 * t * t;
                }
                else if (l >= 650)
                {
                    t = (l - 650) / 50d;
                    r = .65 - .84 * t + .20 * t * t;
                }

                if (l >= 415 && l < 475)
                {
                    t = (l - 415) / 60d;
                    g = .8 * t * t;
                }
                else if (l >= 475 && l < 590)
                {
                    t = (l - 475) / 115d;
                    g = .8 + .76 * t - .8 * t * t;
                }
                else if (l >= 585 && l < 639.0)
                {
                    t = (l - 585) / 54d;
                    g = .84 * (1 - t);
                }

                if (l >= 400 && l < 475)
                {
                    t = (l - 400) / 75d;
                    b = 2.2 * t - 1.5 * t * t;
                }
                else if (l >= 475 && l < 560)
                {
                    t = (l - 475) / 85d;
                    b = .7 - t + .3 * t * t;
                }
            }

            return new HDRColor(r, g, b, α);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromSpectrum(Spectrum spectrum) => FromSpectrum(spectrum, 1);

        /// <inheritdoc/>
        public static HDRColor FromSpectrum(Spectrum spectrum, double α)
        {
            Vector4 color = Vector4.Zero;
            double total = 0;

            IEnumerable<(Wavelength w, double i)> intensities;

            if (spectrum is DiscreteSpectrum discrete)
                intensities = discrete.Intensities.FromDictionary();
            else
            {
                List<(Wavelength, double)> list = new();

                foreach (Wavelength wavelength in Wavelength.VisibleWavelengths)
                    list.Add((wavelength, spectrum.GetIntensity(wavelength)));

                intensities = list;
            }

            foreach ((Wavelength wavelength, double intensity) in intensities)
            {
                color += intensity * (Vector4)FromWavelength(in wavelength);
                total += intensity;
            }

            color /= total;

            return new HDRColor(color.X, color.Y, color.Z, α);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        /// <summary>
        /// Returns the RGBA color associated with the given black body temperature (in Kelvin).
        /// </summary>
        /// <param name="temperature">The black body temperature (in Kelvin).</param>
        /// <returns>RGBA color</returns>
        public static HDRColor FromBlackbodyRadiation(double temperature) => FromBlackbodyRadiation(temperature, 1);

        /// <summary>
        /// Returns the RGBA color associated with the given black body temperature (in Kelvin).
        /// </summary>
        /// <param name="temperature">The black body temperature (in Kelvin).</param>
        /// <returns>RGBA color</returns>
        public static HDRColor FromBlackbodyRadiation(double temperature, double α)
        {
            double x = temperature / 1000;
            double x2 = x * x;
            double x3 = x2 * x;
            double x4 = x3 * x;
            double x5 = x4 * x;
            double R, G, B;

            if (temperature <= 6600)
                R = 1;
            else
                R = .0002889 * x5 - .01258 * x4 + .2148 * x3 - 1.776 * x2 + 6.907 * x - 8.723;

            if (temperature <= 6600)
                G = -4.593e-5 * x5 + .001424 * x4 - .01489 * x3 + .0498 * x2 + .1669 * x - .1653;
            else
                G = -1.308e-7 * x5 + 1.745e-5 * x4 - .0009116 * x3 + .02348 * x2 - .3048 * x + 2.159;

            if (temperature <= 2000)
                B = 0;
            else if (temperature < 6600)
                B = 1.764e-5 * x5 + .0003575 * x4 - .01554 * x3 + .1549 * x2 - .3682 * x + .2386;
            else
                B = 1;

            return new HDRColor(R, G, B, α);
        }

        /// <inheritdoc/>
        public static HDRColor LinearInterpolate(HDRColor color1, HDRColor color2, double amount)
        {
            HDRColor res = default;

            res.R = color1.R * (1 - amount) + color2.R * amount;
            res.G = color1.G * (1 - amount) + color2.G * amount;
            res.B = color1.B * (1 - amount) + color2.B * amount;
            res.A = color1.A * (1 - amount) + color2.A * amount;

            return res;
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromARGB(int argb) => new HDRColor(argb);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor FromARGB(uint argb) => new HDRColor(argb);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor operator +(HDRColor color) => color;

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor operator -(HDRColor color) => new(-color.R, -color.G, -color.B, -color.A);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor operator +(HDRColor first, HDRColor second) => new(first.R + second.R, first.G + second.G, first.B + second.B, first.A + second.A);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor operator -(HDRColor first, HDRColor second) => new(first.R - second.R, first.G - second.G, first.B - second.B, first.A - second.A);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor operator *(double factor, HDRColor color) => color * factor;

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor operator *(HDRColor color, double factor) => new(color.R * factor, color.G * factor, color.B * factor, color.A * factor);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static HDRColor operator /(HDRColor color, double factor) => new(color.R / factor, color.G / factor, color.B / factor, color.A / factor);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator HDRColor(int argb) => FromARGB(argb);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator HDRColor(uint argb) => FromARGB(argb);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator (double r, double g, double b)(HDRColor color) => (color.R, color.G, color.B);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator (double r, double g, double b, double α)(HDRColor color) => (color.R, color.G, color.B, color.A);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator HDRColor((double r, double g, double b) color) => new HDRColor(color.r, color.g, color.b, 1);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator HDRColor((double r, double g, double b, double α) color) => new HDRColor(color.r, color.g, color.b, color.α);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Vector3(HDRColor color) => new Vector3(color.R, color.G, color.B);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Vector4(HDRColor color) => new Vector4(color.R, color.G, color.B, color.A);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator (Vector3 color, Scalar α)(HDRColor color) => ((color.R, color.G, color.B), color.A);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator (Vector3 color, double α)(HDRColor color) => ((color.R, color.G, color.B), color.A);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator HDRColor(Vector3 color) => new HDRColor(color.X, color.Y, color.Z, 1d);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator HDRColor(Vector4 color) => new HDRColor(color.X, color.Y, color.Z, color.W);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator HDRColor((Vector3 color, Scalar α) rgba) => new HDRColor(rgba.color.X, rgba.color.Y, rgba.color.Z, rgba.α);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator HDRColor((Vector3 color, double α) rgba) => new HDRColor(rgba.color.X, rgba.color.Y, rgba.color.Z, rgba.α);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator HDRColor(in Wavelength wavelength) => FromWavelength(in wavelength);


        /// <summary>
        /// Represents the HTML color 'Transparent' (#00ffffff).
        /// </summary>
        public static RGBAColor Transparent { get; } = 0x00ffffff;

        /// <summary>
        /// Represents the HTML color 'AliceBlue' (#fff0f8ff).
        /// </summary>
        public static RGBAColor AliceBlue { get; } = 0xfff0f8ff;

        /// <summary>
        /// Represents the HTML color 'AntiqueWhite' (#fffaebd7).
        /// </summary>
        public static RGBAColor AntiqueWhite { get; } = 0xfffaebd7;

        /// <summary>
        /// Represents the HTML color 'Aqua' (#ff00ffff).
        /// </summary>
        public static RGBAColor Aqua { get; } = 0xff00ffff;

        /// <summary>
        /// Represents the HTML color 'Aquamarine' (#ff7fffd4).
        /// </summary>
        public static RGBAColor Aquamarine { get; } = 0xff7fffd4;

        /// <summary>
        /// Represents the HTML color 'Azure' (#fff0ffff).
        /// </summary>
        public static RGBAColor Azure { get; } = 0xfff0ffff;

        /// <summary>
        /// Represents the HTML color 'Beige' (#fff5f5dc).
        /// </summary>
        public static RGBAColor Beige { get; } = 0xfff5f5dc;

        /// <summary>
        /// Represents the HTML color 'Bisque' (#ffffe4c4).
        /// </summary>
        public static RGBAColor Bisque { get; } = 0xffffe4c4;

        /// <summary>
        /// Represents the HTML color 'Black' (#ff000000).
        /// </summary>
        public static RGBAColor Black { get; } = 0xff000000;

        /// <summary>
        /// Represents the HTML color 'BlanchedAlmond' (#ffffebcd).
        /// </summary>
        public static RGBAColor BlanchedAlmond { get; } = 0xffffebcd;

        /// <summary>
        /// Represents the HTML color 'Blue' (#ff0000ff).
        /// </summary>
        public static RGBAColor Blue { get; } = 0xff0000ff;

        /// <summary>
        /// Represents the HTML color 'BlueViolet' (#ff8a2be2).
        /// </summary>
        public static RGBAColor BlueViolet { get; } = 0xff8a2be2;

        /// <summary>
        /// Represents the HTML color 'Brown' (#ffa52a2a).
        /// </summary>
        public static RGBAColor Brown { get; } = 0xffa52a2a;

        /// <summary>
        /// Represents the HTML color 'BurlyWood' (#ffdeb887).
        /// </summary>
        public static RGBAColor BurlyWood { get; } = 0xffdeb887;

        /// <summary>
        /// Represents the HTML color 'CadetBlue' (#ff5f9ea0).
        /// </summary>
        public static RGBAColor CadetBlue { get; } = 0xff5f9ea0;

        /// <summary>
        /// Represents the HTML color 'Chartreuse' (#ff7fff00).
        /// </summary>
        public static RGBAColor Chartreuse { get; } = 0xff7fff00;

        /// <summary>
        /// Represents the HTML color 'Chocolate' (#ffd2691e).
        /// </summary>
        public static RGBAColor Chocolate { get; } = 0xffd2691e;

        /// <summary>
        /// Represents the HTML color 'Coral' (#ffff7f50).
        /// </summary>
        public static RGBAColor Coral { get; } = 0xffff7f50;

        /// <summary>
        /// Represents the HTML color 'CornflowerBlue' (#ff6495ed).
        /// </summary>
        public static RGBAColor CornflowerBlue { get; } = 0xff6495ed;

        /// <summary>
        /// Represents the HTML color 'Cornsilk' (#fffff8dc).
        /// </summary>
        public static RGBAColor Cornsilk { get; } = 0xfffff8dc;

        /// <summary>
        /// Represents the HTML color 'Crimson' (#ffdc143c).
        /// </summary>
        public static RGBAColor Crimson { get; } = 0xffdc143c;

        /// <summary>
        /// Represents the HTML color 'Cyan' (#ff00ffff).
        /// </summary>
        public static RGBAColor Cyan { get; } = 0xff00ffff;

        /// <summary>
        /// Represents the HTML color 'DarkBlue' (#ff00008b).
        /// </summary>
        public static RGBAColor DarkBlue { get; } = 0xff00008b;

        /// <summary>
        /// Represents the HTML color 'DarkCyan' (#ff008b8b).
        /// </summary>
        public static RGBAColor DarkCyan { get; } = 0xff008b8b;

        /// <summary>
        /// Represents the HTML color 'DarkGoldenrod' (#ffb8860b).
        /// </summary>
        public static RGBAColor DarkGoldenrod { get; } = 0xffb8860b;

        /// <summary>
        /// Represents the HTML color 'DarkGray' (#ffa9a9a9).
        /// </summary>
        public static RGBAColor DarkGray { get; } = 0xffa9a9a9;

        /// <summary>
        /// Represents the HTML color 'DarkGreen' (#ff006400).
        /// </summary>
        public static RGBAColor DarkGreen { get; } = 0xff006400;

        /// <summary>
        /// Represents the HTML color 'DarkKhaki' (#ffbdb76b).
        /// </summary>
        public static RGBAColor DarkKhaki { get; } = 0xffbdb76b;

        /// <summary>
        /// Represents the HTML color 'DarkMagenta' (#ff8b008b).
        /// </summary>
        public static RGBAColor DarkMagenta { get; } = 0xff8b008b;

        /// <summary>
        /// Represents the HTML color 'DarkOliveGreen' (#ff556b2f).
        /// </summary>
        public static RGBAColor DarkOliveGreen { get; } = 0xff556b2f;

        /// <summary>
        /// Represents the HTML color 'DarkOrange' (#ffff8c00).
        /// </summary>
        public static RGBAColor DarkOrange { get; } = 0xffff8c00;

        /// <summary>
        /// Represents the HTML color 'DarkOrchid' (#ff9932cc).
        /// </summary>
        public static RGBAColor DarkOrchid { get; } = 0xff9932cc;

        /// <summary>
        /// Represents the HTML color 'DarkRed' (#ff8b0000).
        /// </summary>
        public static RGBAColor DarkRed { get; } = 0xff8b0000;

        /// <summary>
        /// Represents the HTML color 'DarkSalmon' (#ffe9967a).
        /// </summary>
        public static RGBAColor DarkSalmon { get; } = 0xffe9967a;

        /// <summary>
        /// Represents the HTML color 'DarkSeaGreen' (#ff8fbc8b).
        /// </summary>
        public static RGBAColor DarkSeaGreen { get; } = 0xff8fbc8b;

        /// <summary>
        /// Represents the HTML color 'DarkSlateBlue' (#ff483d8b).
        /// </summary>
        public static RGBAColor DarkSlateBlue { get; } = 0xff483d8b;

        /// <summary>
        /// Represents the HTML color 'DarkSlateGray' (#ff2f4f4f).
        /// </summary>
        public static RGBAColor DarkSlateGray { get; } = 0xff2f4f4f;

        /// <summary>
        /// Represents the HTML color 'DarkTurquoise' (#ff00ced1).
        /// </summary>
        public static RGBAColor DarkTurquoise { get; } = 0xff00ced1;

        /// <summary>
        /// Represents the HTML color 'DarkViolet' (#ff9400d3).
        /// </summary>
        public static RGBAColor DarkViolet { get; } = 0xff9400d3;

        /// <summary>
        /// Represents the HTML color 'DeepPink' (#ffff1493).
        /// </summary>
        public static RGBAColor DeepPink { get; } = 0xffff1493;

        /// <summary>
        /// Represents the HTML color 'DeepSkyBlue' (#ff00bfff).
        /// </summary>
        public static RGBAColor DeepSkyBlue { get; } = 0xff00bfff;

        /// <summary>
        /// Represents the HTML color 'DimGray' (#ff696969).
        /// </summary>
        public static RGBAColor DimGray { get; } = 0xff696969;

        /// <summary>
        /// Represents the HTML color 'DodgerBlue' (#ff1e90ff).
        /// </summary>
        public static RGBAColor DodgerBlue { get; } = 0xff1e90ff;

        /// <summary>
        /// Represents the HTML color 'Firebrick' (#ffb22222).
        /// </summary>
        public static RGBAColor Firebrick { get; } = 0xffb22222;

        /// <summary>
        /// Represents the HTML color 'FloralWhite' (#fffffaf0).
        /// </summary>
        public static RGBAColor FloralWhite { get; } = 0xfffffaf0;

        /// <summary>
        /// Represents the HTML color 'ForestGreen' (#ff228b22).
        /// </summary>
        public static RGBAColor ForestGreen { get; } = 0xff228b22;

        /// <summary>
        /// Represents the HTML color 'Fuchsia' (#ffff00ff).
        /// </summary>
        public static RGBAColor Fuchsia { get; } = 0xffff00ff;

        /// <summary>
        /// Represents the HTML color 'Gainsboro' (#ffdcdcdc).
        /// </summary>
        public static RGBAColor Gainsboro { get; } = 0xffdcdcdc;

        /// <summary>
        /// Represents the HTML color 'GhostWhite' (#fff8f8ff).
        /// </summary>
        public static RGBAColor GhostWhite { get; } = 0xfff8f8ff;

        /// <summary>
        /// Represents the HTML color 'Gold' (#ffffd700).
        /// </summary>
        public static RGBAColor Gold { get; } = 0xffffd700;

        /// <summary>
        /// Represents the HTML color 'Goldenrod' (#ffdaa520).
        /// </summary>
        public static RGBAColor Goldenrod { get; } = 0xffdaa520;

        /// <summary>
        /// Represents the HTML color 'Gray' (#ff808080).
        /// </summary>
        public static RGBAColor Gray { get; } = 0xff808080;

        /// <summary>
        /// Represents the HTML color 'Green' (#ff008000).
        /// </summary>
        public static RGBAColor Green { get; } = 0xff008000;

        /// <summary>
        /// Represents the HTML color 'GreenYellow' (#ffadff2f).
        /// </summary>
        public static RGBAColor GreenYellow { get; } = 0xffadff2f;

        /// <summary>
        /// Represents the HTML color 'Honeydew' (#fff0fff0).
        /// </summary>
        public static RGBAColor Honeydew { get; } = 0xfff0fff0;

        /// <summary>
        /// Represents the HTML color 'HotPink' (#ffff69b4).
        /// </summary>
        public static RGBAColor HotPink { get; } = 0xffff69b4;

        /// <summary>
        /// Represents the HTML color 'IndianRed' (#ffcd5c5c).
        /// </summary>
        public static RGBAColor IndianRed { get; } = 0xffcd5c5c;

        /// <summary>
        /// Represents the HTML color 'Indigo' (#ff4b0082).
        /// </summary>
        public static RGBAColor Indigo { get; } = 0xff4b0082;

        /// <summary>
        /// Represents the HTML color 'Ivory' (#fffffff0).
        /// </summary>
        public static RGBAColor Ivory { get; } = 0xfffffff0;

        /// <summary>
        /// Represents the HTML color 'Khaki' (#fff0e68c).
        /// </summary>
        public static RGBAColor Khaki { get; } = 0xfff0e68c;

        /// <summary>
        /// Represents the HTML color 'Lavender' (#ffe6e6fa).
        /// </summary>
        public static RGBAColor Lavender { get; } = 0xffe6e6fa;

        /// <summary>
        /// Represents the HTML color 'LavenderBlush' (#fffff0f5).
        /// </summary>
        public static RGBAColor LavenderBlush { get; } = 0xfffff0f5;

        /// <summary>
        /// Represents the HTML color 'LawnGreen' (#ff7cfc00).
        /// </summary>
        public static RGBAColor LawnGreen { get; } = 0xff7cfc00;

        /// <summary>
        /// Represents the HTML color 'LemonChiffon' (#fffffacd).
        /// </summary>
        public static RGBAColor LemonChiffon { get; } = 0xfffffacd;

        /// <summary>
        /// Represents the HTML color 'LightBlue' (#ffadd8e6).
        /// </summary>
        public static RGBAColor LightBlue { get; } = 0xffadd8e6;

        /// <summary>
        /// Represents the HTML color 'LightCoral' (#fff08080).
        /// </summary>
        public static RGBAColor LightCoral { get; } = 0xfff08080;

        /// <summary>
        /// Represents the HTML color 'LightCyan' (#ffe0ffff).
        /// </summary>
        public static RGBAColor LightCyan { get; } = 0xffe0ffff;

        /// <summary>
        /// Represents the HTML color 'LightGoldenrodYellow' (#fffafad2).
        /// </summary>
        public static RGBAColor LightGoldenrodYellow { get; } = 0xfffafad2;

        /// <summary>
        /// Represents the HTML color 'LightGreen' (#ff90ee90).
        /// </summary>
        public static RGBAColor LightGreen { get; } = 0xff90ee90;

        /// <summary>
        /// Represents the HTML color 'LightGray' (#ffd3d3d3).
        /// </summary>
        public static RGBAColor LightGray { get; } = 0xffd3d3d3;

        /// <summary>
        /// Represents the HTML color 'LightPink' (#ffffb6c1).
        /// </summary>
        public static RGBAColor LightPink { get; } = 0xffffb6c1;

        /// <summary>
        /// Represents the HTML color 'LightSalmon' (#ffffa07a).
        /// </summary>
        public static RGBAColor LightSalmon { get; } = 0xffffa07a;

        /// <summary>
        /// Represents the HTML color 'LightSeaGreen' (#ff20b2aa).
        /// </summary>
        public static RGBAColor LightSeaGreen { get; } = 0xff20b2aa;

        /// <summary>
        /// Represents the HTML color 'LightSkyBlue' (#ff87cefa).
        /// </summary>
        public static RGBAColor LightSkyBlue { get; } = 0xff87cefa;

        /// <summary>
        /// Represents the HTML color 'LightSlateGray' (#ff778899).
        /// </summary>
        public static RGBAColor LightSlateGray { get; } = 0xff778899;

        /// <summary>
        /// Represents the HTML color 'LightSteelBlue' (#ffb0c4de).
        /// </summary>
        public static RGBAColor LightSteelBlue { get; } = 0xffb0c4de;

        /// <summary>
        /// Represents the HTML color 'LightYellow' (#ffffffe0).
        /// </summary>
        public static RGBAColor LightYellow { get; } = 0xffffffe0;

        /// <summary>
        /// Represents the HTML color 'Lime' (#ff00ff00).
        /// </summary>
        public static RGBAColor Lime { get; } = 0xff00ff00;

        /// <summary>
        /// Represents the HTML color 'LimeGreen' (#ff32cd32).
        /// </summary>
        public static RGBAColor LimeGreen { get; } = 0xff32cd32;

        /// <summary>
        /// Represents the HTML color 'Linen' (#fffaf0e6).
        /// </summary>
        public static RGBAColor Linen { get; } = 0xfffaf0e6;

        /// <summary>
        /// Represents the HTML color 'Magenta' (#ffff00ff).
        /// </summary>
        public static RGBAColor Magenta { get; } = 0xffff00ff;

        /// <summary>
        /// Represents the HTML color 'Maroon' (#ff800000).
        /// </summary>
        public static RGBAColor Maroon { get; } = 0xff800000;

        /// <summary>
        /// Represents the HTML color 'MediumAquamarine' (#ff66cdaa).
        /// </summary>
        public static RGBAColor MediumAquamarine { get; } = 0xff66cdaa;

        /// <summary>
        /// Represents the HTML color 'MediumBlue' (#ff0000cd).
        /// </summary>
        public static RGBAColor MediumBlue { get; } = 0xff0000cd;

        /// <summary>
        /// Represents the HTML color 'MediumOrchid' (#ffba55d3).
        /// </summary>
        public static RGBAColor MediumOrchid { get; } = 0xffba55d3;

        /// <summary>
        /// Represents the HTML color 'MediumPurple' (#ff9370db).
        /// </summary>
        public static RGBAColor MediumPurple { get; } = 0xff9370db;

        /// <summary>
        /// Represents the HTML color 'MediumSeaGreen' (#ff3cb371).
        /// </summary>
        public static RGBAColor MediumSeaGreen { get; } = 0xff3cb371;

        /// <summary>
        /// Represents the HTML color 'MediumSlateBlue' (#ff7b68ee).
        /// </summary>
        public static RGBAColor MediumSlateBlue { get; } = 0xff7b68ee;

        /// <summary>
        /// Represents the HTML color 'MediumSpringGreen' (#ff00fa9a).
        /// </summary>
        public static RGBAColor MediumSpringGreen { get; } = 0xff00fa9a;

        /// <summary>
        /// Represents the HTML color 'MediumTurquoise' (#ff48d1cc).
        /// </summary>
        public static RGBAColor MediumTurquoise { get; } = 0xff48d1cc;

        /// <summary>
        /// Represents the HTML color 'MediumVioletRed' (#ffc71585).
        /// </summary>
        public static RGBAColor MediumVioletRed { get; } = 0xffc71585;

        /// <summary>
        /// Represents the HTML color 'MidnightBlue' (#ff191970).
        /// </summary>
        public static RGBAColor MidnightBlue { get; } = 0xff191970;

        /// <summary>
        /// Represents the HTML color 'MintCream' (#fff5fffa).
        /// </summary>
        public static RGBAColor MintCream { get; } = 0xfff5fffa;

        /// <summary>
        /// Represents the HTML color 'MistyRose' (#ffffe4e1).
        /// </summary>
        public static RGBAColor MistyRose { get; } = 0xffffe4e1;

        /// <summary>
        /// Represents the HTML color 'Moccasin' (#ffffe4b5).
        /// </summary>
        public static RGBAColor Moccasin { get; } = 0xffffe4b5;

        /// <summary>
        /// Represents the HTML color 'NavajoWhite' (#ffffdead).
        /// </summary>
        public static RGBAColor NavajoWhite { get; } = 0xffffdead;

        /// <summary>
        /// Represents the HTML color 'Navy' (#ff000080).
        /// </summary>
        public static RGBAColor Navy { get; } = 0xff000080;

        /// <summary>
        /// Represents the HTML color 'OldLace' (#fffdf5e6).
        /// </summary>
        public static RGBAColor OldLace { get; } = 0xfffdf5e6;

        /// <summary>
        /// Represents the HTML color 'Olive' (#ff808000).
        /// </summary>
        public static RGBAColor Olive { get; } = 0xff808000;

        /// <summary>
        /// Represents the HTML color 'OliveDrab' (#ff6b8e23).
        /// </summary>
        public static RGBAColor OliveDrab { get; } = 0xff6b8e23;

        /// <summary>
        /// Represents the HTML color 'Orange' (#ffffa500).
        /// </summary>
        public static RGBAColor Orange { get; } = 0xffffa500;

        /// <summary>
        /// Represents the HTML color 'OrangeRed' (#ffff4500).
        /// </summary>
        public static RGBAColor OrangeRed { get; } = 0xffff4500;

        /// <summary>
        /// Represents the HTML color 'Orchid' (#ffda70d6).
        /// </summary>
        public static RGBAColor Orchid { get; } = 0xffda70d6;

        /// <summary>
        /// Represents the HTML color 'PaleGoldenrod' (#ffeee8aa).
        /// </summary>
        public static RGBAColor PaleGoldenrod { get; } = 0xffeee8aa;

        /// <summary>
        /// Represents the HTML color 'PaleGreen' (#ff98fb98).
        /// </summary>
        public static RGBAColor PaleGreen { get; } = 0xff98fb98;

        /// <summary>
        /// Represents the HTML color 'PaleTurquoise' (#ffafeeee).
        /// </summary>
        public static RGBAColor PaleTurquoise { get; } = 0xffafeeee;

        /// <summary>
        /// Represents the HTML color 'PaleVioletRed' (#ffdb7093).
        /// </summary>
        public static RGBAColor PaleVioletRed { get; } = 0xffdb7093;

        /// <summary>
        /// Represents the HTML color 'PapayaWhip' (#ffffefd5).
        /// </summary>
        public static RGBAColor PapayaWhip { get; } = 0xffffefd5;

        /// <summary>
        /// Represents the HTML color 'PeachPuff' (#ffffdab9).
        /// </summary>
        public static RGBAColor PeachPuff { get; } = 0xffffdab9;

        /// <summary>
        /// Represents the HTML color 'Peru' (#ffcd853f).
        /// </summary>
        public static RGBAColor Peru { get; } = 0xffcd853f;

        /// <summary>
        /// Represents the HTML color 'Pink' (#ffffc0cb).
        /// </summary>
        public static RGBAColor Pink { get; } = 0xffffc0cb;

        /// <summary>
        /// Represents the HTML color 'Plum' (#ffdda0dd).
        /// </summary>
        public static RGBAColor Plum { get; } = 0xffdda0dd;

        /// <summary>
        /// Represents the HTML color 'PowderBlue' (#ffb0e0e6).
        /// </summary>
        public static RGBAColor PowderBlue { get; } = 0xffb0e0e6;

        /// <summary>
        /// Represents the HTML color 'Purple' (#ff800080).
        /// </summary>
        public static RGBAColor Purple { get; } = 0xff800080;

        /// <summary>
        /// Represents the HTML color 'Red' (#ffff0000).
        /// </summary>
        public static RGBAColor Red { get; } = 0xffff0000;

        /// <summary>
        /// Represents the HTML color 'RosyBrown' (#ffbc8f8f).
        /// </summary>
        public static RGBAColor RosyBrown { get; } = 0xffbc8f8f;

        /// <summary>
        /// Represents the HTML color 'RoyalBlue' (#ff4169e1).
        /// </summary>
        public static RGBAColor RoyalBlue { get; } = 0xff4169e1;

        /// <summary>
        /// Represents the HTML color 'SaddleBrown' (#ff8b4513).
        /// </summary>
        public static RGBAColor SaddleBrown { get; } = 0xff8b4513;

        /// <summary>
        /// Represents the HTML color 'Salmon' (#fffa8072).
        /// </summary>
        public static RGBAColor Salmon { get; } = 0xfffa8072;

        /// <summary>
        /// Represents the HTML color 'SandyBrown' (#fff4a460).
        /// </summary>
        public static RGBAColor SandyBrown { get; } = 0xfff4a460;

        /// <summary>
        /// Represents the HTML color 'SeaGreen' (#ff2e8b57).
        /// </summary>
        public static RGBAColor SeaGreen { get; } = 0xff2e8b57;

        /// <summary>
        /// Represents the HTML color 'SeaShell' (#fffff5ee).
        /// </summary>
        public static RGBAColor SeaShell { get; } = 0xfffff5ee;

        /// <summary>
        /// Represents the HTML color 'Sienna' (#ffa0522d).
        /// </summary>
        public static RGBAColor Sienna { get; } = 0xffa0522d;

        /// <summary>
        /// Represents the HTML color 'Silver' (#ffc0c0c0).
        /// </summary>
        public static RGBAColor Silver { get; } = 0xffc0c0c0;

        /// <summary>
        /// Represents the HTML color 'SkyBlue' (#ff87ceeb).
        /// </summary>
        public static RGBAColor SkyBlue { get; } = 0xff87ceeb;

        /// <summary>
        /// Represents the HTML color 'SlateBlue' (#ff6a5acd).
        /// </summary>
        public static RGBAColor SlateBlue { get; } = 0xff6a5acd;

        /// <summary>
        /// Represents the HTML color 'SlateGray' (#ff708090).
        /// </summary>
        public static RGBAColor SlateGray { get; } = 0xff708090;

        /// <summary>
        /// Represents the HTML color 'Snow' (#fffffafa).
        /// </summary>
        public static RGBAColor Snow { get; } = 0xfffffafa;

        /// <summary>
        /// Represents the HTML color 'SpringGreen' (#ff00ff7f).
        /// </summary>
        public static RGBAColor SpringGreen { get; } = 0xff00ff7f;

        /// <summary>
        /// Represents the HTML color 'SteelBlue' (#ff4682b4).
        /// </summary>
        public static RGBAColor SteelBlue { get; } = 0xff4682b4;

        /// <summary>
        /// Represents the HTML color 'Tan' (#ffd2b48c).
        /// </summary>
        public static RGBAColor Tan { get; } = 0xffd2b48c;

        /// <summary>
        /// Represents the HTML color 'Teal' (#ff008080).
        /// </summary>
        public static RGBAColor Teal { get; } = 0xff008080;

        /// <summary>
        /// Represents the HTML color 'Thistle' (#ffd8bfd8).
        /// </summary>
        public static RGBAColor Thistle { get; } = 0xffd8bfd8;

        /// <summary>
        /// Represents the HTML color 'Tomato' (#ffff6347).
        /// </summary>
        public static RGBAColor Tomato { get; } = 0xffff6347;

        /// <summary>
        /// Represents the HTML color 'Turquoise' (#ff40e0d0).
        /// </summary>
        public static RGBAColor Turquoise { get; } = 0xff40e0d0;

        /// <summary>
        /// Represents the HTML color 'Violet' (#ffee82ee).
        /// </summary>
        public static RGBAColor Violet { get; } = 0xffee82ee;

        /// <summary>
        /// Represents the HTML color 'Wheat' (#fff5deb3).
        /// </summary>
        public static RGBAColor Wheat { get; } = 0xfff5deb3;

        /// <summary>
        /// Represents the HTML color 'White' (#ffffffff).
        /// </summary>
        public static RGBAColor White { get; } = 0xffffffff;

        /// <summary>
        /// Represents the HTML color 'WhiteSmoke' (#fff5f5f5).
        /// </summary>
        public static RGBAColor WhiteSmoke { get; } = 0xfff5f5f5;

        /// <summary>
        /// Represents the HTML color 'Yellow' (#ffffff00).
        /// </summary>
        public static RGBAColor Yellow { get; } = 0xffffff00;

        /// <summary>
        /// Represents the HTML color 'YellowGreen' (#ff9acd32).
        /// </summary>
        public static RGBAColor YellowGreen { get; } = 0xff9acd32;

        /// <summary>
        /// Represents the HTML color 'Pantone2000' (#FF9BB7D4).
        /// </summary>
        public static RGBAColor Pantone2000 { get; } = 0xFF9BB7D4;

        /// <summary>
        /// Represents the HTML color 'Pantone_15_4020' (#FF9BB7D4).
        /// </summary>
        public static RGBAColor Pantone_15_4020 { get; } = 0xFF9BB7D4;

        /// <summary>
        /// Represents the HTML color 'Pantone2001' (#FFC74375).
        /// </summary>
        public static RGBAColor Pantone2001 { get; } = 0xFFC74375;

        /// <summary>
        /// Represents the HTML color 'Pantone_17_203' (#FFC74375).
        /// </summary>
        public static RGBAColor Pantone_17_203 { get; } = 0xFFC74375;

        /// <summary>
        /// Represents the HTML color 'Pantone2002' (#FFBF1932).
        /// </summary>
        public static RGBAColor Pantone2002 { get; } = 0xFFBF1932;

        /// <summary>
        /// Represents the HTML color 'Pantone_19_166' (#FFBF1932).
        /// </summary>
        public static RGBAColor Pantone_19_166 { get; } = 0xFFBF1932;

        /// <summary>
        /// Represents the HTML color 'Pantone2003' (#FF7BC4C4).
        /// </summary>
        public static RGBAColor Pantone2003 { get; } = 0xFF7BC4C4;

        /// <summary>
        /// Represents the HTML color 'Pantone_14_481' (#FF7BC4C4).
        /// </summary>
        public static RGBAColor Pantone_14_481 { get; } = 0xFF7BC4C4;

        /// <summary>
        /// Represents the HTML color 'Pantone2004' (#FFE2583E).
        /// </summary>
        public static RGBAColor Pantone2004 { get; } = 0xFFE2583E;

        /// <summary>
        /// Represents the HTML color 'Pantone_17_145' (#FFE2583E).
        /// </summary>
        public static RGBAColor Pantone_17_145 { get; } = 0xFFE2583E;

        /// <summary>
        /// Represents the HTML color 'Pantone2005' (#FF53B0AE).
        /// </summary>
        public static RGBAColor Pantone2005 { get; } = 0xFF53B0AE;

        /// <summary>
        /// Represents the HTML color 'Pantone_15_5217' (#FF53B0AE).
        /// </summary>
        public static RGBAColor Pantone_15_5217 { get; } = 0xFF53B0AE;

        /// <summary>
        /// Represents the HTML color 'Pantone2006' (#FFDECDBE).
        /// </summary>
        public static RGBAColor Pantone2006 { get; } = 0xFFDECDBE;

        /// <summary>
        /// Represents the HTML color 'Pantone_13_1106' (#FFDECDBE).
        /// </summary>
        public static RGBAColor Pantone_13_1106 { get; } = 0xFFDECDBE;

        /// <summary>
        /// Represents the HTML color 'Pantone2007' (#FF9B1B30).
        /// </summary>
        public static RGBAColor Pantone2007 { get; } = 0xFF9B1B30;

        /// <summary>
        /// Represents the HTML color 'Pantone_19_1557' (#FF9B1B30).
        /// </summary>
        public static RGBAColor Pantone_19_1557 { get; } = 0xFF9B1B30;

        /// <summary>
        /// Represents the HTML color 'Pantone2008' (#FF5A5B9F).
        /// </summary>
        public static RGBAColor Pantone2008 { get; } = 0xFF5A5B9F;

        /// <summary>
        /// Represents the HTML color 'Pantone_18_3943' (#FF5A5B9F).
        /// </summary>
        public static RGBAColor Pantone_18_3943 { get; } = 0xFF5A5B9F;

        /// <summary>
        /// Represents the HTML color 'Pantone2009' (#FFF0C05A).
        /// </summary>
        public static RGBAColor Pantone2009 { get; } = 0xFFF0C05A;

        /// <summary>
        /// Represents the HTML color 'Pantone_14_848' (#FFF0C05A).
        /// </summary>
        public static RGBAColor Pantone_14_848 { get; } = 0xFFF0C05A;

        /// <summary>
        /// Represents the HTML color 'Pantone2010' (#FF45B5AA).
        /// </summary>
        public static RGBAColor Pantone2010 { get; } = 0xFF45B5AA;

        /// <summary>
        /// Represents the HTML color 'Pantone_15_5519' (#FF45B5AA).
        /// </summary>
        public static RGBAColor Pantone_15_5519 { get; } = 0xFF45B5AA;

        /// <summary>
        /// Represents the HTML color 'Pantone2011' (#FFD94F70).
        /// </summary>
        public static RGBAColor Pantone2011 { get; } = 0xFFD94F70;

        /// <summary>
        /// Represents the HTML color 'Pantone_18_2120' (#FFD94F70).
        /// </summary>
        public static RGBAColor Pantone_18_2120 { get; } = 0xFFD94F70;

        /// <summary>
        /// Represents the HTML color 'Pantone2012' (#FFDD4124).
        /// </summary>
        public static RGBAColor Pantone2012 { get; } = 0xFFDD4124;

        /// <summary>
        /// Represents the HTML color 'Pantone_17_1463' (#FFDD4124).
        /// </summary>
        public static RGBAColor Pantone_17_1463 { get; } = 0xFFDD4124;

        /// <summary>
        /// Represents the HTML color 'Pantone2013' (#FF009473).
        /// </summary>
        public static RGBAColor Pantone2013 { get; } = 0xFF009473;

        /// <summary>
        /// Represents the HTML color 'Pantone_17_5641' (#FF009473).
        /// </summary>
        public static RGBAColor Pantone_17_5641 { get; } = 0xFF009473;

        /// <summary>
        /// Represents the HTML color 'Pantone2014' (#FFB163A3).
        /// </summary>
        public static RGBAColor Pantone2014 { get; } = 0xFFB163A3;

        /// <summary>
        /// Represents the HTML color 'Pantone_18_3224' (#FFB163A3).
        /// </summary>
        public static RGBAColor Pantone_18_3224 { get; } = 0xFFB163A3;

        /// <summary>
        /// Represents the HTML color 'Pantone2015' (#FF955251).
        /// </summary>
        public static RGBAColor Pantone2015 { get; } = 0xFF955251;

        /// <summary>
        /// Represents the HTML color 'Pantone_18_1438' (#FF955251).
        /// </summary>
        public static RGBAColor Pantone_18_1438 { get; } = 0xFF955251;

        /// <summary>
        /// Represents the HTML color 'Pantone2016' (#FFF7CAC9).
        /// </summary>
        public static RGBAColor Pantone2016 { get; } = 0xFFF7CAC9;

        /// <summary>
        /// Represents the HTML color 'Pantone_13_1520' (#FFF7CAC9).
        /// </summary>
        public static RGBAColor Pantone_13_1520 { get; } = 0xFFF7CAC9;

        /// <summary>
        /// Represents the HTML color 'Pantone2017' (#FF88B04B).
        /// </summary>
        public static RGBAColor Pantone2017 { get; } = 0xFF88B04B;

        /// <summary>
        /// Represents the HTML color 'Pantone_15_343' (#FF88B04B).
        /// </summary>
        public static RGBAColor Pantone_15_343 { get; } = 0xFF88B04B;

        /// <summary>
        /// Represents the HTML color 'Pantone2018' (#FF5F4B8B).
        /// </summary>
        public static RGBAColor Pantone2018 { get; } = 0xFF5F4B8B;

        /// <summary>
        /// Represents the HTML color 'Pantone_18_3838' (#FF5F4B8B).
        /// </summary>
        public static RGBAColor Pantone_18_3838 { get; } = 0xFF5F4B8B;

        /// <summary>
        /// Represents the HTML color 'Pantone2019' (#FFFF6F61).
        /// </summary>
        public static RGBAColor Pantone2019 { get; } = 0xFFFF6F61;

        /// <summary>
        /// Represents the HTML color 'Pantone_16_1546' (#FFFF6F61).
        /// </summary>
        public static RGBAColor Pantone_16_1546 { get; } = 0xFFFF6F61;

        /// <summary>
        /// Represents the HTML color 'Pantone2020' (#FF0F4C81).
        /// </summary>
        public static RGBAColor Pantone2020 { get; } = 0xFF0F4C81;

        /// <summary>
        /// Represents the HTML color 'Pantone_19_4052' (#FF0F4C81).
        /// </summary>
        public static RGBAColor Pantone_19_4052 { get; } = 0xFF0F4C81;

        /// <summary>
        /// Represents the HTML color 'Pantone2021' (#FF939597).
        /// </summary>
        public static RGBAColor Pantone2021 { get; } = 0xFF939597;

        /// <summary>
        /// Represents the HTML color 'Pantone_17_5104' (#FF939597).
        /// </summary>
        public static RGBAColor Pantone_17_5104 { get; } = 0xFF939597;

        /// <summary>
        /// Represents the HTML color 'Pantone_15_3919' (#FF92A8D1).
        /// </summary>
        public static RGBAColor Pantone_15_3919 { get; } = 0xFF92A8D1;

        /// <summary>
        /// Represents the HTML color 'Pantone_13_0647' (#FFF5DF4D).
        /// </summary>
        public static RGBAColor Pantone_13_0647 { get; } = 0xFFF5DF4D;
    }

    public unsafe partial struct RGBAColor
    {
        /// <inheritdoc/>
        public readonly double Average => (Rf + Gf + Bf) / 3;

        /// <inheritdoc/>
        public readonly double CIEGray => (.299 * Rf) + (.587 * Gf) + (.114 * Bf);

        /// <inheritdoc/>
        public readonly (double L, double a, double b) CIELAB94 => ToCIELAB94();

        /// <inheritdoc/>
        public (double Hue, double Saturation, double Luminosity) HSL
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            readonly get => ToHSL();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                RGBAColor color = FromHSL(value.Hue, value.Saturation, value.Luminosity);
                (Rf, Gf, Bf) = (color.Rf, color.Gf, color.Bf);
            }
        }

        /// <inheritdoc/>
        public (double Hue, double Saturation, double Value) HSV
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            readonly get => ToHSV();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                RGBAColor color = FromHSV(value.Hue, value.Saturation, value.Value);
                (Rf, Gf, Bf) = (color.Rf, color.Gf, color.Bf);
            }
        }

        /// <inheritdoc/>
        public (double C, double M, double Y, double K) CMYK
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            readonly get => ToCMYK();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                RGBAColor color = FromCMYK(value.C, value.M, value.Y, value.K);
                (Rf, Gf, Bf) = (color.Rf, color.Gf, color.Bf);
            }
        }

        /// <inheritdoc/>
        public (double Y, double U, double V) YUV
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            readonly get => ToYUV();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                RGBAColor color = FromYUV(value.Y, value.U, value.V);
                (Rf, Gf, Bf) = (color.Rf, color.Gf, color.Bf);
            }
        }

        /// <inheritdoc/>
        public readonly (RGBAColor @this, RGBAColor Triadic1, RGBAColor Triadic2) Triadic
        {
            get
            {
                (double h, double s, double l) = ToHSL();

                return (
                    this,
                    FromHSL(h + Math.PI * 2 / 3, s, l, Af),
                    FromHSL(h + Math.PI * 4 / 3, s, l, Af)
                );
            }
        }

        /// <inheritdoc/>
        public readonly RGBAColor[] Analogous
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                RGBAColor copy = this;

                return Enumerable.Range(-3, 7).Select(i => copy.Rotate(i * Math.PI / 6)).ToArray();
            }
        }

        /// <inheritdoc/>
        public readonly RGBAColor[] Neutrals
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                RGBAColor copy = this;

                return Enumerable.Range(-3, 7).Select(i => copy.Rotate(i * Math.PI / 12)).ToArray();
            }
        }

        /// <inheritdoc/>
        public readonly RGBAColor Normalized
        {
            get
            {
                RGBAColor copy = this;
                double max = Math.Max(copy.Rf, Math.Max(copy.Gf, copy.Bf));

                if (max > 0)
                {
                    copy.Rf /= max;
                    copy.Gf /= max;
                    copy.Bf /= max;
                }

                return copy;
            }
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RGBAColor(uint argb)
            : this((int)argb)
        {
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RGBAColor(double r, double g, double b)
            : this(r, g, b, 1)
        {
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RGBAColor(RGBAColor color)
            : this(color, color.Af)
        {
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RGBAColor(RGBAColor color, double α)
            : this(color.Rf, color.Gf, color.Bf, α)
        {
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RGBAColor(RGBAColor* ptr)
            : this(*ptr)
        {
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RGBAColor(RGBAColor** ptr)
            : this(**ptr)
        {
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RGBAColor(double r, double g, double b, double α)
            : this()
        {
            Af = α;
            Rf = r;
            Gf = g;
            Bf = b;
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RGBAColor(int argb) : this() => ARGB = argb;

        /// <inheritdoc/>
        public readonly RGBAColor Rotate(Scalar φ)
        {
            φ += Scalar.Tau;
            φ %= Scalar.Tau;

            if (φ.IsZero)
                return this;
            else if (φ.Is(Scalar.Pi))
                return Complement;

            (double h, double s, double l) = ToHSL();

            return FromHSL(h + φ, s, l, Af);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly RGBAColor[] GetNeutrals(Scalar φ_step, int count)
        {
            RGBAColor copy = this;

            return Enumerable.Range(-count / 2, count).Select(i => copy.Rotate(i * φ_step)).ToArray();
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly RGBAColor CorrectGamma(Scalar gamma) => new RGBAColor(
            Math.Pow(Rf, 1 / gamma),
            Math.Pow(Gf, 1 / gamma),
            Math.Pow(Bf, 1 / gamma),
            Af
        );

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly Scalar EucledianDistanceTo(RGBAColor other) => ((Vector4)this).DistanceTo(other);

        /// <inheritdoc/>
        public Scalar CIALAB94DistanceTo(IColor other)
        {
            (double L1, double a1, double b1) = ToCIELAB94();
            (double L2, double a2, double b2) = other.ToCIELAB94();

            double δL = L1 - L2;
            double δa = a1 - a2;
            double δb = b1 - b2;

            double c1 = Math.Sqrt(a1 * a1 + b1 *b1);
            double c2 = Math.Sqrt(a2 * a2 + b2 * b2);
            double δC = c1 - c2;
            double δH = δa * δa + δb * δb - δC * δC;

            δH = δH < 0 ? 0 : Math.Sqrt(δH);

            double sc = 1 + .045 * c1;
            double sh = 1 + .015 * c1;

            double δCkcsc = δC / sc;
            double δHkhsh = δH / sh;

            double i = δL * δL + δCkcsc * δCkcsc + δHkhsh * δHkhsh;

            return i < 0 ? 0 : Math.Sqrt(i);
        }

        /// <inheritdoc/>
        public readonly (double H, double S, double L) ToHSL()
        {
            double a = Math.Min(Math.Min(Rf, Gf), Bf);
            double b = Math.Max(Math.Max(Rf, Gf), Bf);
            double δ = b - a;
            double l = (b + a) / 2;
            double h, s;

            if (δ < 1e-5)
                s = h = 0;
            else
            {
                s = δ / (l < .5 ? b + a : 2 - b - a);

                double δr = (b - Rf) / δ;
                double δg = (b - Gf) / δ;
                double δb = (b - Bf) / δ;

                h = Rf == b ? δb - δg :
                    Gf == b ? 2 + δr - δb :
                              4 + δg - δr;

                h *= 60;

                if (h < 0)
                    h += 360;

                h *= Math.PI / 180;
            }

            return (h, s, l);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly (double H, double S, double V) ToHSV()
        {
            (double H, double S, double L) = ToHSL();
            double V = S * Math.Min(L, 1 - L) + L;

            return (H, V > 0 ? 2 - 2 * L / V : 0, V);
        }

        /// <inheritdoc/>
        public readonly (double L, double a, double b) ToCIELAB94()
        {
            static double pre(double channel) => channel > .04045 ? Math.Pow((channel + .055) / 1.055, 2.4) : channel / 12.92;
            static double post(double channel) => channel > .008856 ? Math.Pow(channel, 1 / 3) : (7.787 * channel) + 16 / 116;

            double rf = pre(Rf);
            double gf = pre(Gf);
            double bf = pre(Bf);
            double x = (rf * .4124 + gf * .3576 + bf * .1805) /  .95047;
            double y = (rf * .2126 + gf * .7152 + bf * .0722) / 1.00000;
            double z = (rf * .0193 + gf * .1192 + bf * .9505) / 1.08883;

            x = post(x);
            y = post(y);
            z = post(z);

            return (
                L: (116 * y) - 16,
                a: 500 * (x - y),
                b: 200 * (y - z)
            );
        }

        /// <inheritdoc/>
        public readonly (double C, double M, double Y, double K) ToCMYK()
        {
            double K = 1 - Math.Max(Math.Max(Rf, Gf), Bf);

            return (
                (1 - Rf - K) / (1 - K),
                (1 - Gf - K) / (1 - K),
                (1 - Bf - K) / (1 - K),
                K
            );
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly DiscreteSpectrum ToSpectrum()
        {
            RGBAColor color = this;
            Dictionary<Wavelength, double> intensities = Wavelength.VisibleWavelengths.ToDictionary(LINQ.id, w => color.GetIntensity(w, 0));

            return new DiscreteSpectrum(intensities);
        }

        /// <inheritdoc/>
        public readonly double GetIntensity(Wavelength wavelength, double tolerance = 1e-1)
        {
            (Wavelength lo, Wavelength hi) = (wavelength.InNanometers + tolerance, wavelength.InNanometers - tolerance);
            double dist_mid = wavelength.ToColor().CIALAB94DistanceTo(this);

            if (tolerance < Scalar.ComputationalEpsilon)
                return dist_mid;

            double dist_lo = lo.ToColor().CIALAB94DistanceTo(this);
            double dist_hi = hi.ToColor().CIALAB94DistanceTo(this);

            return (dist_lo * .2 + dist_mid * .6 + dist_hi * .2).Clamp();
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly (double Y, double U, double V) ToYUV() => (
             .257 * Rf + .504 * Gf + .098 * Bf + 16,
            -.148 * Rf - .291 * Gf + .439 * Bf + 128,
             .439 * Rf - .368 * Gf - .071 * Bf + 128
        );

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly (double Y, double Cb, double Cr) ToYCbCr() => (
             .299   * Rf + .587   * Gf + .114   * Bf,
            -.16874 * Rf - .33126 * Gf + .5     * Bf + 128,
             .5     * Rf - .41869 * Gf - .08131 * Bf + 128
        );

        /// <inheritdoc/>
        public readonly ConsoleColor ToConsoleColor(ConsoleColorScheme color_scheme)
        {
            RGBAColor copy = this;
            Scalar norm = Scalar.Sqrt(3);

            return (from kvp in IColor.ConsoleColorSchemes[color_scheme]
                    orderby copy.EucledianDistanceTo(kvp.Value) / norm ascending
                    select kvp.Key).FirstOrDefault();
        }

        /// <inheritdoc/>
        public readonly double DistanceTo(RGBAColor other, ColorEqualityMetric metric)
        {
            switch (metric)
            {
                case ColorEqualityMetric.RGBAChannels:
                    return Math.Abs(Rf - other.Rf)
                        + Math.Abs(Gf - other.Gf)
                        + Math.Abs(Bf - other.Bf)
                        + Math.Abs(Af - other.Af);
                case ColorEqualityMetric.RGBChannels:
                    return Math.Abs(Rf - other.Rf)
                        + Math.Abs(Gf - other.Gf)
                        + Math.Abs(Bf - other.Bf);
                case ColorEqualityMetric.RChannel:
                    return Math.Abs(Rf - other.Rf);
                case ColorEqualityMetric.GChannel:
                    return Math.Abs(Gf - other.Gf);
                case ColorEqualityMetric.BChannel:
                    return Math.Abs(Bf - other.Bf);
                case ColorEqualityMetric.Alpha:
                    return Math.Abs(Af - other.Af);
                case ColorEqualityMetric.RGChannels:
                    return Math.Abs(Rf - other.Rf)
                        + Math.Abs(Gf - other.Gf);
                case ColorEqualityMetric.RBChannels:
                    return Math.Abs(Rf - other.Rf)
                        + Math.Abs(Bf - other.Bf);
                case ColorEqualityMetric.RAChannels:
                    return Math.Abs(Rf - other.Rf)
                        + Math.Abs(Af - other.Af);
                case ColorEqualityMetric.GBChannels:
                    return Math.Abs(Gf - other.Gf)
                        + Math.Abs(Bf - other.Bf);
                case ColorEqualityMetric.GAChannels:
                    return Math.Abs(Gf - other.Gf)
                        + Math.Abs(Af - other.Af);
                case ColorEqualityMetric.BAChannels:
                    return Math.Abs(Af - other.Af)
                        + Math.Abs(Bf - other.Bf);
                case ColorEqualityMetric.RGAChannels:
                    return Math.Abs(Rf - other.Rf)
                        + Math.Abs(Gf - other.Gf)
                        + Math.Abs(Af - other.Af);
                case ColorEqualityMetric.RBAChannels:
                    return Math.Abs(Rf - other.Rf)
                        + Math.Abs(Bf - other.Bf)
                        + Math.Abs(Af - other.Af);
                case ColorEqualityMetric.GBAChannels:
                    return Math.Abs(Gf - other.Gf)
                        + Math.Abs(Bf - other.Bf)
                        + Math.Abs(Af - other.Af);
                case ColorEqualityMetric.CChannel:
                    return Math.Abs(ToCMYK().C - other.ToCMYK().C);
                case ColorEqualityMetric.MChannel:
                    return Math.Abs(ToCMYK().M - other.ToCMYK().M);
                case ColorEqualityMetric.YChannel:
                    return Math.Abs(ToCMYK().Y - other.ToCMYK().Y);
                case ColorEqualityMetric.KChannel:
                    return Math.Abs(ToCMYK().K - other.ToCMYK().K);
                case ColorEqualityMetric.Hue:
                    return Math.Abs(ToHSL().H - other.ToHSL().H);
                case ColorEqualityMetric.Saturation:
                    return Math.Abs(ToHSL().S - other.ToHSL().S);
                case ColorEqualityMetric.Luminance:
                    return Math.Abs(ToHSL().L - other.ToHSL().L);
                case ColorEqualityMetric.CIEGray:
                    return Math.Abs(CIEGray - other.CIEGray);
                case ColorEqualityMetric.Average:
                    return Math.Abs(Average - other.Average);
                case ColorEqualityMetric.EucledianLength:
                    return EucledianDistanceTo(other);
                case ColorEqualityMetric.LegacyConsoleColor:
                    return FromConsoleColor(ToConsoleColor(ConsoleColorScheme.Legacy), ConsoleColorScheme.Legacy).DistanceTo(
                        FromConsoleColor(other.ToConsoleColor(ConsoleColorScheme.Legacy), ConsoleColorScheme.Legacy),
                        ColorEqualityMetric.RGAChannels
                    );
                case ColorEqualityMetric.Windows10ConsoleColor:
                    return FromConsoleColor(ToConsoleColor(ConsoleColorScheme.Windows10), ConsoleColorScheme.Windows10).DistanceTo(
                        FromConsoleColor(other.ToConsoleColor(ConsoleColorScheme.Windows10), ConsoleColorScheme.Windows10),
                        ColorEqualityMetric.RGAChannels
                    );
                default:
                    throw new ArgumentOutOfRangeException(nameof(metric));
            }
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly bool Equals(RGBAColor other, ColorEqualityMetric metric) => Equals(other, metric, Scalar.ComputationalEpsilon);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly bool Equals(RGBAColor other, ColorEqualityMetric metric, double tolerance) => Equals(other, new(tolerance, metric));

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly bool Equals(RGBAColor other, ColorTolerance tolerance) => DistanceTo(other, tolerance.Metric) <= tolerance.Tolerance;

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromConsoleColor(ConsoleColor color, ConsoleColorScheme color_scheme) => IColor.ConsoleColorSchemes[color_scheme][color];

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromComplexWrapped(Complex c) => FromComplexWrapped(c, 1);

        /// <inheritdoc/>
        public static RGBAColor FromComplexWrapped(Complex c, double α)
        {
            Scalar l = c.Length;
            Scalar i = 1L << (int)Math.Log2(l);

            if (l < 1)
                return FromHSL(c.Argument, 1, l / 2, α);

            l %= i;
            l /= (long)i << 1;
            l *= 4 / 5d;
            l += 1 / 5d;

            return FromHSL(c.Argument, 1, l, α);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromComplexSmooth(Complex c) => FromComplexSmooth(c, 1);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromComplexSmooth(Complex c, double α) => FromComplexSmooth(c, α, .95);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromComplexSmooth(Complex c, double α, Scalar white_shift) => FromHSL(c.Argument, 1, 1 - white_shift.Clamp().Power(c.Length), α);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        /// <summary>
        /// Converts the given HSL-color to a RGBA-color instance.
        /// </summary>
        /// <param name="H">The HSL-color's hue channel [0..2π]</param>
        /// <param name="S">The HSL-color's saturation channel [0..1]</param>
        /// <param name="L">The HSL-color's luminosity channel [0..1]</param>
        public static RGBAColor FromHSL(double H, double S, double L) => FromHSL(H, S, L, 1);

        /// <summary>
        /// Converts the given HSL-color to a RGBA-color instance.
        /// </summary>
        /// <param name="H">The HSL-color's hue channel [0..2π]</param>
        /// <param name="S">The HSL-color's saturation channel [0..1]</param>
        /// <param name="L">The HSL-color's luminosity channel [0..1]</param>
        /// <param name="α">The color's α-channel (opacity) [0..1]</param>
        public static RGBAColor FromHSL(double H, double S, double L, double α)
        {
            if (S.IsZero())
            {
                byte gray = (byte)Math.Round(L * 255);

                return new RGBAColor(gray, gray, gray, α);
            }
            else
            {
                double t2 = L < .5 ? L * (1 + S) : L + S - (L * S);
                double t1 = (2 * L) - t2;

                H *= 180 / Math.PI;

                return new RGBAColor(
                    calc(H + 120, t1, t2),
                    calc(H, t1, t2),
                    calc(H - 120, t1, t2),
                    α
                );

                static double calc(double h, double t1, double t2)
                {
                    h = (h + 360) % 360;

                    return h < 60 ? t1 + ((t2 - t1) * h / 60)
                        : h < 180 ? t2
                        : h < 240 ? t1 + ((t2 - t1) * (240 - h) / 60)
                        : t1;
                }
            }
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromHSV(double H, double S, double V) => FromHSV(H, S, V, 1);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromHSV(double H, double S, double V, double α)
        {
            double L = V - V * S / 2;
            double m = Math.Min(L, 1 - L);

            return FromHSL(H, m > 0 ? (V - L) / m : 0, L, α);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromCIELAB94(double L, double a, double b) => FromCIELAB94(L, a, b, 1);

        /// <inheritdoc/>
        public static RGBAColor FromCIELAB94(double L, double a, double b, double α)
        {
            double y = (L + 16) / 116;
            double x = a / 500 + y;
            double z = y - b / 200;
            void pre(double fac, ref double channel)
            {
                double c3 = channel * channel * channel;

                channel = fac * ((c3 > .008856) ? c3 : (channel - 16 / 116) / 7.787);
            }
            double post(double channel) => ((channel > .0031308) ? (1.055 * Math.Pow(channel, 1 / 2.4) - .055) : 12.92 * channel).Clamp();

            pre( .95047, ref x);
            pre(1.00000, ref y);
            pre(1.08883, ref z);

            double rf = post(3.2406 * x - 1.5372 * y -  .4986 * z);
            double gf = post(-.9689 * x + 1.8758 * y +  .0415 * z);
            double bf = post( .0557 * x -  .2040 * y + 1.0570 * z);

            return new RGBAColor(rf, gf, bf, α);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromXYZ(double X, double Y) => FromXYZ(X, Y, 0);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromXYZ(double X, double Y, double Z) => FromXYZ(X, Y, Z, 1);

        /// <inheritdoc/>
        public static RGBAColor FromXYZ(double X, double Y, double Z, double α)
        {
            Matrix3 M = (
                2.28783845614809,    -.833367666472978,  -.45447078967511,
                -.511651382108328,   1.42275838011598,    .0888930019923529,
                 .00572041000477002, -.0159068489924701, 1.0101864389877
            );

            return new Vector4(M * (X, Y, Z), α);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromUV(double U, double V) => FromUV(U, V, 1);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromUV(double U, double V, double α) => FromXYZ((9 * U) / ((6 * U) - (16 * V) + 12), (4 * V) / ((6 * U) - (16 * V) + 12), α);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromYUV(double Y, double U, double V) => FromYUV(Y, U, V, 1);

        /// <inheritdoc/>
        public static RGBAColor FromYUV(double Y, double U, double V, double α)
        {
            Y -= 16;
            U -= 128;
            V -= 128;

            return new RGBAColor(
                1.164 * Y + 1.596 * V,
                1.164 * Y -  .392 * U - .813 * V,
                1.164 * Y + 2.017 * U,
                α
            );
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromYCbCr(double Y, double Cb, double Cr) => FromYCbCr(Y, Cb, Cr, 1);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromYCbCr(double Y, double Cb, double Cr, double α) => new RGBAColor(
            Y + (Cr - 128) * 1.402,
            Y + (Cb - 128) * -.34414 + (Cr - 128) * -.71414,
            Y + (Cb - 128) * 1.772,
            α
        );

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromCMYK(double C, double M, double Y, double K) => FromCMYK(C, M, Y, K, 1);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromCMYK(double C, double M, double Y, double K, double α) => (
            (1 - C) * (1 - K),
            (1 - M) * (1 - K),
            (1 - Y) * (1 - K),
            α
        );

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromWavelength(in Wavelength wavelength) => FromWavelength(in wavelength, 1);

        /// <inheritdoc/>
        public static RGBAColor FromWavelength(in Wavelength wavelength, double α)
        {
            double r = 0, g = 0, b = 0;

            if (wavelength.IsVisible)
            {
                double l = wavelength.InNanometers;
                double t;

                if (l < 410)
                {
                    t = (l - 400) / 10d;
                    r = .33 * t - .20 * t * t;
                }
                else if ((l >= 410) && (l < 475))
                { 
                    t = (l - 410) / 65d;
                    r = .14 - .13 * t * t;
                }
                else if ((l >= 545) && (l < 595))
                {
                    t = (l - 545) / 50d;
                    r = 1.98 * t - t * t;
                }
                else if ((l >= 595) && (l < 650))
                {
                    t = (l - 595) / 55d;
                    r = .98 + .06 * t - .40 * t * t;
                }
                else if (l >= 650)
                {
                    t = (l - 650) / 50d;
                    r = .65 - .84 * t + .20 * t * t;
                }

                if (l >= 415 && l < 475)
                {
                    t = (l - 415) / 60d;
                    g = .8 * t * t;
                }
                else if (l >= 475 && l < 590)
                {
                    t = (l - 475) / 115d;
                    g = .8 + .76 * t - .8 * t * t;
                }
                else if (l >= 585 && l < 639.0)
                {
                    t = (l - 585) / 54d;
                    g = .84 * (1 - t);
                }

                if (l >= 400 && l < 475)
                {
                    t = (l - 400) / 75d;
                    b = 2.2 * t - 1.5 * t * t;
                }
                else if (l >= 475 && l < 560)
                {
                    t = (l - 475) / 85d;
                    b = .7 - t + .3 * t * t;
                }
            }

            return new RGBAColor(r, g, b, α);
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromSpectrum(Spectrum spectrum) => FromSpectrum(spectrum, 1);

        /// <inheritdoc/>
        public static RGBAColor FromSpectrum(Spectrum spectrum, double α)
        {
            Vector4 color = Vector4.Zero;
            double total = 0;

            IEnumerable<(Wavelength w, double i)> intensities;

            if (spectrum is DiscreteSpectrum discrete)
                intensities = discrete.Intensities.FromDictionary();
            else
            {
                List<(Wavelength, double)> list = new();

                foreach (Wavelength wavelength in Wavelength.VisibleWavelengths)
                    list.Add((wavelength, spectrum.GetIntensity(wavelength)));

                intensities = list;
            }

            foreach ((Wavelength wavelength, double intensity) in intensities)
            {
                color += intensity * (Vector4)FromWavelength(in wavelength);
                total += intensity;
            }

            color /= total;

            return new RGBAColor(color.X, color.Y, color.Z, α);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        /// <summary>
        /// Returns the RGBA color associated with the given black body temperature (in Kelvin).
        /// </summary>
        /// <param name="temperature">The black body temperature (in Kelvin).</param>
        /// <returns>RGBA color</returns>
        public static RGBAColor FromBlackbodyRadiation(double temperature) => FromBlackbodyRadiation(temperature, 1);

        /// <summary>
        /// Returns the RGBA color associated with the given black body temperature (in Kelvin).
        /// </summary>
        /// <param name="temperature">The black body temperature (in Kelvin).</param>
        /// <returns>RGBA color</returns>
        public static RGBAColor FromBlackbodyRadiation(double temperature, double α)
        {
            double x = temperature / 1000;
            double x2 = x * x;
            double x3 = x2 * x;
            double x4 = x3 * x;
            double x5 = x4 * x;
            double R, G, B;

            if (temperature <= 6600)
                R = 1;
            else
                R = .0002889 * x5 - .01258 * x4 + .2148 * x3 - 1.776 * x2 + 6.907 * x - 8.723;

            if (temperature <= 6600)
                G = -4.593e-5 * x5 + .001424 * x4 - .01489 * x3 + .0498 * x2 + .1669 * x - .1653;
            else
                G = -1.308e-7 * x5 + 1.745e-5 * x4 - .0009116 * x3 + .02348 * x2 - .3048 * x + 2.159;

            if (temperature <= 2000)
                B = 0;
            else if (temperature < 6600)
                B = 1.764e-5 * x5 + .0003575 * x4 - .01554 * x3 + .1549 * x2 - .3682 * x + .2386;
            else
                B = 1;

            return new RGBAColor(R, G, B, α);
        }

        /// <inheritdoc/>
        public static RGBAColor LinearInterpolate(RGBAColor color1, RGBAColor color2, double amount)
        {
            RGBAColor res = default;

            res.Rf = color1.Rf * (1 - amount) + color2.Rf * amount;
            res.Gf = color1.Gf * (1 - amount) + color2.Gf * amount;
            res.Bf = color1.Bf * (1 - amount) + color2.Bf * amount;
            res.Af = color1.Af * (1 - amount) + color2.Af * amount;

            return res;
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromARGB(int argb) => new RGBAColor(argb);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor FromARGB(uint argb) => new RGBAColor(argb);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor operator +(RGBAColor color) => color;

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor operator -(RGBAColor color) => new(-color.Rf, -color.Gf, -color.Bf, -color.Af);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor operator +(RGBAColor first, RGBAColor second) => new(first.Rf + second.Rf, first.Gf + second.Gf, first.Bf + second.Bf, first.Af + second.Af);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor operator -(RGBAColor first, RGBAColor second) => new(first.Rf - second.Rf, first.Gf - second.Gf, first.Bf - second.Bf, first.Af - second.Af);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor operator *(double factor, RGBAColor color) => color * factor;

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor operator *(RGBAColor color, double factor) => new(color.Rf * factor, color.Gf * factor, color.Bf * factor, color.Af * factor);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RGBAColor operator /(RGBAColor color, double factor) => new(color.Rf / factor, color.Gf / factor, color.Bf / factor, color.Af / factor);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator RGBAColor(int argb) => FromARGB(argb);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator RGBAColor(uint argb) => FromARGB(argb);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator (double r, double g, double b)(RGBAColor color) => (color.Rf, color.Gf, color.Bf);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator (double r, double g, double b, double α)(RGBAColor color) => (color.Rf, color.Gf, color.Bf, color.Af);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator RGBAColor((double r, double g, double b) color) => new RGBAColor(color.r, color.g, color.b, 1);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator RGBAColor((double r, double g, double b, double α) color) => new RGBAColor(color.r, color.g, color.b, color.α);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Vector3(RGBAColor color) => new Vector3(color.Rf, color.Gf, color.Bf);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Vector4(RGBAColor color) => new Vector4(color.Rf, color.Gf, color.Bf, color.Af);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator (Vector3 color, Scalar α)(RGBAColor color) => ((color.Rf, color.Gf, color.Bf), color.Af);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator (Vector3 color, double α)(RGBAColor color) => ((color.Rf, color.Gf, color.Bf), color.Af);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator RGBAColor(Vector3 color) => new RGBAColor(color.X, color.Y, color.Z, 1d);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator RGBAColor(Vector4 color) => new RGBAColor(color.X, color.Y, color.Z, color.W);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator RGBAColor((Vector3 color, Scalar α) rgba) => new RGBAColor(rgba.color.X, rgba.color.Y, rgba.color.Z, rgba.α);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator RGBAColor((Vector3 color, double α) rgba) => new RGBAColor(rgba.color.X, rgba.color.Y, rgba.color.Z, rgba.α);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator RGBAColor(in Wavelength wavelength) => FromWavelength(in wavelength);


        /// <summary>
        /// Represents the HTML color 'Transparent' (#00ffffff).
        /// </summary>
        public static RGBAColor Transparent { get; } = 0x00ffffff;

        /// <summary>
        /// Represents the HTML color 'AliceBlue' (#fff0f8ff).
        /// </summary>
        public static RGBAColor AliceBlue { get; } = 0xfff0f8ff;

        /// <summary>
        /// Represents the HTML color 'AntiqueWhite' (#fffaebd7).
        /// </summary>
        public static RGBAColor AntiqueWhite { get; } = 0xfffaebd7;

        /// <summary>
        /// Represents the HTML color 'Aqua' (#ff00ffff).
        /// </summary>
        public static RGBAColor Aqua { get; } = 0xff00ffff;

        /// <summary>
        /// Represents the HTML color 'Aquamarine' (#ff7fffd4).
        /// </summary>
        public static RGBAColor Aquamarine { get; } = 0xff7fffd4;

        /// <summary>
        /// Represents the HTML color 'Azure' (#fff0ffff).
        /// </summary>
        public static RGBAColor Azure { get; } = 0xfff0ffff;

        /// <summary>
        /// Represents the HTML color 'Beige' (#fff5f5dc).
        /// </summary>
        public static RGBAColor Beige { get; } = 0xfff5f5dc;

        /// <summary>
        /// Represents the HTML color 'Bisque' (#ffffe4c4).
        /// </summary>
        public static RGBAColor Bisque { get; } = 0xffffe4c4;

        /// <summary>
        /// Represents the HTML color 'Black' (#ff000000).
        /// </summary>
        public static RGBAColor Black { get; } = 0xff000000;

        /// <summary>
        /// Represents the HTML color 'BlanchedAlmond' (#ffffebcd).
        /// </summary>
        public static RGBAColor BlanchedAlmond { get; } = 0xffffebcd;

        /// <summary>
        /// Represents the HTML color 'Blue' (#ff0000ff).
        /// </summary>
        public static RGBAColor Blue { get; } = 0xff0000ff;

        /// <summary>
        /// Represents the HTML color 'BlueViolet' (#ff8a2be2).
        /// </summary>
        public static RGBAColor BlueViolet { get; } = 0xff8a2be2;

        /// <summary>
        /// Represents the HTML color 'Brown' (#ffa52a2a).
        /// </summary>
        public static RGBAColor Brown { get; } = 0xffa52a2a;

        /// <summary>
        /// Represents the HTML color 'BurlyWood' (#ffdeb887).
        /// </summary>
        public static RGBAColor BurlyWood { get; } = 0xffdeb887;

        /// <summary>
        /// Represents the HTML color 'CadetBlue' (#ff5f9ea0).
        /// </summary>
        public static RGBAColor CadetBlue { get; } = 0xff5f9ea0;

        /// <summary>
        /// Represents the HTML color 'Chartreuse' (#ff7fff00).
        /// </summary>
        public static RGBAColor Chartreuse { get; } = 0xff7fff00;

        /// <summary>
        /// Represents the HTML color 'Chocolate' (#ffd2691e).
        /// </summary>
        public static RGBAColor Chocolate { get; } = 0xffd2691e;

        /// <summary>
        /// Represents the HTML color 'Coral' (#ffff7f50).
        /// </summary>
        public static RGBAColor Coral { get; } = 0xffff7f50;

        /// <summary>
        /// Represents the HTML color 'CornflowerBlue' (#ff6495ed).
        /// </summary>
        public static RGBAColor CornflowerBlue { get; } = 0xff6495ed;

        /// <summary>
        /// Represents the HTML color 'Cornsilk' (#fffff8dc).
        /// </summary>
        public static RGBAColor Cornsilk { get; } = 0xfffff8dc;

        /// <summary>
        /// Represents the HTML color 'Crimson' (#ffdc143c).
        /// </summary>
        public static RGBAColor Crimson { get; } = 0xffdc143c;

        /// <summary>
        /// Represents the HTML color 'Cyan' (#ff00ffff).
        /// </summary>
        public static RGBAColor Cyan { get; } = 0xff00ffff;

        /// <summary>
        /// Represents the HTML color 'DarkBlue' (#ff00008b).
        /// </summary>
        public static RGBAColor DarkBlue { get; } = 0xff00008b;

        /// <summary>
        /// Represents the HTML color 'DarkCyan' (#ff008b8b).
        /// </summary>
        public static RGBAColor DarkCyan { get; } = 0xff008b8b;

        /// <summary>
        /// Represents the HTML color 'DarkGoldenrod' (#ffb8860b).
        /// </summary>
        public static RGBAColor DarkGoldenrod { get; } = 0xffb8860b;

        /// <summary>
        /// Represents the HTML color 'DarkGray' (#ffa9a9a9).
        /// </summary>
        public static RGBAColor DarkGray { get; } = 0xffa9a9a9;

        /// <summary>
        /// Represents the HTML color 'DarkGreen' (#ff006400).
        /// </summary>
        public static RGBAColor DarkGreen { get; } = 0xff006400;

        /// <summary>
        /// Represents the HTML color 'DarkKhaki' (#ffbdb76b).
        /// </summary>
        public static RGBAColor DarkKhaki { get; } = 0xffbdb76b;

        /// <summary>
        /// Represents the HTML color 'DarkMagenta' (#ff8b008b).
        /// </summary>
        public static RGBAColor DarkMagenta { get; } = 0xff8b008b;

        /// <summary>
        /// Represents the HTML color 'DarkOliveGreen' (#ff556b2f).
        /// </summary>
        public static RGBAColor DarkOliveGreen { get; } = 0xff556b2f;

        /// <summary>
        /// Represents the HTML color 'DarkOrange' (#ffff8c00).
        /// </summary>
        public static RGBAColor DarkOrange { get; } = 0xffff8c00;

        /// <summary>
        /// Represents the HTML color 'DarkOrchid' (#ff9932cc).
        /// </summary>
        public static RGBAColor DarkOrchid { get; } = 0xff9932cc;

        /// <summary>
        /// Represents the HTML color 'DarkRed' (#ff8b0000).
        /// </summary>
        public static RGBAColor DarkRed { get; } = 0xff8b0000;

        /// <summary>
        /// Represents the HTML color 'DarkSalmon' (#ffe9967a).
        /// </summary>
        public static RGBAColor DarkSalmon { get; } = 0xffe9967a;

        /// <summary>
        /// Represents the HTML color 'DarkSeaGreen' (#ff8fbc8b).
        /// </summary>
        public static RGBAColor DarkSeaGreen { get; } = 0xff8fbc8b;

        /// <summary>
        /// Represents the HTML color 'DarkSlateBlue' (#ff483d8b).
        /// </summary>
        public static RGBAColor DarkSlateBlue { get; } = 0xff483d8b;

        /// <summary>
        /// Represents the HTML color 'DarkSlateGray' (#ff2f4f4f).
        /// </summary>
        public static RGBAColor DarkSlateGray { get; } = 0xff2f4f4f;

        /// <summary>
        /// Represents the HTML color 'DarkTurquoise' (#ff00ced1).
        /// </summary>
        public static RGBAColor DarkTurquoise { get; } = 0xff00ced1;

        /// <summary>
        /// Represents the HTML color 'DarkViolet' (#ff9400d3).
        /// </summary>
        public static RGBAColor DarkViolet { get; } = 0xff9400d3;

        /// <summary>
        /// Represents the HTML color 'DeepPink' (#ffff1493).
        /// </summary>
        public static RGBAColor DeepPink { get; } = 0xffff1493;

        /// <summary>
        /// Represents the HTML color 'DeepSkyBlue' (#ff00bfff).
        /// </summary>
        public static RGBAColor DeepSkyBlue { get; } = 0xff00bfff;

        /// <summary>
        /// Represents the HTML color 'DimGray' (#ff696969).
        /// </summary>
        public static RGBAColor DimGray { get; } = 0xff696969;

        /// <summary>
        /// Represents the HTML color 'DodgerBlue' (#ff1e90ff).
        /// </summary>
        public static RGBAColor DodgerBlue { get; } = 0xff1e90ff;

        /// <summary>
        /// Represents the HTML color 'Firebrick' (#ffb22222).
        /// </summary>
        public static RGBAColor Firebrick { get; } = 0xffb22222;

        /// <summary>
        /// Represents the HTML color 'FloralWhite' (#fffffaf0).
        /// </summary>
        public static RGBAColor FloralWhite { get; } = 0xfffffaf0;

        /// <summary>
        /// Represents the HTML color 'ForestGreen' (#ff228b22).
        /// </summary>
        public static RGBAColor ForestGreen { get; } = 0xff228b22;

        /// <summary>
        /// Represents the HTML color 'Fuchsia' (#ffff00ff).
        /// </summary>
        public static RGBAColor Fuchsia { get; } = 0xffff00ff;

        /// <summary>
        /// Represents the HTML color 'Gainsboro' (#ffdcdcdc).
        /// </summary>
        public static RGBAColor Gainsboro { get; } = 0xffdcdcdc;

        /// <summary>
        /// Represents the HTML color 'GhostWhite' (#fff8f8ff).
        /// </summary>
        public static RGBAColor GhostWhite { get; } = 0xfff8f8ff;

        /// <summary>
        /// Represents the HTML color 'Gold' (#ffffd700).
        /// </summary>
        public static RGBAColor Gold { get; } = 0xffffd700;

        /// <summary>
        /// Represents the HTML color 'Goldenrod' (#ffdaa520).
        /// </summary>
        public static RGBAColor Goldenrod { get; } = 0xffdaa520;

        /// <summary>
        /// Represents the HTML color 'Gray' (#ff808080).
        /// </summary>
        public static RGBAColor Gray { get; } = 0xff808080;

        /// <summary>
        /// Represents the HTML color 'Green' (#ff008000).
        /// </summary>
        public static RGBAColor Green { get; } = 0xff008000;

        /// <summary>
        /// Represents the HTML color 'GreenYellow' (#ffadff2f).
        /// </summary>
        public static RGBAColor GreenYellow { get; } = 0xffadff2f;

        /// <summary>
        /// Represents the HTML color 'Honeydew' (#fff0fff0).
        /// </summary>
        public static RGBAColor Honeydew { get; } = 0xfff0fff0;

        /// <summary>
        /// Represents the HTML color 'HotPink' (#ffff69b4).
        /// </summary>
        public static RGBAColor HotPink { get; } = 0xffff69b4;

        /// <summary>
        /// Represents the HTML color 'IndianRed' (#ffcd5c5c).
        /// </summary>
        public static RGBAColor IndianRed { get; } = 0xffcd5c5c;

        /// <summary>
        /// Represents the HTML color 'Indigo' (#ff4b0082).
        /// </summary>
        public static RGBAColor Indigo { get; } = 0xff4b0082;

        /// <summary>
        /// Represents the HTML color 'Ivory' (#fffffff0).
        /// </summary>
        public static RGBAColor Ivory { get; } = 0xfffffff0;

        /// <summary>
        /// Represents the HTML color 'Khaki' (#fff0e68c).
        /// </summary>
        public static RGBAColor Khaki { get; } = 0xfff0e68c;

        /// <summary>
        /// Represents the HTML color 'Lavender' (#ffe6e6fa).
        /// </summary>
        public static RGBAColor Lavender { get; } = 0xffe6e6fa;

        /// <summary>
        /// Represents the HTML color 'LavenderBlush' (#fffff0f5).
        /// </summary>
        public static RGBAColor LavenderBlush { get; } = 0xfffff0f5;

        /// <summary>
        /// Represents the HTML color 'LawnGreen' (#ff7cfc00).
        /// </summary>
        public static RGBAColor LawnGreen { get; } = 0xff7cfc00;

        /// <summary>
        /// Represents the HTML color 'LemonChiffon' (#fffffacd).
        /// </summary>
        public static RGBAColor LemonChiffon { get; } = 0xfffffacd;

        /// <summary>
        /// Represents the HTML color 'LightBlue' (#ffadd8e6).
        /// </summary>
        public static RGBAColor LightBlue { get; } = 0xffadd8e6;

        /// <summary>
        /// Represents the HTML color 'LightCoral' (#fff08080).
        /// </summary>
        public static RGBAColor LightCoral { get; } = 0xfff08080;

        /// <summary>
        /// Represents the HTML color 'LightCyan' (#ffe0ffff).
        /// </summary>
        public static RGBAColor LightCyan { get; } = 0xffe0ffff;

        /// <summary>
        /// Represents the HTML color 'LightGoldenrodYellow' (#fffafad2).
        /// </summary>
        public static RGBAColor LightGoldenrodYellow { get; } = 0xfffafad2;

        /// <summary>
        /// Represents the HTML color 'LightGreen' (#ff90ee90).
        /// </summary>
        public static RGBAColor LightGreen { get; } = 0xff90ee90;

        /// <summary>
        /// Represents the HTML color 'LightGray' (#ffd3d3d3).
        /// </summary>
        public static RGBAColor LightGray { get; } = 0xffd3d3d3;

        /// <summary>
        /// Represents the HTML color 'LightPink' (#ffffb6c1).
        /// </summary>
        public static RGBAColor LightPink { get; } = 0xffffb6c1;

        /// <summary>
        /// Represents the HTML color 'LightSalmon' (#ffffa07a).
        /// </summary>
        public static RGBAColor LightSalmon { get; } = 0xffffa07a;

        /// <summary>
        /// Represents the HTML color 'LightSeaGreen' (#ff20b2aa).
        /// </summary>
        public static RGBAColor LightSeaGreen { get; } = 0xff20b2aa;

        /// <summary>
        /// Represents the HTML color 'LightSkyBlue' (#ff87cefa).
        /// </summary>
        public static RGBAColor LightSkyBlue { get; } = 0xff87cefa;

        /// <summary>
        /// Represents the HTML color 'LightSlateGray' (#ff778899).
        /// </summary>
        public static RGBAColor LightSlateGray { get; } = 0xff778899;

        /// <summary>
        /// Represents the HTML color 'LightSteelBlue' (#ffb0c4de).
        /// </summary>
        public static RGBAColor LightSteelBlue { get; } = 0xffb0c4de;

        /// <summary>
        /// Represents the HTML color 'LightYellow' (#ffffffe0).
        /// </summary>
        public static RGBAColor LightYellow { get; } = 0xffffffe0;

        /// <summary>
        /// Represents the HTML color 'Lime' (#ff00ff00).
        /// </summary>
        public static RGBAColor Lime { get; } = 0xff00ff00;

        /// <summary>
        /// Represents the HTML color 'LimeGreen' (#ff32cd32).
        /// </summary>
        public static RGBAColor LimeGreen { get; } = 0xff32cd32;

        /// <summary>
        /// Represents the HTML color 'Linen' (#fffaf0e6).
        /// </summary>
        public static RGBAColor Linen { get; } = 0xfffaf0e6;

        /// <summary>
        /// Represents the HTML color 'Magenta' (#ffff00ff).
        /// </summary>
        public static RGBAColor Magenta { get; } = 0xffff00ff;

        /// <summary>
        /// Represents the HTML color 'Maroon' (#ff800000).
        /// </summary>
        public static RGBAColor Maroon { get; } = 0xff800000;

        /// <summary>
        /// Represents the HTML color 'MediumAquamarine' (#ff66cdaa).
        /// </summary>
        public static RGBAColor MediumAquamarine { get; } = 0xff66cdaa;

        /// <summary>
        /// Represents the HTML color 'MediumBlue' (#ff0000cd).
        /// </summary>
        public static RGBAColor MediumBlue { get; } = 0xff0000cd;

        /// <summary>
        /// Represents the HTML color 'MediumOrchid' (#ffba55d3).
        /// </summary>
        public static RGBAColor MediumOrchid { get; } = 0xffba55d3;

        /// <summary>
        /// Represents the HTML color 'MediumPurple' (#ff9370db).
        /// </summary>
        public static RGBAColor MediumPurple { get; } = 0xff9370db;

        /// <summary>
        /// Represents the HTML color 'MediumSeaGreen' (#ff3cb371).
        /// </summary>
        public static RGBAColor MediumSeaGreen { get; } = 0xff3cb371;

        /// <summary>
        /// Represents the HTML color 'MediumSlateBlue' (#ff7b68ee).
        /// </summary>
        public static RGBAColor MediumSlateBlue { get; } = 0xff7b68ee;

        /// <summary>
        /// Represents the HTML color 'MediumSpringGreen' (#ff00fa9a).
        /// </summary>
        public static RGBAColor MediumSpringGreen { get; } = 0xff00fa9a;

        /// <summary>
        /// Represents the HTML color 'MediumTurquoise' (#ff48d1cc).
        /// </summary>
        public static RGBAColor MediumTurquoise { get; } = 0xff48d1cc;

        /// <summary>
        /// Represents the HTML color 'MediumVioletRed' (#ffc71585).
        /// </summary>
        public static RGBAColor MediumVioletRed { get; } = 0xffc71585;

        /// <summary>
        /// Represents the HTML color 'MidnightBlue' (#ff191970).
        /// </summary>
        public static RGBAColor MidnightBlue { get; } = 0xff191970;

        /// <summary>
        /// Represents the HTML color 'MintCream' (#fff5fffa).
        /// </summary>
        public static RGBAColor MintCream { get; } = 0xfff5fffa;

        /// <summary>
        /// Represents the HTML color 'MistyRose' (#ffffe4e1).
        /// </summary>
        public static RGBAColor MistyRose { get; } = 0xffffe4e1;

        /// <summary>
        /// Represents the HTML color 'Moccasin' (#ffffe4b5).
        /// </summary>
        public static RGBAColor Moccasin { get; } = 0xffffe4b5;

        /// <summary>
        /// Represents the HTML color 'NavajoWhite' (#ffffdead).
        /// </summary>
        public static RGBAColor NavajoWhite { get; } = 0xffffdead;

        /// <summary>
        /// Represents the HTML color 'Navy' (#ff000080).
        /// </summary>
        public static RGBAColor Navy { get; } = 0xff000080;

        /// <summary>
        /// Represents the HTML color 'OldLace' (#fffdf5e6).
        /// </summary>
        public static RGBAColor OldLace { get; } = 0xfffdf5e6;

        /// <summary>
        /// Represents the HTML color 'Olive' (#ff808000).
        /// </summary>
        public static RGBAColor Olive { get; } = 0xff808000;

        /// <summary>
        /// Represents the HTML color 'OliveDrab' (#ff6b8e23).
        /// </summary>
        public static RGBAColor OliveDrab { get; } = 0xff6b8e23;

        /// <summary>
        /// Represents the HTML color 'Orange' (#ffffa500).
        /// </summary>
        public static RGBAColor Orange { get; } = 0xffffa500;

        /// <summary>
        /// Represents the HTML color 'OrangeRed' (#ffff4500).
        /// </summary>
        public static RGBAColor OrangeRed { get; } = 0xffff4500;

        /// <summary>
        /// Represents the HTML color 'Orchid' (#ffda70d6).
        /// </summary>
        public static RGBAColor Orchid { get; } = 0xffda70d6;

        /// <summary>
        /// Represents the HTML color 'PaleGoldenrod' (#ffeee8aa).
        /// </summary>
        public static RGBAColor PaleGoldenrod { get; } = 0xffeee8aa;

        /// <summary>
        /// Represents the HTML color 'PaleGreen' (#ff98fb98).
        /// </summary>
        public static RGBAColor PaleGreen { get; } = 0xff98fb98;

        /// <summary>
        /// Represents the HTML color 'PaleTurquoise' (#ffafeeee).
        /// </summary>
        public static RGBAColor PaleTurquoise { get; } = 0xffafeeee;

        /// <summary>
        /// Represents the HTML color 'PaleVioletRed' (#ffdb7093).
        /// </summary>
        public static RGBAColor PaleVioletRed { get; } = 0xffdb7093;

        /// <summary>
        /// Represents the HTML color 'PapayaWhip' (#ffffefd5).
        /// </summary>
        public static RGBAColor PapayaWhip { get; } = 0xffffefd5;

        /// <summary>
        /// Represents the HTML color 'PeachPuff' (#ffffdab9).
        /// </summary>
        public static RGBAColor PeachPuff { get; } = 0xffffdab9;

        /// <summary>
        /// Represents the HTML color 'Peru' (#ffcd853f).
        /// </summary>
        public static RGBAColor Peru { get; } = 0xffcd853f;

        /// <summary>
        /// Represents the HTML color 'Pink' (#ffffc0cb).
        /// </summary>
        public static RGBAColor Pink { get; } = 0xffffc0cb;

        /// <summary>
        /// Represents the HTML color 'Plum' (#ffdda0dd).
        /// </summary>
        public static RGBAColor Plum { get; } = 0xffdda0dd;

        /// <summary>
        /// Represents the HTML color 'PowderBlue' (#ffb0e0e6).
        /// </summary>
        public static RGBAColor PowderBlue { get; } = 0xffb0e0e6;

        /// <summary>
        /// Represents the HTML color 'Purple' (#ff800080).
        /// </summary>
        public static RGBAColor Purple { get; } = 0xff800080;

        /// <summary>
        /// Represents the HTML color 'Red' (#ffff0000).
        /// </summary>
        public static RGBAColor Red { get; } = 0xffff0000;

        /// <summary>
        /// Represents the HTML color 'RosyBrown' (#ffbc8f8f).
        /// </summary>
        public static RGBAColor RosyBrown { get; } = 0xffbc8f8f;

        /// <summary>
        /// Represents the HTML color 'RoyalBlue' (#ff4169e1).
        /// </summary>
        public static RGBAColor RoyalBlue { get; } = 0xff4169e1;

        /// <summary>
        /// Represents the HTML color 'SaddleBrown' (#ff8b4513).
        /// </summary>
        public static RGBAColor SaddleBrown { get; } = 0xff8b4513;

        /// <summary>
        /// Represents the HTML color 'Salmon' (#fffa8072).
        /// </summary>
        public static RGBAColor Salmon { get; } = 0xfffa8072;

        /// <summary>
        /// Represents the HTML color 'SandyBrown' (#fff4a460).
        /// </summary>
        public static RGBAColor SandyBrown { get; } = 0xfff4a460;

        /// <summary>
        /// Represents the HTML color 'SeaGreen' (#ff2e8b57).
        /// </summary>
        public static RGBAColor SeaGreen { get; } = 0xff2e8b57;

        /// <summary>
        /// Represents the HTML color 'SeaShell' (#fffff5ee).
        /// </summary>
        public static RGBAColor SeaShell { get; } = 0xfffff5ee;

        /// <summary>
        /// Represents the HTML color 'Sienna' (#ffa0522d).
        /// </summary>
        public static RGBAColor Sienna { get; } = 0xffa0522d;

        /// <summary>
        /// Represents the HTML color 'Silver' (#ffc0c0c0).
        /// </summary>
        public static RGBAColor Silver { get; } = 0xffc0c0c0;

        /// <summary>
        /// Represents the HTML color 'SkyBlue' (#ff87ceeb).
        /// </summary>
        public static RGBAColor SkyBlue { get; } = 0xff87ceeb;

        /// <summary>
        /// Represents the HTML color 'SlateBlue' (#ff6a5acd).
        /// </summary>
        public static RGBAColor SlateBlue { get; } = 0xff6a5acd;

        /// <summary>
        /// Represents the HTML color 'SlateGray' (#ff708090).
        /// </summary>
        public static RGBAColor SlateGray { get; } = 0xff708090;

        /// <summary>
        /// Represents the HTML color 'Snow' (#fffffafa).
        /// </summary>
        public static RGBAColor Snow { get; } = 0xfffffafa;

        /// <summary>
        /// Represents the HTML color 'SpringGreen' (#ff00ff7f).
        /// </summary>
        public static RGBAColor SpringGreen { get; } = 0xff00ff7f;

        /// <summary>
        /// Represents the HTML color 'SteelBlue' (#ff4682b4).
        /// </summary>
        public static RGBAColor SteelBlue { get; } = 0xff4682b4;

        /// <summary>
        /// Represents the HTML color 'Tan' (#ffd2b48c).
        /// </summary>
        public static RGBAColor Tan { get; } = 0xffd2b48c;

        /// <summary>
        /// Represents the HTML color 'Teal' (#ff008080).
        /// </summary>
        public static RGBAColor Teal { get; } = 0xff008080;

        /// <summary>
        /// Represents the HTML color 'Thistle' (#ffd8bfd8).
        /// </summary>
        public static RGBAColor Thistle { get; } = 0xffd8bfd8;

        /// <summary>
        /// Represents the HTML color 'Tomato' (#ffff6347).
        /// </summary>
        public static RGBAColor Tomato { get; } = 0xffff6347;

        /// <summary>
        /// Represents the HTML color 'Turquoise' (#ff40e0d0).
        /// </summary>
        public static RGBAColor Turquoise { get; } = 0xff40e0d0;

        /// <summary>
        /// Represents the HTML color 'Violet' (#ffee82ee).
        /// </summary>
        public static RGBAColor Violet { get; } = 0xffee82ee;

        /// <summary>
        /// Represents the HTML color 'Wheat' (#fff5deb3).
        /// </summary>
        public static RGBAColor Wheat { get; } = 0xfff5deb3;

        /// <summary>
        /// Represents the HTML color 'White' (#ffffffff).
        /// </summary>
        public static RGBAColor White { get; } = 0xffffffff;

        /// <summary>
        /// Represents the HTML color 'WhiteSmoke' (#fff5f5f5).
        /// </summary>
        public static RGBAColor WhiteSmoke { get; } = 0xfff5f5f5;

        /// <summary>
        /// Represents the HTML color 'Yellow' (#ffffff00).
        /// </summary>
        public static RGBAColor Yellow { get; } = 0xffffff00;

        /// <summary>
        /// Represents the HTML color 'YellowGreen' (#ff9acd32).
        /// </summary>
        public static RGBAColor YellowGreen { get; } = 0xff9acd32;

        /// <summary>
        /// Represents the HTML color 'Pantone2000' (#FF9BB7D4).
        /// </summary>
        public static RGBAColor Pantone2000 { get; } = 0xFF9BB7D4;

        /// <summary>
        /// Represents the HTML color 'Pantone_15_4020' (#FF9BB7D4).
        /// </summary>
        public static RGBAColor Pantone_15_4020 { get; } = 0xFF9BB7D4;

        /// <summary>
        /// Represents the HTML color 'Pantone2001' (#FFC74375).
        /// </summary>
        public static RGBAColor Pantone2001 { get; } = 0xFFC74375;

        /// <summary>
        /// Represents the HTML color 'Pantone_17_203' (#FFC74375).
        /// </summary>
        public static RGBAColor Pantone_17_203 { get; } = 0xFFC74375;

        /// <summary>
        /// Represents the HTML color 'Pantone2002' (#FFBF1932).
        /// </summary>
        public static RGBAColor Pantone2002 { get; } = 0xFFBF1932;

        /// <summary>
        /// Represents the HTML color 'Pantone_19_166' (#FFBF1932).
        /// </summary>
        public static RGBAColor Pantone_19_166 { get; } = 0xFFBF1932;

        /// <summary>
        /// Represents the HTML color 'Pantone2003' (#FF7BC4C4).
        /// </summary>
        public static RGBAColor Pantone2003 { get; } = 0xFF7BC4C4;

        /// <summary>
        /// Represents the HTML color 'Pantone_14_481' (#FF7BC4C4).
        /// </summary>
        public static RGBAColor Pantone_14_481 { get; } = 0xFF7BC4C4;

        /// <summary>
        /// Represents the HTML color 'Pantone2004' (#FFE2583E).
        /// </summary>
        public static RGBAColor Pantone2004 { get; } = 0xFFE2583E;

        /// <summary>
        /// Represents the HTML color 'Pantone_17_145' (#FFE2583E).
        /// </summary>
        public static RGBAColor Pantone_17_145 { get; } = 0xFFE2583E;

        /// <summary>
        /// Represents the HTML color 'Pantone2005' (#FF53B0AE).
        /// </summary>
        public static RGBAColor Pantone2005 { get; } = 0xFF53B0AE;

        /// <summary>
        /// Represents the HTML color 'Pantone_15_5217' (#FF53B0AE).
        /// </summary>
        public static RGBAColor Pantone_15_5217 { get; } = 0xFF53B0AE;

        /// <summary>
        /// Represents the HTML color 'Pantone2006' (#FFDECDBE).
        /// </summary>
        public static RGBAColor Pantone2006 { get; } = 0xFFDECDBE;

        /// <summary>
        /// Represents the HTML color 'Pantone_13_1106' (#FFDECDBE).
        /// </summary>
        public static RGBAColor Pantone_13_1106 { get; } = 0xFFDECDBE;

        /// <summary>
        /// Represents the HTML color 'Pantone2007' (#FF9B1B30).
        /// </summary>
        public static RGBAColor Pantone2007 { get; } = 0xFF9B1B30;

        /// <summary>
        /// Represents the HTML color 'Pantone_19_1557' (#FF9B1B30).
        /// </summary>
        public static RGBAColor Pantone_19_1557 { get; } = 0xFF9B1B30;

        /// <summary>
        /// Represents the HTML color 'Pantone2008' (#FF5A5B9F).
        /// </summary>
        public static RGBAColor Pantone2008 { get; } = 0xFF5A5B9F;

        /// <summary>
        /// Represents the HTML color 'Pantone_18_3943' (#FF5A5B9F).
        /// </summary>
        public static RGBAColor Pantone_18_3943 { get; } = 0xFF5A5B9F;

        /// <summary>
        /// Represents the HTML color 'Pantone2009' (#FFF0C05A).
        /// </summary>
        public static RGBAColor Pantone2009 { get; } = 0xFFF0C05A;

        /// <summary>
        /// Represents the HTML color 'Pantone_14_848' (#FFF0C05A).
        /// </summary>
        public static RGBAColor Pantone_14_848 { get; } = 0xFFF0C05A;

        /// <summary>
        /// Represents the HTML color 'Pantone2010' (#FF45B5AA).
        /// </summary>
        public static RGBAColor Pantone2010 { get; } = 0xFF45B5AA;

        /// <summary>
        /// Represents the HTML color 'Pantone_15_5519' (#FF45B5AA).
        /// </summary>
        public static RGBAColor Pantone_15_5519 { get; } = 0xFF45B5AA;

        /// <summary>
        /// Represents the HTML color 'Pantone2011' (#FFD94F70).
        /// </summary>
        public static RGBAColor Pantone2011 { get; } = 0xFFD94F70;

        /// <summary>
        /// Represents the HTML color 'Pantone_18_2120' (#FFD94F70).
        /// </summary>
        public static RGBAColor Pantone_18_2120 { get; } = 0xFFD94F70;

        /// <summary>
        /// Represents the HTML color 'Pantone2012' (#FFDD4124).
        /// </summary>
        public static RGBAColor Pantone2012 { get; } = 0xFFDD4124;

        /// <summary>
        /// Represents the HTML color 'Pantone_17_1463' (#FFDD4124).
        /// </summary>
        public static RGBAColor Pantone_17_1463 { get; } = 0xFFDD4124;

        /// <summary>
        /// Represents the HTML color 'Pantone2013' (#FF009473).
        /// </summary>
        public static RGBAColor Pantone2013 { get; } = 0xFF009473;

        /// <summary>
        /// Represents the HTML color 'Pantone_17_5641' (#FF009473).
        /// </summary>
        public static RGBAColor Pantone_17_5641 { get; } = 0xFF009473;

        /// <summary>
        /// Represents the HTML color 'Pantone2014' (#FFB163A3).
        /// </summary>
        public static RGBAColor Pantone2014 { get; } = 0xFFB163A3;

        /// <summary>
        /// Represents the HTML color 'Pantone_18_3224' (#FFB163A3).
        /// </summary>
        public static RGBAColor Pantone_18_3224 { get; } = 0xFFB163A3;

        /// <summary>
        /// Represents the HTML color 'Pantone2015' (#FF955251).
        /// </summary>
        public static RGBAColor Pantone2015 { get; } = 0xFF955251;

        /// <summary>
        /// Represents the HTML color 'Pantone_18_1438' (#FF955251).
        /// </summary>
        public static RGBAColor Pantone_18_1438 { get; } = 0xFF955251;

        /// <summary>
        /// Represents the HTML color 'Pantone2016' (#FFF7CAC9).
        /// </summary>
        public static RGBAColor Pantone2016 { get; } = 0xFFF7CAC9;

        /// <summary>
        /// Represents the HTML color 'Pantone_13_1520' (#FFF7CAC9).
        /// </summary>
        public static RGBAColor Pantone_13_1520 { get; } = 0xFFF7CAC9;

        /// <summary>
        /// Represents the HTML color 'Pantone2017' (#FF88B04B).
        /// </summary>
        public static RGBAColor Pantone2017 { get; } = 0xFF88B04B;

        /// <summary>
        /// Represents the HTML color 'Pantone_15_343' (#FF88B04B).
        /// </summary>
        public static RGBAColor Pantone_15_343 { get; } = 0xFF88B04B;

        /// <summary>
        /// Represents the HTML color 'Pantone2018' (#FF5F4B8B).
        /// </summary>
        public static RGBAColor Pantone2018 { get; } = 0xFF5F4B8B;

        /// <summary>
        /// Represents the HTML color 'Pantone_18_3838' (#FF5F4B8B).
        /// </summary>
        public static RGBAColor Pantone_18_3838 { get; } = 0xFF5F4B8B;

        /// <summary>
        /// Represents the HTML color 'Pantone2019' (#FFFF6F61).
        /// </summary>
        public static RGBAColor Pantone2019 { get; } = 0xFFFF6F61;

        /// <summary>
        /// Represents the HTML color 'Pantone_16_1546' (#FFFF6F61).
        /// </summary>
        public static RGBAColor Pantone_16_1546 { get; } = 0xFFFF6F61;

        /// <summary>
        /// Represents the HTML color 'Pantone2020' (#FF0F4C81).
        /// </summary>
        public static RGBAColor Pantone2020 { get; } = 0xFF0F4C81;

        /// <summary>
        /// Represents the HTML color 'Pantone_19_4052' (#FF0F4C81).
        /// </summary>
        public static RGBAColor Pantone_19_4052 { get; } = 0xFF0F4C81;

        /// <summary>
        /// Represents the HTML color 'Pantone2021' (#FF939597).
        /// </summary>
        public static RGBAColor Pantone2021 { get; } = 0xFF939597;

        /// <summary>
        /// Represents the HTML color 'Pantone_17_5104' (#FF939597).
        /// </summary>
        public static RGBAColor Pantone_17_5104 { get; } = 0xFF939597;

        /// <summary>
        /// Represents the HTML color 'Pantone_15_3919' (#FF92A8D1).
        /// </summary>
        public static RGBAColor Pantone_15_3919 { get; } = 0xFF92A8D1;

        /// <summary>
        /// Represents the HTML color 'Pantone_13_0647' (#FFF5DF4D).
        /// </summary>
        public static RGBAColor Pantone_13_0647 { get; } = 0xFFF5DF4D;
    }
}
