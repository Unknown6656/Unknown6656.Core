<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Drawing" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Drawing" #>
<#@ output extension=".cs" #>
<#
    var colors = typeof(Color).GetProperties(BindingFlags.Static | BindingFlags.Public).Select(p => (hex: ((Color)p.GetValue(null)).ToArgb().ToString("x8"), name: p.Name)).ToList();
    var members = new string[]
    {
        @"public readonly double Average => ($R + $G + $B) / 3;",
        @"public readonly double CIEGray => (.299 * $R) + (.587 * $G) + (.114 * $B);",
        @"public readonly (double L, double a, double b) CIELAB94 => ToCIELAB94();",
        @"public (double Hue, double Saturation, double Luminosity) HSL
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            readonly get => ToHSL();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                $type color = FromHSL(value.Hue, value.Saturation, value.Luminosity);
                ($R, $G, $B) = (color.$R, color.$G, color.$B);
            }
        }",
        @"public (double Hue, double Saturation, double Value) HSV
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            readonly get => ToHSV();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                $type color = FromHSV(value.Hue, value.Saturation, value.Value);
                ($R, $G, $B) = (color.$R, color.$G, color.$B);
            }
        }",
        @"public (double C, double M, double Y, double K) CMYK
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            readonly get => ToCMYK();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                $type color = FromCMYK(value.C, value.M, value.Y, value.K);
                ($R, $G, $B) = (color.$R, color.$G, color.$B);
            }
        }",
        @"public (double Y, double U, double V) YUV
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            readonly get => ToYUV();
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                $type color = FromYUV(value.Y, value.U, value.V);
                ($R, $G, $B) = (color.$R, color.$G, color.$B);
            }
        }",
        @"public readonly ($type @this, $type Triadic1, $type Triadic2) Triadic
        {
            get
            {
                (double h, double s, double l) = ToHSL();

                return (
                    this,
                    FromHSL(h + Math.PI * 2 / 3, s, l, $A),
                    FromHSL(h + Math.PI * 4 / 3, s, l, $A)
                );
            }
        }",
        @"public readonly $type[] Analogous
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                $type copy = this;

                return Enumerable.Range(-3, 7).Select(i => copy.Rotate(i * Math.PI / 6)).ToArray();
            }
        }",
        @"public readonly $type[] Neutrals
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                $type copy = this;

                return Enumerable.Range(-3, 7).Select(i => copy.Rotate(i * Math.PI / 12)).ToArray();
            }
        }",
        @"public readonly $type Normalized
        {
            get
            {
                $type copy = this;
                double max = Math.Max(copy.$R, Math.Max(copy.$G, copy.$B));

                if (max > 0)
                {
                    copy.$R /= max;
                    copy.$G /= max;
                    copy.$B /= max;
                }

                return copy;
            }
        }",
        @"public $type(uint argb)
            : this((int)argb)
        {
        }",
        @"public $type(double r, double g, double b)
            : this(r, g, b, 1)
        {
        }",
        @"public $type($type color)
            : this(color, color.$A)
        {
        }",
        @"public $type($type color, double α)
            : this(color.$R, color.$G, color.$B, α)
        {
        }",
        @"public $type($type* ptr)
            : this(*ptr)
        {
        }",
        @"public $type($type** ptr)
            : this(**ptr)
        {
        }",
        @"public $type(double r, double g, double b, double α)
            : this()
        {
            $A = α;
            $R = r;
            $G = g;
            $B = b;
        }",
        @"public $type(int argb) : this() => $HEX = argb;",
        @"",
        @"public readonly $type Rotate(Scalar φ)
        {
            φ += Scalar.Tau;
            φ %= Scalar.Tau;

            if (φ.IsZero)
                return this;
            else if (φ.Is(Scalar.Pi))
                return Complement;

            (double h, double s, double l) = ToHSL();

            return FromHSL(h + φ, s, l, $A);
        }",
        @"public readonly $type[] GetNeutrals(Scalar φ_step, int count)
        {
            $type copy = this;

            return Enumerable.Range(-count / 2, count).Select(i => copy.Rotate(i * φ_step)).ToArray();
        }",
        @"public readonly $type CorrectGamma(Scalar gamma) => new $type(
            Math.Pow($R, 1 / gamma),
            Math.Pow($G, 1 / gamma),
            Math.Pow($B, 1 / gamma),
            $A
        );",
        @"public readonly Scalar EucledianDistanceTo($type other) => ((Vector4)this).DistanceTo(other);",
        @"public Scalar CIALAB94DistanceTo(IColor other)
        {
            (double L1, double a1, double b1) = ToCIELAB94();
            (double L2, double a2, double b2) = other.ToCIELAB94();

            double δL = L1 - L2;
            double δa = a1 - a2;
            double δb = b1 - b2;

            double c1 = Math.Sqrt(a1 * a1 + b1 *b1);
            double c2 = Math.Sqrt(a2 * a2 + b2 * b2);
            double δC = c1 - c2;
            double δH = δa * δa + δb * δb - δC * δC;

            δH = δH < 0 ? 0 : Math.Sqrt(δH);

            double sc = 1 + .045 * c1;
            double sh = 1 + .015 * c1;

            double δCkcsc = δC / sc;
            double δHkhsh = δH / sh;

            double i = δL * δL + δCkcsc * δCkcsc + δHkhsh * δHkhsh;

            return i < 0 ? 0 : Math.Sqrt(i);
        }",
        // @"public readonly void Deconstruct(out double r, out double g, out double b, out double α)
        // {
        //     r = $R;
        //     g = $G;
        //     b = $B;
        //     α = $A;
        // }",
        // @"public readonly void Deconstruct(out double r, out double g, out double b) => Deconstruct(out r, out g, out b, out _);",
        @"public readonly (double H, double S, double L) ToHSL()
        {
            double a = Math.Min(Math.Min($R, $G), $B);
            double b = Math.Max(Math.Max($R, $G), $B);
            double δ = b - a;
            double l = (b + a) / 2;
            double h, s;

            if (δ < 1e-5)
                s = h = 0;
            else
            {
                s = δ / (l < .5 ? b + a : 2 - b - a);

                double δr = (b - $R) / δ;
                double δg = (b - $G) / δ;
                double δb = (b - $B) / δ;

                h = $R == b ? δb - δg :
                    $G == b ? 2 + δr - δb :
                              4 + δg - δr;

                h *= 60;

                if (h < 0)
                    h += 360;

                h *= Math.PI / 180;
            }

            return (h, s, l);
        }",
        @"public readonly (double H, double S, double V) ToHSV()
        {
            (double H, double S, double L) = ToHSL();
            double V = S * Math.Min(L, 1 - L) + L;

            return (H, V > 0 ? 2 - 2 * L / V : 0, V);
        }",
        @"public readonly (double L, double a, double b) ToCIELAB94()
        {
            static double pre(double channel) => channel > .04045 ? Math.Pow((channel + .055) / 1.055, 2.4) : channel / 12.92;
            static double post(double channel) => channel > .008856 ? Math.Pow(channel, 1 / 3) : (7.787 * channel) + 16 / 116;

            double rf = pre($R);
            double gf = pre($G);
            double bf = pre($B);
            double x = (rf * .4124 + gf * .3576 + bf * .1805) /  .95047;
            double y = (rf * .2126 + gf * .7152 + bf * .0722) / 1.00000;
            double z = (rf * .0193 + gf * .1192 + bf * .9505) / 1.08883;

            x = post(x);
            y = post(y);
            z = post(z);

            return (
                L: (116 * y) - 16,
                a: 500 * (x - y),
                b: 200 * (y - z)
            );
        }",
        @"public readonly (double C, double M, double Y, double K) ToCMYK()
        {
            double K = 1 - Math.Max(Math.Max($R, $G), $B);

            return (
                (1 - $R - K) / (1 - K),
                (1 - $G - K) / (1 - K),
                (1 - $B - K) / (1 - K),
                K
            );
        }",
        @"public readonly DiscreteSpectrum ToSpectrum()
        {
            $type color = this;
            Dictionary<Wavelength, double> intensities = Wavelength.VisibleWavelengths.ToDictionary(LINQ.id, w => color.GetIntensity(w, 0));

            return new DiscreteSpectrum(intensities);
        }",
        @"public readonly double GetIntensity(Wavelength wavelength, double tolerance = 1e-1)
        {
            (Wavelength lo, Wavelength hi) = (wavelength.InNanometers + tolerance, wavelength.InNanometers - tolerance);
            double dist_mid = wavelength.ToColor().CIALAB94DistanceTo(this);

            if (tolerance < Scalar.ComputationalEpsilon)
                return dist_mid;

            double dist_lo = lo.ToColor().CIALAB94DistanceTo(this);
            double dist_hi = hi.ToColor().CIALAB94DistanceTo(this);

            return (dist_lo * .2 + dist_mid * .6 + dist_hi * .2).Clamp();
        }",
        @"public readonly (double Y, double U, double V) ToYUV() => (
             .257 * $R + .504 * $G + .098 * $B + 16,
            -.148 * $R - .291 * $G + .439 * $B + 128,
             .439 * $R - .368 * $G - .071 * $B + 128
        );",
        @"public readonly (double Y, double Cb, double Cr) ToYCbCr() => (
             .299   * $R + .587   * $G + .114   * $B,
            -.16874 * $R - .33126 * $G + .5     * $B + 128,
             .5     * $R - .41869 * $G - .08131 * $B + 128
        );",
        @"public readonly ConsoleColor ToConsoleColor(ConsoleColorScheme color_scheme)
        {
            $type copy = this;
            Scalar norm = Scalar.Sqrt(3);

            return (from kvp in IColor.ConsoleColorSchemes[color_scheme]
                    orderby copy.EucledianDistanceTo(kvp.Value) / norm ascending
                    select kvp.Key).FirstOrDefault();
        }",
        @"public static $type FromConsoleColor(ConsoleColor color, ConsoleColorScheme color_scheme) => IColor.ConsoleColorSchemes[color_scheme][color];",
        @"public static $type FromComplexWrapped(Complex c) => FromComplexWrapped(c, 1);",
        @"public static $type FromComplexWrapped(Complex c, double α)
        {
            Scalar l = c.Length;
            Scalar i = 1L << (int)Math.Log2(l);

            if (l < 1)
                return FromHSL(c.Argument, 1, l / 2, α);

            l %= i;
            l /= (long)i << 1;
            l *= 4 / 5d;
            l += 1 / 5d;

            return FromHSL(c.Argument, 1, l, α);
        }",
        @"public static $type FromComplexSmooth(Complex c) => FromComplexSmooth(c, 1);",
        @"public static $type FromComplexSmooth(Complex c, double α) => FromComplexSmooth(c, α, .95);",
        @"public static $type FromComplexSmooth(Complex c, double α, Scalar white_shift) => FromHSL(c.Argument, 1, 1 - white_shift.Clamp().Power(c.Length), α);",
        @"/// <summary>
        /// Converts the given HSL-color to a RGBA-color instance.
        /// </summary>
        /// <param name=""H"">The HSL-color's hue channel [0..2π]</param>
        /// <param name=""S"">The HSL-color's saturation channel [0..1]</param>
        /// <param name=""L"">The HSL-color's luminosity channel [0..1]</param>
        public static $type FromHSL(double H, double S, double L) => FromHSL(H, S, L, 1);",
        @"/// <summary>
        /// Converts the given HSL-color to a RGBA-color instance.
        /// </summary>
        /// <param name=""H"">The HSL-color's hue channel [0..2π]</param>
        /// <param name=""S"">The HSL-color's saturation channel [0..1]</param>
        /// <param name=""L"">The HSL-color's luminosity channel [0..1]</param>
        /// <param name=""α"">The color's α-channel (opacity) [0..1]</param>
        public static $type FromHSL(double H, double S, double L, double α)
        {
            if (S.IsZero())
            {
                byte gray = (byte)Math.Round(L * 255);

                return new $type(gray, gray, gray, α);
            }
            else
            {
                double t2 = L < .5 ? L * (1 + S) : L + S - (L * S);
                double t1 = (2 * L) - t2;

                H *= 180 / Math.PI;

                return new $type(
                    calc(H + 120, t1, t2),
                    calc(H, t1, t2),
                    calc(H - 120, t1, t2),
                    α
                );

                static double calc(double h, double t1, double t2)
                {
                    h = (h + 360) % 360;

                    return h < 60 ? t1 + ((t2 - t1) * h / 60)
                        : h < 180 ? t2
                        : h < 240 ? t1 + ((t2 - t1) * (240 - h) / 60)
                        : t1;
                }
            }
        }",
        @"public static $type FromHSV(double H, double S, double V) => FromHSV(H, S, V, 1);",
        @"public static $type FromHSV(double H, double S, double V, double α)
        {
            double L = V - V * S / 2;
            double m = Math.Min(L, 1 - L);

            return FromHSL(H, m > 0 ? (V - L) / m : 0, L, α);
        }",
        @"public static $type FromCIELAB94(double L, double a, double b) => FromCIELAB94(L, a, b, 1);",
        @"public static $type FromCIELAB94(double L, double a, double b, double α)
        {
            double y = (L + 16) / 116;
            double x = a / 500 + y;
            double z = y - b / 200;
            void pre(double fac, ref double channel)
            {
                double c3 = channel * channel * channel;

                channel = fac * ((c3 > .008856) ? c3 : (channel - 16 / 116) / 7.787);
            }
            double post(double channel) => ((channel > .0031308) ? (1.055 * Math.Pow(channel, 1 / 2.4) - .055) : 12.92 * channel).Clamp();

            pre( .95047, ref x);
            pre(1.00000, ref y);
            pre(1.08883, ref z);

            double rf = post(3.2406 * x - 1.5372 * y -  .4986 * z);
            double gf = post(-.9689 * x + 1.8758 * y +  .0415 * z);
            double bf = post( .0557 * x -  .2040 * y + 1.0570 * z);

            return new $type(rf, gf, bf, α);
        }",
        @"public static $type FromXYZ(double X, double Y) => FromXYZ(X, Y, 0);",
        @"public static $type FromXYZ(double X, double Y, double Z) => FromXYZ(X, Y, Z, 1);",
        @"public static $type FromXYZ(double X, double Y, double Z, double α)
        {
            Matrix3 M = (
                2.28783845614809,    -.833367666472978,  -.45447078967511,
                -.511651382108328,   1.42275838011598,    .0888930019923529,
                 .00572041000477002, -.0159068489924701, 1.0101864389877
            );

            return new Vector4(M * (X, Y, Z), α);
        }",
        @"public static $type FromUV(double U, double V) => FromUV(U, V, 1);",
        @"public static $type FromUV(double U, double V, double α) => FromXYZ((9 * U) / ((6 * U) - (16 * V) + 12), (4 * V) / ((6 * U) - (16 * V) + 12), α);",
        @"public static $type FromYUV(double Y, double U, double V) => FromYUV(Y, U, V, 1);",
        @"public static $type FromYUV(double Y, double U, double V, double α)
        {
            Y -= 16;
            U -= 128;
            V -= 128;

            return new $type(
                1.164 * Y + 1.596 * V,
                1.164 * Y -  .392 * U - .813 * V,
                1.164 * Y + 2.017 * U,
                α
            );
        }",
        @"public static $type FromYCbCr(double Y, double Cb, double Cr) => FromYCbCr(Y, Cb, Cr, 1);",
        @"public static $type FromYCbCr(double Y, double Cb, double Cr, double α) => new $type(
            Y + (Cr - 128) * 1.402,
            Y + (Cb - 128) * -.34414 + (Cr - 128) * -.71414,
            Y + (Cb - 128) * 1.772,
            α
        );",
        @"public static $type FromCMYK(double C, double M, double Y, double K) => FromCMYK(C, M, Y, K, 1);",
        @"public static $type FromCMYK(double C, double M, double Y, double K, double α) => (
            (1 - C) * (1 - K),
            (1 - M) * (1 - K),
            (1 - Y) * (1 - K),
            α
        );",
        @"public static $type FromWavelength(in Wavelength wavelength) => FromWavelength(in wavelength, 1);",
        @"public static $type FromWavelength(in Wavelength wavelength, double α)
        {
            double r = 0, g = 0, b = 0;

            if (wavelength.IsVisible)
            {
                double l = wavelength.InNanometers;
                double t;

                if (l < 410)
                {
                    t = (l - 400) / 10d;
                    r = .33 * t - .20 * t * t;
                }
                else if ((l >= 410) && (l < 475))
                { 
                    t = (l - 410) / 65d;
                    r = .14 - .13 * t * t;
                }
                else if ((l >= 545) && (l < 595))
                {
                    t = (l - 545) / 50d;
                    r = 1.98 * t - t * t;
                }
                else if ((l >= 595) && (l < 650))
                {
                    t = (l - 595) / 55d;
                    r = .98 + .06 * t - .40 * t * t;
                }
                else if (l >= 650)
                {
                    t = (l - 650) / 50d;
                    r = .65 - .84 * t + .20 * t * t;
                }

                if (l >= 415 && l < 475)
                {
                    t = (l - 415) / 60d;
                    g = .8 * t * t;
                }
                else if (l >= 475 && l < 590)
                {
                    t = (l - 475) / 115d;
                    g = .8 + .76 * t - .8 * t * t;
                }
                else if (l >= 585 && l < 639.0)
                {
                    t = (l - 585) / 54d;
                    g = .84 * (1 - t);
                }

                if (l >= 400 && l < 475)
                {
                    t = (l - 400) / 75d;
                    b = 2.2 * t - 1.5 * t * t;
                }
                else if (l >= 475 && l < 560)
                {
                    t = (l - 475) / 85d;
                    b = .7 - t + .3 * t * t;
                }
            }

            return new $type(r, g, b, α);
        }",
        @"public static $type FromSpectrum(Spectrum spectrum) => FromSpectrum(spectrum, 1);",
        @"public static $type FromSpectrum(Spectrum spectrum, double α)
        {
            Vector4 color = Vector4.Zero;
            double total = 0;

            IEnumerable<(Wavelength w, double i)> intensities;

            if (spectrum is DiscreteSpectrum discrete)
                intensities = discrete.Intensities.FromDictionary();
            else
            {
                List<(Wavelength, double)> list = new();

                foreach (Wavelength wavelength in Wavelength.VisibleWavelengths)
                    list.Add((wavelength, spectrum.GetIntensity(wavelength)));

                intensities = list;
            }

            foreach ((Wavelength wavelength, double intensity) in intensities)
            {
                color += intensity * (Vector4)FromWavelength(in wavelength);
                total += intensity;
            }

            color /= total;

            return new $type(color.X, color.Y, color.Z, α);
        }",
        @"/// <summary>
        /// Returns the RGBA color associated with the given black body temperature (in Kelvin).
        /// </summary>
        /// <param name=""temperature"">The black body temperature (in Kelvin).</param>
        /// <returns>RGBA color</returns>
        public static $type FromBlackbodyRadiation(double temperature) => FromBlackbodyRadiation(temperature, 1);",
        @"/// <summary>
        /// Returns the RGBA color associated with the given black body temperature (in Kelvin).
        /// </summary>
        /// <param name=""temperature"">The black body temperature (in Kelvin).</param>
        /// <returns>RGBA color</returns>
        public static $type FromBlackbodyRadiation(double temperature, double α)
        {
            double x = temperature / 1000;
            double x2 = x * x;
            double x3 = x2 * x;
            double x4 = x3 * x;
            double x5 = x4 * x;
            double R, G, B;

            if (temperature <= 6600)
                R = 1;
            else
                R = .0002889 * x5 - .01258 * x4 + .2148 * x3 - 1.776 * x2 + 6.907 * x - 8.723;

            if (temperature <= 6600)
                G = -4.593e-5 * x5 + .001424 * x4 - .01489 * x3 + .0498 * x2 + .1669 * x - .1653;
            else
                G = -1.308e-7 * x5 + 1.745e-5 * x4 - .0009116 * x3 + .02348 * x2 - .3048 * x + 2.159;

            if (temperature <= 2000)
                B = 0;
            else if (temperature < 6600)
                B = 1.764e-5 * x5 + .0003575 * x4 - .01554 * x3 + .1549 * x2 - .3682 * x + .2386;
            else
                B = 1;

            return new $type(R, G, B, α);
        }",
        @"public static $type LinearInterpolate($type color1, $type color2, double amount)
        {
            $type res = default;

            res.$R = color1.$R * (1 - amount) + color2.$R * amount;
            res.$G = color1.$G * (1 - amount) + color2.$G * amount;
            res.$B = color1.$B * (1 - amount) + color2.$B * amount;
            res.$A = color1.$A * (1 - amount) + color2.$A * amount;

            return res;
        }",
        @"public static $type FromARGB(int argb) => new $type(argb);",
        @"public static $type FromARGB(uint argb) => new $type(argb);",
        @"public static $type operator +($type color) => color;",
        @"public static $type operator -($type color) => new(-color.$R, -color.$G, -color.$B, -color.$A);",
        @"public static $type operator +($type first, $type second) => new(first.$R + second.$R, first.$G + second.$G, first.$B + second.$B, first.$A + second.$A);",
        @"public static $type operator -($type first, $type second) => new(first.$R - second.$R, first.$G - second.$G, first.$B - second.$B, first.$A - second.$A);",
        @"public static $type operator *(double factor, $type color) => color * factor;",
        @"public static $type operator *($type color, double factor) => new(color.$R * factor, color.$G * factor, color.$B * factor, color.$A * factor);",
        @"public static $type operator /($type color, double factor) => new(color.$R / factor, color.$G / factor, color.$B / factor, color.$A / factor);",
        @"public static implicit operator $type(int argb) => FromARGB(argb);",
        @"public static implicit operator $type(uint argb) => FromARGB(argb);",
        @"public static implicit operator (double r, double g, double b)($type color) => (color.$R, color.$G, color.$B);",
        @"public static implicit operator (double r, double g, double b, double α)($type color) => (color.$R, color.$G, color.$B, color.$A);",
        @"public static implicit operator $type((double r, double g, double b) color) => new $type(color.r, color.g, color.b, 1);",
        @"public static implicit operator $type((double r, double g, double b, double α) color) => new $type(color.r, color.g, color.b, color.α);",
        @"public static implicit operator Vector3($type color) => new Vector3(color.$R, color.$G, color.$B);",
        @"public static implicit operator Vector4($type color) => new Vector4(color.$R, color.$G, color.$B, color.$A);",
        @"public static implicit operator (Vector3 color, Scalar α)($type color) => ((color.$R, color.$G, color.$B), color.$A);",
        @"public static implicit operator (Vector3 color, double α)($type color) => ((color.$R, color.$G, color.$B), color.$A);",
        @"public static implicit operator $type(Vector3 color) => new $type(color.X, color.Y, color.Z, 1d);",
        @"public static implicit operator $type(Vector4 color) => new $type(color.X, color.Y, color.Z, color.W);",
        @"public static implicit operator $type((Vector3 color, Scalar α) rgba) => new $type(rgba.color.X, rgba.color.Y, rgba.color.Z, rgba.α);",
        @"public static implicit operator $type((Vector3 color, double α) rgba) => new $type(rgba.color.X, rgba.color.Y, rgba.color.Z, rgba.α);",
        @"public static implicit operator $type(in Wavelength wavelength) => FromWavelength(in wavelength);",
    };
    var types = new (string name, Func<string, string> proc)[]
    {
        ("HDRColor", s => s.Replace($"$HEX", "ARGB32").Replace("$R", "R").Replace("$G", "G").Replace("$B", "B").Replace("$A", "A")),
        ("RGBAColor", s => s.Replace($"$HEX", "ARGB").Replace("$R", "Rf").Replace("$G", "Gf").Replace("$B", "Bf").Replace("$A", "Af")),
    };

#>
///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffffff")#>              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Linq;
using System;

using Unknown6656.Mathematics.LinearAlgebra;
using Unknown6656.Mathematics.Analysis;
using Unknown6656.Mathematics;
using Unknown6656.Common;


namespace Unknown6656.Imaging
{
<#
    bool M(string s, string p, out Match m) => (m = Regex.Match(s, p, RegexOptions.Compiled | RegexOptions.IgnoreCase)).Success;

    foreach ((string name, Func<string, string> process) in types)
    {
#>

    public unsafe partial struct <#=name#>
    {
<#
        foreach (string member in members)
        {
            string content = process(member).Replace("$type", name);

            if (string.IsNullOrWhiteSpace(content))
                continue;
            else if (!content.StartsWith("///"))
                WriteLine("        /// <inheritdoc/>");

            if (content.Count(c => c is '\n') < 8 &&
                !content.Contains("MethodImplOptions") &&
                !M(content, @"^[^\n]+\w+\s*=>", out _))
                WriteLine("        [MethodImpl(MethodImplOptions.AggressiveInlining)]");

            WriteLine($"        {content}\r\n");
        }
        
        foreach (var color in colors)
        {
#>

        /// <summary>
        /// Represents the HTML color '<#=color.name#>' (#<#=color.hex#>).
        /// </summary>
        public static RGBAColor <#=color.name#> { get; } = 0x<#=color.hex#>;
<#
        }
#>
    }
<#
    }
#>
}
