<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffffff")#>              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

using System.Collections.Generic;

namespace Unknown6656.Imaging
{
    public abstract partial class Spectrum
    {
<#
    string path = Host.ResolvePath("PhysicalSpectrums.ini");
    string[] lines = File.ReadAllLines(path);
    Dictionary<string, List<(double, double)>> spectrums = new();
    Dictionary<string, double> max = new();
    string curr = null;
    
    Regex reg_header = new Regex(@"\s*\[\s*(?<name>[a-zA-Z_]+)\s*\]\s*", RegexOptions.Compiled);
    Regex reg_line = new Regex(@"\s*(?<intensity>[\d\.\+\-]+)\s*@\s*(?<wavelength>[\d\.\+\-]+)\s*", RegexOptions.Compiled);
    Match m;

    foreach (string line in lines)
        if (!string.IsNullOrWhiteSpace(line))
            if (line.Trim().StartsWith("#"))
                continue;
            else if ((m = reg_header.Match(line)).Success)
            {
                curr = m.Groups["name"].Value;
                spectrums[curr] = new();
                max[curr] = 0;
            }
            else if ((m = reg_line.Match(line)).Success)
            {
                double i = double.Parse(m.Groups["intensity"].Value);
                double w = double.Parse(m.Groups["wavelength"].Value) * 0.1;

                spectrums[curr].Add((w, i));
                max[curr] = Math.Max(max[curr], i);
            }

    foreach (var kvp in spectrums)
    {
#>
        public static DiscreteSpectrum <#=kvp.Key#>Spectrum { get; } = new DiscreteSpectrum(new Dictionary<Wavelength, double> ()
        {
<#=string.Join("\n", kvp.Value.OrderBy(t => t.Item1).Select(t => $"            [{t.Item1:F10}] = {t.Item2 / max[kvp.Key]:F10}, // intensity: {t.Item2} / {max[kvp.Key]}"))#>
        });

<#
    }
#>
    }
}

