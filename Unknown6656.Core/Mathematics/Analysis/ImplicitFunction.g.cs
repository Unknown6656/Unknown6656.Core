
///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED 2022-09-05 10:57:37.984362              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

using System;

using Unknown6656.Mathematics.LinearAlgebra;

namespace Unknown6656.Mathematics.Analysis;


public partial class ImplicitScalarFunction2D
    : ImplicitFunction<Vector2>
{
    public bool this[Scalar x0, Scalar x1] => Evaluate(x0, x1);

    public bool this[Scalar x0, Scalar x1, Scalar tolerance] => Evaluate(x0, x1, tolerance);


    public ImplicitScalarFunction2D(ImplicitFunction<Vector2> function)
        : this(function.ExplicitFunction, function.ComparisonOperator)
    {
    }

    public ImplicitScalarFunction2D(Function<Vector2, Scalar> function)
        : this(function, ComparisonOperator.EqualTo)
    {
    }

    public ImplicitScalarFunction2D(Func<Vector2, Scalar> function)
        : this(new Function<Vector2, Scalar>(function))
    {
    }

    public ImplicitScalarFunction2D(Function<Vector2, Scalar> function, ComparisonOperator comparison)
        : base(function, comparison)
    {
    }

    public ImplicitScalarFunction2D(Func<Vector2, Scalar> function, ComparisonOperator comparison)
        : this(new Function<Vector2, Scalar>(function), comparison)
    {
    }

    public ImplicitScalarFunction2D(Function<Vector2, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(function.Subtract(value), comparison)
    {
    }

    public ImplicitScalarFunction2D(Func<Vector2, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(new Function<Vector2, Scalar>(function), comparison, value)
    {
    }

    public ImplicitScalarFunction2D(Function<Vector2, Scalar> left, ComparisonOperator comparison, Function<Vector2, Scalar> right)
        : this(left.Subtract(right), comparison)
    {
    }

    public ImplicitScalarFunction2D(Func<Vector2, Scalar> left, ComparisonOperator comparison, Func<Vector2, Scalar> right)
        : this(new Function<Vector2, Scalar>(left), comparison, new Function<Vector2, Scalar>(right))
    {
    }

    public ImplicitScalarFunction2D(Func<Scalar, Scalar, Scalar> function)
        : this(v => function(v[0], v[1]))
    {
    }

    public ImplicitScalarFunction2D(Func<Scalar, Scalar, Scalar> function, ComparisonOperator comparison)
        : this(v => function(v[0], v[1]), comparison)
    {
    }

    public ImplicitScalarFunction2D(Func<Scalar, Scalar, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(v => function(v[0], v[1]), comparison, value)
    {
    }

    public ImplicitScalarFunction2D(Func<Scalar, Scalar, Scalar> left, ComparisonOperator comparison, Func<Scalar, Scalar, Scalar> right)
        : this(v => left(v[0], v[1]), comparison, v => right(v[0], v[1]))
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1) => Evaluate(x0, x1, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar tolerance) => base.Evaluate(new(x0, x1), tolerance);

    public static ImplicitScalarFunction2D StretchBlend(ImplicitScalarFunction2D first, ImplicitScalarFunction2D second, Scalar blend_factor)
    {
        blend_factor = blend_factor.Clamp();

        return new(xy =>
            (1 - xy.Length.Multiply(blend_factor)).Max(Scalar.Zero).Multiply(first.ExplicitFunction.Evaluate(xy)) +
            xy.Length.Multiply(blend_factor).Min(Scalar.One).Multiply(second.ExplicitFunction.Evaluate(xy)),
            Combine(first.ComparisonOperator, second.ComparisonOperator)
        );
    }

    public ImplicitScalarFunction2D Negate() => new(v => ExplicitFunction.Evaluate(-v), ComparisonOperator);

    public ImplicitScalarFunction2D Shift(Vector2 offset) => new(v => ExplicitFunction.Evaluate(v - offset), ComparisonOperator);

    public ImplicitScalarFunction2D Scale(Scalar factor) => new(v => ExplicitFunction.Evaluate(v / factor), ComparisonOperator);

    public static ImplicitScalarFunction2D operator +(ImplicitScalarFunction2D function) => function;

    public static ImplicitScalarFunction2D operator -(ImplicitScalarFunction2D function) => function.Negate();

    public static ImplicitScalarFunction2D operator +(Vector2 offset, ImplicitScalarFunction2D function) => function.Shift(offset);

    public static ImplicitScalarFunction2D operator +(ImplicitScalarFunction2D function, Vector2 offset) => function.Shift(offset);

    public static ImplicitScalarFunction2D operator -(ImplicitScalarFunction2D function, Vector2 offset) => function.Shift(-offset);

    public static ImplicitScalarFunction2D operator *(Scalar scale, ImplicitScalarFunction2D function) => function.Scale(scale);

    public static ImplicitScalarFunction2D operator *(ImplicitScalarFunction2D function, Scalar scale) => function.Scale(scale);

    public static ImplicitScalarFunction2D operator /(ImplicitScalarFunction2D function, Scalar scale) => function.Scale(scale.MultiplicativeInverse);
}

public partial class ImplicitScalarFunction3D
    : ImplicitFunction<Vector3>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2] => Evaluate(x0, x1, x2);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar tolerance] => Evaluate(x0, x1, x2, tolerance);


    public ImplicitScalarFunction3D(ImplicitFunction<Vector3> function)
        : this(function.ExplicitFunction, function.ComparisonOperator)
    {
    }

    public ImplicitScalarFunction3D(Function<Vector3, Scalar> function)
        : this(function, ComparisonOperator.EqualTo)
    {
    }

    public ImplicitScalarFunction3D(Func<Vector3, Scalar> function)
        : this(new Function<Vector3, Scalar>(function))
    {
    }

    public ImplicitScalarFunction3D(Function<Vector3, Scalar> function, ComparisonOperator comparison)
        : base(function, comparison)
    {
    }

    public ImplicitScalarFunction3D(Func<Vector3, Scalar> function, ComparisonOperator comparison)
        : this(new Function<Vector3, Scalar>(function), comparison)
    {
    }

    public ImplicitScalarFunction3D(Function<Vector3, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(function.Subtract(value), comparison)
    {
    }

    public ImplicitScalarFunction3D(Func<Vector3, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(new Function<Vector3, Scalar>(function), comparison, value)
    {
    }

    public ImplicitScalarFunction3D(Function<Vector3, Scalar> left, ComparisonOperator comparison, Function<Vector3, Scalar> right)
        : this(left.Subtract(right), comparison)
    {
    }

    public ImplicitScalarFunction3D(Func<Vector3, Scalar> left, ComparisonOperator comparison, Func<Vector3, Scalar> right)
        : this(new Function<Vector3, Scalar>(left), comparison, new Function<Vector3, Scalar>(right))
    {
    }

    public ImplicitScalarFunction3D(Func<Scalar, Scalar, Scalar, Scalar> function)
        : this(v => function(v[0], v[1], v[2]))
    {
    }

    public ImplicitScalarFunction3D(Func<Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison)
        : this(v => function(v[0], v[1], v[2]), comparison)
    {
    }

    public ImplicitScalarFunction3D(Func<Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(v => function(v[0], v[1], v[2]), comparison, value)
    {
    }

    public ImplicitScalarFunction3D(Func<Scalar, Scalar, Scalar, Scalar> left, ComparisonOperator comparison, Func<Scalar, Scalar, Scalar, Scalar> right)
        : this(v => left(v[0], v[1], v[2]), comparison, v => right(v[0], v[1], v[2]))
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2) => Evaluate(x0, x1, x2, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar tolerance) => base.Evaluate(new(x0, x1, x2), tolerance);

    public static ImplicitScalarFunction3D StretchBlend(ImplicitScalarFunction3D first, ImplicitScalarFunction3D second, Scalar blend_factor)
    {
        blend_factor = blend_factor.Clamp();

        return new(xy =>
            (1 - xy.Length.Multiply(blend_factor)).Max(Scalar.Zero).Multiply(first.ExplicitFunction.Evaluate(xy)) +
            xy.Length.Multiply(blend_factor).Min(Scalar.One).Multiply(second.ExplicitFunction.Evaluate(xy)),
            Combine(first.ComparisonOperator, second.ComparisonOperator)
        );
    }

    public ImplicitScalarFunction3D Negate() => new(v => ExplicitFunction.Evaluate(-v), ComparisonOperator);

    public ImplicitScalarFunction3D Shift(Vector3 offset) => new(v => ExplicitFunction.Evaluate(v - offset), ComparisonOperator);

    public ImplicitScalarFunction3D Scale(Scalar factor) => new(v => ExplicitFunction.Evaluate(v / factor), ComparisonOperator);

    public static ImplicitScalarFunction3D operator +(ImplicitScalarFunction3D function) => function;

    public static ImplicitScalarFunction3D operator -(ImplicitScalarFunction3D function) => function.Negate();

    public static ImplicitScalarFunction3D operator +(Vector3 offset, ImplicitScalarFunction3D function) => function.Shift(offset);

    public static ImplicitScalarFunction3D operator +(ImplicitScalarFunction3D function, Vector3 offset) => function.Shift(offset);

    public static ImplicitScalarFunction3D operator -(ImplicitScalarFunction3D function, Vector3 offset) => function.Shift(-offset);

    public static ImplicitScalarFunction3D operator *(Scalar scale, ImplicitScalarFunction3D function) => function.Scale(scale);

    public static ImplicitScalarFunction3D operator *(ImplicitScalarFunction3D function, Scalar scale) => function.Scale(scale);

    public static ImplicitScalarFunction3D operator /(ImplicitScalarFunction3D function, Scalar scale) => function.Scale(scale.MultiplicativeInverse);
}

public partial class ImplicitScalarFunction4D
    : ImplicitFunction<Vector4>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3] => Evaluate(x0, x1, x2, x3);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar tolerance] => Evaluate(x0, x1, x2, x3, tolerance);


    public ImplicitScalarFunction4D(ImplicitFunction<Vector4> function)
        : this(function.ExplicitFunction, function.ComparisonOperator)
    {
    }

    public ImplicitScalarFunction4D(Function<Vector4, Scalar> function)
        : this(function, ComparisonOperator.EqualTo)
    {
    }

    public ImplicitScalarFunction4D(Func<Vector4, Scalar> function)
        : this(new Function<Vector4, Scalar>(function))
    {
    }

    public ImplicitScalarFunction4D(Function<Vector4, Scalar> function, ComparisonOperator comparison)
        : base(function, comparison)
    {
    }

    public ImplicitScalarFunction4D(Func<Vector4, Scalar> function, ComparisonOperator comparison)
        : this(new Function<Vector4, Scalar>(function), comparison)
    {
    }

    public ImplicitScalarFunction4D(Function<Vector4, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(function.Subtract(value), comparison)
    {
    }

    public ImplicitScalarFunction4D(Func<Vector4, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(new Function<Vector4, Scalar>(function), comparison, value)
    {
    }

    public ImplicitScalarFunction4D(Function<Vector4, Scalar> left, ComparisonOperator comparison, Function<Vector4, Scalar> right)
        : this(left.Subtract(right), comparison)
    {
    }

    public ImplicitScalarFunction4D(Func<Vector4, Scalar> left, ComparisonOperator comparison, Func<Vector4, Scalar> right)
        : this(new Function<Vector4, Scalar>(left), comparison, new Function<Vector4, Scalar>(right))
    {
    }

    public ImplicitScalarFunction4D(Func<Scalar, Scalar, Scalar, Scalar, Scalar> function)
        : this(v => function(v[0], v[1], v[2], v[3]))
    {
    }

    public ImplicitScalarFunction4D(Func<Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison)
        : this(v => function(v[0], v[1], v[2], v[3]), comparison)
    {
    }

    public ImplicitScalarFunction4D(Func<Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(v => function(v[0], v[1], v[2], v[3]), comparison, value)
    {
    }

    public ImplicitScalarFunction4D(Func<Scalar, Scalar, Scalar, Scalar, Scalar> left, ComparisonOperator comparison, Func<Scalar, Scalar, Scalar, Scalar, Scalar> right)
        : this(v => left(v[0], v[1], v[2], v[3]), comparison, v => right(v[0], v[1], v[2], v[3]))
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3) => Evaluate(x0, x1, x2, x3, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3), tolerance);

    public static ImplicitScalarFunction4D StretchBlend(ImplicitScalarFunction4D first, ImplicitScalarFunction4D second, Scalar blend_factor)
    {
        blend_factor = blend_factor.Clamp();

        return new(xy =>
            (1 - xy.Length.Multiply(blend_factor)).Max(Scalar.Zero).Multiply(first.ExplicitFunction.Evaluate(xy)) +
            xy.Length.Multiply(blend_factor).Min(Scalar.One).Multiply(second.ExplicitFunction.Evaluate(xy)),
            Combine(first.ComparisonOperator, second.ComparisonOperator)
        );
    }

    public ImplicitScalarFunction4D Negate() => new(v => ExplicitFunction.Evaluate(-v), ComparisonOperator);

    public ImplicitScalarFunction4D Shift(Vector4 offset) => new(v => ExplicitFunction.Evaluate(v - offset), ComparisonOperator);

    public ImplicitScalarFunction4D Scale(Scalar factor) => new(v => ExplicitFunction.Evaluate(v / factor), ComparisonOperator);

    public static ImplicitScalarFunction4D operator +(ImplicitScalarFunction4D function) => function;

    public static ImplicitScalarFunction4D operator -(ImplicitScalarFunction4D function) => function.Negate();

    public static ImplicitScalarFunction4D operator +(Vector4 offset, ImplicitScalarFunction4D function) => function.Shift(offset);

    public static ImplicitScalarFunction4D operator +(ImplicitScalarFunction4D function, Vector4 offset) => function.Shift(offset);

    public static ImplicitScalarFunction4D operator -(ImplicitScalarFunction4D function, Vector4 offset) => function.Shift(-offset);

    public static ImplicitScalarFunction4D operator *(Scalar scale, ImplicitScalarFunction4D function) => function.Scale(scale);

    public static ImplicitScalarFunction4D operator *(ImplicitScalarFunction4D function, Scalar scale) => function.Scale(scale);

    public static ImplicitScalarFunction4D operator /(ImplicitScalarFunction4D function, Scalar scale) => function.Scale(scale.MultiplicativeInverse);
}

public partial class ImplicitScalarFunction5D
    : ImplicitFunction<Vector5>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4] => Evaluate(x0, x1, x2, x3, x4);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar tolerance] => Evaluate(x0, x1, x2, x3, x4, tolerance);


    public ImplicitScalarFunction5D(ImplicitFunction<Vector5> function)
        : this(function.ExplicitFunction, function.ComparisonOperator)
    {
    }

    public ImplicitScalarFunction5D(Function<Vector5, Scalar> function)
        : this(function, ComparisonOperator.EqualTo)
    {
    }

    public ImplicitScalarFunction5D(Func<Vector5, Scalar> function)
        : this(new Function<Vector5, Scalar>(function))
    {
    }

    public ImplicitScalarFunction5D(Function<Vector5, Scalar> function, ComparisonOperator comparison)
        : base(function, comparison)
    {
    }

    public ImplicitScalarFunction5D(Func<Vector5, Scalar> function, ComparisonOperator comparison)
        : this(new Function<Vector5, Scalar>(function), comparison)
    {
    }

    public ImplicitScalarFunction5D(Function<Vector5, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(function.Subtract(value), comparison)
    {
    }

    public ImplicitScalarFunction5D(Func<Vector5, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(new Function<Vector5, Scalar>(function), comparison, value)
    {
    }

    public ImplicitScalarFunction5D(Function<Vector5, Scalar> left, ComparisonOperator comparison, Function<Vector5, Scalar> right)
        : this(left.Subtract(right), comparison)
    {
    }

    public ImplicitScalarFunction5D(Func<Vector5, Scalar> left, ComparisonOperator comparison, Func<Vector5, Scalar> right)
        : this(new Function<Vector5, Scalar>(left), comparison, new Function<Vector5, Scalar>(right))
    {
    }

    public ImplicitScalarFunction5D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function)
        : this(v => function(v[0], v[1], v[2], v[3], v[4]))
    {
    }

    public ImplicitScalarFunction5D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison)
        : this(v => function(v[0], v[1], v[2], v[3], v[4]), comparison)
    {
    }

    public ImplicitScalarFunction5D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(v => function(v[0], v[1], v[2], v[3], v[4]), comparison, value)
    {
    }

    public ImplicitScalarFunction5D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> left, ComparisonOperator comparison, Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> right)
        : this(v => left(v[0], v[1], v[2], v[3], v[4]), comparison, v => right(v[0], v[1], v[2], v[3], v[4]))
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4) => Evaluate(x0, x1, x2, x3, x4, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3, x4), tolerance);

    public static ImplicitScalarFunction5D StretchBlend(ImplicitScalarFunction5D first, ImplicitScalarFunction5D second, Scalar blend_factor)
    {
        blend_factor = blend_factor.Clamp();

        return new(xy =>
            (1 - xy.Length.Multiply(blend_factor)).Max(Scalar.Zero).Multiply(first.ExplicitFunction.Evaluate(xy)) +
            xy.Length.Multiply(blend_factor).Min(Scalar.One).Multiply(second.ExplicitFunction.Evaluate(xy)),
            Combine(first.ComparisonOperator, second.ComparisonOperator)
        );
    }

    public ImplicitScalarFunction5D Negate() => new(v => ExplicitFunction.Evaluate(-v), ComparisonOperator);

    public ImplicitScalarFunction5D Shift(Vector5 offset) => new(v => ExplicitFunction.Evaluate(v - offset), ComparisonOperator);

    public ImplicitScalarFunction5D Scale(Scalar factor) => new(v => ExplicitFunction.Evaluate(v / factor), ComparisonOperator);

    public static ImplicitScalarFunction5D operator +(ImplicitScalarFunction5D function) => function;

    public static ImplicitScalarFunction5D operator -(ImplicitScalarFunction5D function) => function.Negate();

    public static ImplicitScalarFunction5D operator +(Vector5 offset, ImplicitScalarFunction5D function) => function.Shift(offset);

    public static ImplicitScalarFunction5D operator +(ImplicitScalarFunction5D function, Vector5 offset) => function.Shift(offset);

    public static ImplicitScalarFunction5D operator -(ImplicitScalarFunction5D function, Vector5 offset) => function.Shift(-offset);

    public static ImplicitScalarFunction5D operator *(Scalar scale, ImplicitScalarFunction5D function) => function.Scale(scale);

    public static ImplicitScalarFunction5D operator *(ImplicitScalarFunction5D function, Scalar scale) => function.Scale(scale);

    public static ImplicitScalarFunction5D operator /(ImplicitScalarFunction5D function, Scalar scale) => function.Scale(scale.MultiplicativeInverse);
}

public partial class ImplicitScalarFunction6D
    : ImplicitFunction<Vector6>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5] => Evaluate(x0, x1, x2, x3, x4, x5);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar tolerance] => Evaluate(x0, x1, x2, x3, x4, x5, tolerance);


    public ImplicitScalarFunction6D(ImplicitFunction<Vector6> function)
        : this(function.ExplicitFunction, function.ComparisonOperator)
    {
    }

    public ImplicitScalarFunction6D(Function<Vector6, Scalar> function)
        : this(function, ComparisonOperator.EqualTo)
    {
    }

    public ImplicitScalarFunction6D(Func<Vector6, Scalar> function)
        : this(new Function<Vector6, Scalar>(function))
    {
    }

    public ImplicitScalarFunction6D(Function<Vector6, Scalar> function, ComparisonOperator comparison)
        : base(function, comparison)
    {
    }

    public ImplicitScalarFunction6D(Func<Vector6, Scalar> function, ComparisonOperator comparison)
        : this(new Function<Vector6, Scalar>(function), comparison)
    {
    }

    public ImplicitScalarFunction6D(Function<Vector6, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(function.Subtract(value), comparison)
    {
    }

    public ImplicitScalarFunction6D(Func<Vector6, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(new Function<Vector6, Scalar>(function), comparison, value)
    {
    }

    public ImplicitScalarFunction6D(Function<Vector6, Scalar> left, ComparisonOperator comparison, Function<Vector6, Scalar> right)
        : this(left.Subtract(right), comparison)
    {
    }

    public ImplicitScalarFunction6D(Func<Vector6, Scalar> left, ComparisonOperator comparison, Func<Vector6, Scalar> right)
        : this(new Function<Vector6, Scalar>(left), comparison, new Function<Vector6, Scalar>(right))
    {
    }

    public ImplicitScalarFunction6D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5]))
    {
    }

    public ImplicitScalarFunction6D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5]), comparison)
    {
    }

    public ImplicitScalarFunction6D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5]), comparison, value)
    {
    }

    public ImplicitScalarFunction6D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> left, ComparisonOperator comparison, Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> right)
        : this(v => left(v[0], v[1], v[2], v[3], v[4], v[5]), comparison, v => right(v[0], v[1], v[2], v[3], v[4], v[5]))
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5) => Evaluate(x0, x1, x2, x3, x4, x5, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3, x4, x5), tolerance);

    public static ImplicitScalarFunction6D StretchBlend(ImplicitScalarFunction6D first, ImplicitScalarFunction6D second, Scalar blend_factor)
    {
        blend_factor = blend_factor.Clamp();

        return new(xy =>
            (1 - xy.Length.Multiply(blend_factor)).Max(Scalar.Zero).Multiply(first.ExplicitFunction.Evaluate(xy)) +
            xy.Length.Multiply(blend_factor).Min(Scalar.One).Multiply(second.ExplicitFunction.Evaluate(xy)),
            Combine(first.ComparisonOperator, second.ComparisonOperator)
        );
    }

    public ImplicitScalarFunction6D Negate() => new(v => ExplicitFunction.Evaluate(-v), ComparisonOperator);

    public ImplicitScalarFunction6D Shift(Vector6 offset) => new(v => ExplicitFunction.Evaluate(v - offset), ComparisonOperator);

    public ImplicitScalarFunction6D Scale(Scalar factor) => new(v => ExplicitFunction.Evaluate(v / factor), ComparisonOperator);

    public static ImplicitScalarFunction6D operator +(ImplicitScalarFunction6D function) => function;

    public static ImplicitScalarFunction6D operator -(ImplicitScalarFunction6D function) => function.Negate();

    public static ImplicitScalarFunction6D operator +(Vector6 offset, ImplicitScalarFunction6D function) => function.Shift(offset);

    public static ImplicitScalarFunction6D operator +(ImplicitScalarFunction6D function, Vector6 offset) => function.Shift(offset);

    public static ImplicitScalarFunction6D operator -(ImplicitScalarFunction6D function, Vector6 offset) => function.Shift(-offset);

    public static ImplicitScalarFunction6D operator *(Scalar scale, ImplicitScalarFunction6D function) => function.Scale(scale);

    public static ImplicitScalarFunction6D operator *(ImplicitScalarFunction6D function, Scalar scale) => function.Scale(scale);

    public static ImplicitScalarFunction6D operator /(ImplicitScalarFunction6D function, Scalar scale) => function.Scale(scale.MultiplicativeInverse);
}

public partial class ImplicitScalarFunction7D
    : ImplicitFunction<Vector7>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6] => Evaluate(x0, x1, x2, x3, x4, x5, x6);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar tolerance] => Evaluate(x0, x1, x2, x3, x4, x5, x6, tolerance);


    public ImplicitScalarFunction7D(ImplicitFunction<Vector7> function)
        : this(function.ExplicitFunction, function.ComparisonOperator)
    {
    }

    public ImplicitScalarFunction7D(Function<Vector7, Scalar> function)
        : this(function, ComparisonOperator.EqualTo)
    {
    }

    public ImplicitScalarFunction7D(Func<Vector7, Scalar> function)
        : this(new Function<Vector7, Scalar>(function))
    {
    }

    public ImplicitScalarFunction7D(Function<Vector7, Scalar> function, ComparisonOperator comparison)
        : base(function, comparison)
    {
    }

    public ImplicitScalarFunction7D(Func<Vector7, Scalar> function, ComparisonOperator comparison)
        : this(new Function<Vector7, Scalar>(function), comparison)
    {
    }

    public ImplicitScalarFunction7D(Function<Vector7, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(function.Subtract(value), comparison)
    {
    }

    public ImplicitScalarFunction7D(Func<Vector7, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(new Function<Vector7, Scalar>(function), comparison, value)
    {
    }

    public ImplicitScalarFunction7D(Function<Vector7, Scalar> left, ComparisonOperator comparison, Function<Vector7, Scalar> right)
        : this(left.Subtract(right), comparison)
    {
    }

    public ImplicitScalarFunction7D(Func<Vector7, Scalar> left, ComparisonOperator comparison, Func<Vector7, Scalar> right)
        : this(new Function<Vector7, Scalar>(left), comparison, new Function<Vector7, Scalar>(right))
    {
    }

    public ImplicitScalarFunction7D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5], v[6]))
    {
    }

    public ImplicitScalarFunction7D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5], v[6]), comparison)
    {
    }

    public ImplicitScalarFunction7D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5], v[6]), comparison, value)
    {
    }

    public ImplicitScalarFunction7D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> left, ComparisonOperator comparison, Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> right)
        : this(v => left(v[0], v[1], v[2], v[3], v[4], v[5], v[6]), comparison, v => right(v[0], v[1], v[2], v[3], v[4], v[5], v[6]))
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6) => Evaluate(x0, x1, x2, x3, x4, x5, x6, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3, x4, x5, x6), tolerance);

    public static ImplicitScalarFunction7D StretchBlend(ImplicitScalarFunction7D first, ImplicitScalarFunction7D second, Scalar blend_factor)
    {
        blend_factor = blend_factor.Clamp();

        return new(xy =>
            (1 - xy.Length.Multiply(blend_factor)).Max(Scalar.Zero).Multiply(first.ExplicitFunction.Evaluate(xy)) +
            xy.Length.Multiply(blend_factor).Min(Scalar.One).Multiply(second.ExplicitFunction.Evaluate(xy)),
            Combine(first.ComparisonOperator, second.ComparisonOperator)
        );
    }

    public ImplicitScalarFunction7D Negate() => new(v => ExplicitFunction.Evaluate(-v), ComparisonOperator);

    public ImplicitScalarFunction7D Shift(Vector7 offset) => new(v => ExplicitFunction.Evaluate(v - offset), ComparisonOperator);

    public ImplicitScalarFunction7D Scale(Scalar factor) => new(v => ExplicitFunction.Evaluate(v / factor), ComparisonOperator);

    public static ImplicitScalarFunction7D operator +(ImplicitScalarFunction7D function) => function;

    public static ImplicitScalarFunction7D operator -(ImplicitScalarFunction7D function) => function.Negate();

    public static ImplicitScalarFunction7D operator +(Vector7 offset, ImplicitScalarFunction7D function) => function.Shift(offset);

    public static ImplicitScalarFunction7D operator +(ImplicitScalarFunction7D function, Vector7 offset) => function.Shift(offset);

    public static ImplicitScalarFunction7D operator -(ImplicitScalarFunction7D function, Vector7 offset) => function.Shift(-offset);

    public static ImplicitScalarFunction7D operator *(Scalar scale, ImplicitScalarFunction7D function) => function.Scale(scale);

    public static ImplicitScalarFunction7D operator *(ImplicitScalarFunction7D function, Scalar scale) => function.Scale(scale);

    public static ImplicitScalarFunction7D operator /(ImplicitScalarFunction7D function, Scalar scale) => function.Scale(scale.MultiplicativeInverse);
}

public partial class ImplicitScalarFunction8D
    : ImplicitFunction<Vector8>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7] => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar tolerance] => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, tolerance);


    public ImplicitScalarFunction8D(ImplicitFunction<Vector8> function)
        : this(function.ExplicitFunction, function.ComparisonOperator)
    {
    }

    public ImplicitScalarFunction8D(Function<Vector8, Scalar> function)
        : this(function, ComparisonOperator.EqualTo)
    {
    }

    public ImplicitScalarFunction8D(Func<Vector8, Scalar> function)
        : this(new Function<Vector8, Scalar>(function))
    {
    }

    public ImplicitScalarFunction8D(Function<Vector8, Scalar> function, ComparisonOperator comparison)
        : base(function, comparison)
    {
    }

    public ImplicitScalarFunction8D(Func<Vector8, Scalar> function, ComparisonOperator comparison)
        : this(new Function<Vector8, Scalar>(function), comparison)
    {
    }

    public ImplicitScalarFunction8D(Function<Vector8, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(function.Subtract(value), comparison)
    {
    }

    public ImplicitScalarFunction8D(Func<Vector8, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(new Function<Vector8, Scalar>(function), comparison, value)
    {
    }

    public ImplicitScalarFunction8D(Function<Vector8, Scalar> left, ComparisonOperator comparison, Function<Vector8, Scalar> right)
        : this(left.Subtract(right), comparison)
    {
    }

    public ImplicitScalarFunction8D(Func<Vector8, Scalar> left, ComparisonOperator comparison, Func<Vector8, Scalar> right)
        : this(new Function<Vector8, Scalar>(left), comparison, new Function<Vector8, Scalar>(right))
    {
    }

    public ImplicitScalarFunction8D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]))
    {
    }

    public ImplicitScalarFunction8D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]), comparison)
    {
    }

    public ImplicitScalarFunction8D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]), comparison, value)
    {
    }

    public ImplicitScalarFunction8D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> left, ComparisonOperator comparison, Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> right)
        : this(v => left(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]), comparison, v => right(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]))
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7) => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3, x4, x5, x6, x7), tolerance);

    public static ImplicitScalarFunction8D StretchBlend(ImplicitScalarFunction8D first, ImplicitScalarFunction8D second, Scalar blend_factor)
    {
        blend_factor = blend_factor.Clamp();

        return new(xy =>
            (1 - xy.Length.Multiply(blend_factor)).Max(Scalar.Zero).Multiply(first.ExplicitFunction.Evaluate(xy)) +
            xy.Length.Multiply(blend_factor).Min(Scalar.One).Multiply(second.ExplicitFunction.Evaluate(xy)),
            Combine(first.ComparisonOperator, second.ComparisonOperator)
        );
    }

    public ImplicitScalarFunction8D Negate() => new(v => ExplicitFunction.Evaluate(-v), ComparisonOperator);

    public ImplicitScalarFunction8D Shift(Vector8 offset) => new(v => ExplicitFunction.Evaluate(v - offset), ComparisonOperator);

    public ImplicitScalarFunction8D Scale(Scalar factor) => new(v => ExplicitFunction.Evaluate(v / factor), ComparisonOperator);

    public static ImplicitScalarFunction8D operator +(ImplicitScalarFunction8D function) => function;

    public static ImplicitScalarFunction8D operator -(ImplicitScalarFunction8D function) => function.Negate();

    public static ImplicitScalarFunction8D operator +(Vector8 offset, ImplicitScalarFunction8D function) => function.Shift(offset);

    public static ImplicitScalarFunction8D operator +(ImplicitScalarFunction8D function, Vector8 offset) => function.Shift(offset);

    public static ImplicitScalarFunction8D operator -(ImplicitScalarFunction8D function, Vector8 offset) => function.Shift(-offset);

    public static ImplicitScalarFunction8D operator *(Scalar scale, ImplicitScalarFunction8D function) => function.Scale(scale);

    public static ImplicitScalarFunction8D operator *(ImplicitScalarFunction8D function, Scalar scale) => function.Scale(scale);

    public static ImplicitScalarFunction8D operator /(ImplicitScalarFunction8D function, Scalar scale) => function.Scale(scale.MultiplicativeInverse);
}

public partial class ImplicitScalarFunction9D
    : ImplicitFunction<Vector9>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8] => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8, Scalar tolerance] => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, x8, tolerance);


    public ImplicitScalarFunction9D(ImplicitFunction<Vector9> function)
        : this(function.ExplicitFunction, function.ComparisonOperator)
    {
    }

    public ImplicitScalarFunction9D(Function<Vector9, Scalar> function)
        : this(function, ComparisonOperator.EqualTo)
    {
    }

    public ImplicitScalarFunction9D(Func<Vector9, Scalar> function)
        : this(new Function<Vector9, Scalar>(function))
    {
    }

    public ImplicitScalarFunction9D(Function<Vector9, Scalar> function, ComparisonOperator comparison)
        : base(function, comparison)
    {
    }

    public ImplicitScalarFunction9D(Func<Vector9, Scalar> function, ComparisonOperator comparison)
        : this(new Function<Vector9, Scalar>(function), comparison)
    {
    }

    public ImplicitScalarFunction9D(Function<Vector9, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(function.Subtract(value), comparison)
    {
    }

    public ImplicitScalarFunction9D(Func<Vector9, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(new Function<Vector9, Scalar>(function), comparison, value)
    {
    }

    public ImplicitScalarFunction9D(Function<Vector9, Scalar> left, ComparisonOperator comparison, Function<Vector9, Scalar> right)
        : this(left.Subtract(right), comparison)
    {
    }

    public ImplicitScalarFunction9D(Func<Vector9, Scalar> left, ComparisonOperator comparison, Func<Vector9, Scalar> right)
        : this(new Function<Vector9, Scalar>(left), comparison, new Function<Vector9, Scalar>(right))
    {
    }

    public ImplicitScalarFunction9D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8]))
    {
    }

    public ImplicitScalarFunction9D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8]), comparison)
    {
    }

    public ImplicitScalarFunction9D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8]), comparison, value)
    {
    }

    public ImplicitScalarFunction9D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> left, ComparisonOperator comparison, Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> right)
        : this(v => left(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8]), comparison, v => right(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8]))
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8) => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, x8, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3, x4, x5, x6, x7, x8), tolerance);

    public static ImplicitScalarFunction9D StretchBlend(ImplicitScalarFunction9D first, ImplicitScalarFunction9D second, Scalar blend_factor)
    {
        blend_factor = blend_factor.Clamp();

        return new(xy =>
            (1 - xy.Length.Multiply(blend_factor)).Max(Scalar.Zero).Multiply(first.ExplicitFunction.Evaluate(xy)) +
            xy.Length.Multiply(blend_factor).Min(Scalar.One).Multiply(second.ExplicitFunction.Evaluate(xy)),
            Combine(first.ComparisonOperator, second.ComparisonOperator)
        );
    }

    public ImplicitScalarFunction9D Negate() => new(v => ExplicitFunction.Evaluate(-v), ComparisonOperator);

    public ImplicitScalarFunction9D Shift(Vector9 offset) => new(v => ExplicitFunction.Evaluate(v - offset), ComparisonOperator);

    public ImplicitScalarFunction9D Scale(Scalar factor) => new(v => ExplicitFunction.Evaluate(v / factor), ComparisonOperator);

    public static ImplicitScalarFunction9D operator +(ImplicitScalarFunction9D function) => function;

    public static ImplicitScalarFunction9D operator -(ImplicitScalarFunction9D function) => function.Negate();

    public static ImplicitScalarFunction9D operator +(Vector9 offset, ImplicitScalarFunction9D function) => function.Shift(offset);

    public static ImplicitScalarFunction9D operator +(ImplicitScalarFunction9D function, Vector9 offset) => function.Shift(offset);

    public static ImplicitScalarFunction9D operator -(ImplicitScalarFunction9D function, Vector9 offset) => function.Shift(-offset);

    public static ImplicitScalarFunction9D operator *(Scalar scale, ImplicitScalarFunction9D function) => function.Scale(scale);

    public static ImplicitScalarFunction9D operator *(ImplicitScalarFunction9D function, Scalar scale) => function.Scale(scale);

    public static ImplicitScalarFunction9D operator /(ImplicitScalarFunction9D function, Scalar scale) => function.Scale(scale.MultiplicativeInverse);
}

public partial class ImplicitScalarFunction10D
    : ImplicitFunction<Vector10>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8, Scalar x9] => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8, Scalar x9, Scalar tolerance] => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, tolerance);


    public ImplicitScalarFunction10D(ImplicitFunction<Vector10> function)
        : this(function.ExplicitFunction, function.ComparisonOperator)
    {
    }

    public ImplicitScalarFunction10D(Function<Vector10, Scalar> function)
        : this(function, ComparisonOperator.EqualTo)
    {
    }

    public ImplicitScalarFunction10D(Func<Vector10, Scalar> function)
        : this(new Function<Vector10, Scalar>(function))
    {
    }

    public ImplicitScalarFunction10D(Function<Vector10, Scalar> function, ComparisonOperator comparison)
        : base(function, comparison)
    {
    }

    public ImplicitScalarFunction10D(Func<Vector10, Scalar> function, ComparisonOperator comparison)
        : this(new Function<Vector10, Scalar>(function), comparison)
    {
    }

    public ImplicitScalarFunction10D(Function<Vector10, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(function.Subtract(value), comparison)
    {
    }

    public ImplicitScalarFunction10D(Func<Vector10, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(new Function<Vector10, Scalar>(function), comparison, value)
    {
    }

    public ImplicitScalarFunction10D(Function<Vector10, Scalar> left, ComparisonOperator comparison, Function<Vector10, Scalar> right)
        : this(left.Subtract(right), comparison)
    {
    }

    public ImplicitScalarFunction10D(Func<Vector10, Scalar> left, ComparisonOperator comparison, Func<Vector10, Scalar> right)
        : this(new Function<Vector10, Scalar>(left), comparison, new Function<Vector10, Scalar>(right))
    {
    }

    public ImplicitScalarFunction10D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8], v[9]))
    {
    }

    public ImplicitScalarFunction10D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8], v[9]), comparison)
    {
    }

    public ImplicitScalarFunction10D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> function, ComparisonOperator comparison, Scalar value)
        : this(v => function(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8], v[9]), comparison, value)
    {
    }

    public ImplicitScalarFunction10D(Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> left, ComparisonOperator comparison, Func<Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar, Scalar> right)
        : this(v => left(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8], v[9]), comparison, v => right(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8], v[9]))
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8, Scalar x9) => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8, Scalar x9, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9), tolerance);

    public static ImplicitScalarFunction10D StretchBlend(ImplicitScalarFunction10D first, ImplicitScalarFunction10D second, Scalar blend_factor)
    {
        blend_factor = blend_factor.Clamp();

        return new(xy =>
            (1 - xy.Length.Multiply(blend_factor)).Max(Scalar.Zero).Multiply(first.ExplicitFunction.Evaluate(xy)) +
            xy.Length.Multiply(blend_factor).Min(Scalar.One).Multiply(second.ExplicitFunction.Evaluate(xy)),
            Combine(first.ComparisonOperator, second.ComparisonOperator)
        );
    }

    public ImplicitScalarFunction10D Negate() => new(v => ExplicitFunction.Evaluate(-v), ComparisonOperator);

    public ImplicitScalarFunction10D Shift(Vector10 offset) => new(v => ExplicitFunction.Evaluate(v - offset), ComparisonOperator);

    public ImplicitScalarFunction10D Scale(Scalar factor) => new(v => ExplicitFunction.Evaluate(v / factor), ComparisonOperator);

    public static ImplicitScalarFunction10D operator +(ImplicitScalarFunction10D function) => function;

    public static ImplicitScalarFunction10D operator -(ImplicitScalarFunction10D function) => function.Negate();

    public static ImplicitScalarFunction10D operator +(Vector10 offset, ImplicitScalarFunction10D function) => function.Shift(offset);

    public static ImplicitScalarFunction10D operator +(ImplicitScalarFunction10D function, Vector10 offset) => function.Shift(offset);

    public static ImplicitScalarFunction10D operator -(ImplicitScalarFunction10D function, Vector10 offset) => function.Shift(-offset);

    public static ImplicitScalarFunction10D operator *(Scalar scale, ImplicitScalarFunction10D function) => function.Scale(scale);

    public static ImplicitScalarFunction10D operator *(ImplicitScalarFunction10D function, Scalar scale) => function.Scale(scale);

    public static ImplicitScalarFunction10D operator /(ImplicitScalarFunction10D function, Scalar scale) => function.Scale(scale.MultiplicativeInverse);
}
