
///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED 2022-04-16 13:11:40.768975              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

#nullable enable

using System;

using Unknown6656.Mathematics.LinearAlgebra;

namespace Unknown6656.Mathematics.Analysis;


public partial class ImplicitScalarFunction2D
    : ImplicitFunction<Vector2>
{
    public bool this[Scalar x0, Scalar x1] => Evaluate(x0, x1);

    public bool this[Scalar x0, Scalar x1, Scalar tolerance] => Evaluate(x0, x1, tolerance);


    public ImplicitScalarFunction2D(Function<Vector2, Scalar> left, ComparisonOperator comparison, Function<Vector2, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public ImplicitScalarFunction2D(Func<Vector2, Scalar> left, ComparisonOperator comparison, Func<Vector2, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1) => Evaluate(x0, x1, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar tolerance) => base.Evaluate(new(x0, x1), tolerance);
}
public partial class ImplicitScalarFunction3D
    : ImplicitFunction<Vector3>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2] => Evaluate(x0, x1, x2);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar tolerance] => Evaluate(x0, x1, x2, tolerance);


    public ImplicitScalarFunction3D(Function<Vector3, Scalar> left, ComparisonOperator comparison, Function<Vector3, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public ImplicitScalarFunction3D(Func<Vector3, Scalar> left, ComparisonOperator comparison, Func<Vector3, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2) => Evaluate(x0, x1, x2, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar tolerance) => base.Evaluate(new(x0, x1, x2), tolerance);
}
public partial class ImplicitScalarFunction4D
    : ImplicitFunction<Vector4>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3] => Evaluate(x0, x1, x2, x3);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar tolerance] => Evaluate(x0, x1, x2, x3, tolerance);


    public ImplicitScalarFunction4D(Function<Vector4, Scalar> left, ComparisonOperator comparison, Function<Vector4, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public ImplicitScalarFunction4D(Func<Vector4, Scalar> left, ComparisonOperator comparison, Func<Vector4, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3) => Evaluate(x0, x1, x2, x3, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3), tolerance);
}
public partial class ImplicitScalarFunction5D
    : ImplicitFunction<Vector5>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4] => Evaluate(x0, x1, x2, x3, x4);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar tolerance] => Evaluate(x0, x1, x2, x3, x4, tolerance);


    public ImplicitScalarFunction5D(Function<Vector5, Scalar> left, ComparisonOperator comparison, Function<Vector5, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public ImplicitScalarFunction5D(Func<Vector5, Scalar> left, ComparisonOperator comparison, Func<Vector5, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4) => Evaluate(x0, x1, x2, x3, x4, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3, x4), tolerance);
}
public partial class ImplicitScalarFunction6D
    : ImplicitFunction<Vector6>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5] => Evaluate(x0, x1, x2, x3, x4, x5);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar tolerance] => Evaluate(x0, x1, x2, x3, x4, x5, tolerance);


    public ImplicitScalarFunction6D(Function<Vector6, Scalar> left, ComparisonOperator comparison, Function<Vector6, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public ImplicitScalarFunction6D(Func<Vector6, Scalar> left, ComparisonOperator comparison, Func<Vector6, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5) => Evaluate(x0, x1, x2, x3, x4, x5, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3, x4, x5), tolerance);
}
public partial class ImplicitScalarFunction7D
    : ImplicitFunction<Vector7>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6] => Evaluate(x0, x1, x2, x3, x4, x5, x6);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar tolerance] => Evaluate(x0, x1, x2, x3, x4, x5, x6, tolerance);


    public ImplicitScalarFunction7D(Function<Vector7, Scalar> left, ComparisonOperator comparison, Function<Vector7, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public ImplicitScalarFunction7D(Func<Vector7, Scalar> left, ComparisonOperator comparison, Func<Vector7, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6) => Evaluate(x0, x1, x2, x3, x4, x5, x6, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3, x4, x5, x6), tolerance);
}
public partial class ImplicitScalarFunction8D
    : ImplicitFunction<Vector8>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7] => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar tolerance] => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, tolerance);


    public ImplicitScalarFunction8D(Function<Vector8, Scalar> left, ComparisonOperator comparison, Function<Vector8, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public ImplicitScalarFunction8D(Func<Vector8, Scalar> left, ComparisonOperator comparison, Func<Vector8, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7) => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3, x4, x5, x6, x7), tolerance);
}
public partial class ImplicitScalarFunction9D
    : ImplicitFunction<Vector9>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8] => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8, Scalar tolerance] => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, x8, tolerance);


    public ImplicitScalarFunction9D(Function<Vector9, Scalar> left, ComparisonOperator comparison, Function<Vector9, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public ImplicitScalarFunction9D(Func<Vector9, Scalar> left, ComparisonOperator comparison, Func<Vector9, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8) => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, x8, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3, x4, x5, x6, x7, x8), tolerance);
}
public partial class ImplicitScalarFunction10D
    : ImplicitFunction<Vector10>
{
    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8, Scalar x9] => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

    public bool this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8, Scalar x9, Scalar tolerance] => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, tolerance);


    public ImplicitScalarFunction10D(Function<Vector10, Scalar> left, ComparisonOperator comparison, Function<Vector10, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public ImplicitScalarFunction10D(Func<Vector10, Scalar> left, ComparisonOperator comparison, Func<Vector10, Scalar> right)
        : base(left, comparison, right)
    {
    }

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8, Scalar x9) => Evaluate(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, Scalar.ComputationalEpsilon);

    public virtual bool Evaluate(Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8, Scalar x9, Scalar tolerance) => base.Evaluate(new(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9), tolerance);
}
