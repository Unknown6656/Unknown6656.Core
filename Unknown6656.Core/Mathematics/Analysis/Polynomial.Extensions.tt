<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>

///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffffff")#>              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

#nullable enable

using System;

using Unknown6656.Mathematics.LinearAlgebra;

namespace Unknown6656.Mathematics.Analysis;


<#
    const string baseiface = "IMatrix";
    int maxdim = 4;

    try
    {
        string path = Host.ResolvePath("../maxdim.txt");

        maxdim = int.Parse(File.ReadAllText(path).Trim()) + 1;
    }
    catch { }

    string uniontype = "Union<Scalar, " + string.Join(", ", Enumerable.Range(2, maxdim - 2).Select(i => "Matrix" + i)) + ">";
#>

public partial class Polynomial
{
    /// <summary>
    /// Returns the Hurwitz Matrix associated with this polynomial
    /// </summary>
    public <#=uniontype#> HurwitzMatrix => Degree switch
    {
        <= 0 => throw new InvalidOperationException("The Hurwitz matrix is not defined for polynomials of degree zero."),
        1 => (<#=uniontype#>)(Scalar)LeadingCoefficient,
<#
    for (int i = 2; i < maxdim; ++i)
    {
#>
        <#=i#> => (<#=uniontype#>)new Matrix<#=i#>(
<#
        for (int j = 0; j < i; ++j)
        {
            string s = "";
            int ident = j / 2;
            int offst = (j + 1) % 2;

            for (int k = 0; k < i; ++k)
            {
                int v = k * 2 + offst - 2 * ident;

                if (k < ident || v > i)
                    s +=  "0,          ";
                else
                    s += $"_coefficients[{v,2}], ";
            }

            s = s.Trim();

            if (j == i - 1)
                s = s.TrimEnd(',');
#>
                <#=s#>
<#
        }
#>
            ),
<#
    }
#>
        _ => throw new NotImplementedException($"The Hurwitz matrix has not (yet) been implemented for a degree of {Degree}.") // TODO!
    };
<#
    for (int i = 2; i < 64; ++i)
    {
        string s_type = string.Join(", ", Enumerable.Range(0, i).Select(x => $"Scalar _{x}"));
        string s_pars = string.Join(", ", Enumerable.Range(0, i).Select(x => $"t._{x}"));
#>

    /// <summary>
    /// Converts the given tuple of coefficients to the corresponding polynomial.
    /// The coefficients are passed in ascending exponential order, meaning that the i-th coefficient represents the factor for Xⁱ.
    /// </summary>
    /// <param name="t">Tuple of polynomial coefficients.</param>
    public static implicit operator Polynomial((<#=s_type#>) t) =>
        new(<#=s_pars#>);
<#
    }
#>
}
