<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffffff")#>              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

#nullable enable

using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System;

<#
    var algorithms = new (string typename, string clsname, int size)[]
    {
        ("MD5Hash", "MD5", 16),
        ("SHA1Hash", "SHA1", 20),
        ("SHA256Hash", "SHA256", 32),
        ("SHA384Hash", "SHA384", 48),
        ("SHA512Hash", "SHA512", 64),
     // ("RIPEMD160Hash", "RIPEMD160", 20),
    };
#>
namespace Unknown6656.Mathematics.Cryptography;


public static partial class HashFunction
{
<#
    foreach ((string typename, string clsname, _) in algorithms)
        WriteLine($"    public static {typename} {clsname} {{ get; }} = new();");
#>
}
<#
    foreach ((string typename, string clsname, int size) in algorithms)
    {
        var intname = '_' + clsname.ToLower();
#>

public sealed class <#=typename#>
    : HashFunction<<#=typename#>>
    , IDisposable
{
    private readonly <#=clsname#> <#=intname#>;

    public override int HashSize { get; } = <#=size#>;


    public <#=typename#>()
    {
        <#=intname#> = <#=clsname#>.Create();
        <#=intname#>.Initialize();
    }

    public void Dispose()
    {
        <#=intname#>.Clear();
        <#=intname#>.Dispose();
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override byte[] Hash(byte[] data) => <#=intname#>.ComputeHash(data);
}
<#
    }
#>
