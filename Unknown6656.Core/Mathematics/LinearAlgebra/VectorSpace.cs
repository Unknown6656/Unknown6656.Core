///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED 2022-09-05 11:00:09.726556              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Linq;
using System;


namespace Unknown6656.Mathematics.LinearAlgebra
{
    public class VectorSpace2
        : VectorSpace<VectorSpace2, Vector2, Scalar>
    {
        #region PROERTIES

        public static VectorSpace2 Empty => new VectorSpace2();

        public override Vector2 this[params Scalar[] coefficients]
        {
            get
            {
                if (coefficients.Length > 2)
                    throw new ArgumentOutOfRangeException($"A vector of the vector space '{nameof(VectorSpace2)}' can only contain a maximum of 2 coefficients.");

                Vector2 acc = default;

                for (int i = 0, l = Math.Min(coefficients.Length, Dimension); i < l; ++i)
                    acc += _basis[i] * coefficients[i];

                return acc;
            }
        }

        public Vector2 this[Scalar x0, Scalar x1] => this[new[] { x0, x1 }];

        public VectorSpace2 Orthogonalized => 
throw new NotImplementedException(); // TODO

        public VectorSpace2 Orthonormalized => Orthogonalized.Normalized;

        #endregion
        #region CONSTRUCTORS

        public VectorSpace2(IEnumerable<Vector2> basis)
            : base(basis)
        {
        }

        public VectorSpace2(params Vector2[] basis)
            : base(basis)
        {
        }

        #endregion
        #region INSTANCE METHODS

        public override bool Contains(Vector2 vector, out Vector2 coefficients)
        {
            coefficients = Vector2.Zero;

            if (vector.IsZero)
                return true;

            throw new NotImplementedException(); // TODO

            // Matrix2 m = Matrix2.FromColumns(_basis.Concat(Enumerable.Repeat(Vector2.Zero, 2 - _basis.Count)).ToArray());
            // 
            // coefficients = m.Solve(vector);
            // 
            // return ;
        }

        #endregion
        #region STATIC METHODS

        public static VectorSpace2 KrylovSpace(Vector2 vector, Matrix2 matrix)
        {
            Vector2[] basis = new Vector2[2];

            basis[0] = vector;

            for (int i = 1; i < 2; ++i)
                basis[i] = matrix * basis[i - 1];

            return new VectorSpace2(basis);
        }

        public static VectorSpace2 FromMatrixColumns(Matrix2 matrix) => FromVectors(matrix.Columns);

        public static VectorSpace2 FromMatrixRows(Matrix2 matrix) => FromVectors(matrix.Rows);

        #endregion
        #region OPERATORS

        public static implicit operator VectorSpace2(Vector2 v) => new VectorSpace2(v);

        #endregion
    }

    public class VectorSpace3
        : VectorSpace<VectorSpace3, Vector3, Scalar>
    {
        #region PROERTIES

        public static VectorSpace3 Empty => new VectorSpace3();

        public override Vector3 this[params Scalar[] coefficients]
        {
            get
            {
                if (coefficients.Length > 3)
                    throw new ArgumentOutOfRangeException($"A vector of the vector space '{nameof(VectorSpace3)}' can only contain a maximum of 3 coefficients.");

                Vector3 acc = default;

                for (int i = 0, l = Math.Min(coefficients.Length, Dimension); i < l; ++i)
                    acc += _basis[i] * coefficients[i];

                return acc;
            }
        }

        public Vector3 this[Scalar x0, Scalar x1, Scalar x2] => this[new[] { x0, x1, x2 }];

        public VectorSpace3 Orthogonalized => 
throw new NotImplementedException(); // TODO

        public VectorSpace3 Orthonormalized => Orthogonalized.Normalized;

        #endregion
        #region CONSTRUCTORS

        public VectorSpace3(IEnumerable<Vector3> basis)
            : base(basis)
        {
        }

        public VectorSpace3(params Vector3[] basis)
            : base(basis)
        {
        }

        #endregion
        #region INSTANCE METHODS

        public override bool Contains(Vector3 vector, out Vector3 coefficients)
        {
            coefficients = Vector3.Zero;

            if (vector.IsZero)
                return true;

            throw new NotImplementedException(); // TODO

            // Matrix3 m = Matrix3.FromColumns(_basis.Concat(Enumerable.Repeat(Vector3.Zero, 3 - _basis.Count)).ToArray());
            // 
            // coefficients = m.Solve(vector);
            // 
            // return ;
        }

        #endregion
        #region STATIC METHODS

        public static VectorSpace3 KrylovSpace(Vector3 vector, Matrix3 matrix)
        {
            Vector3[] basis = new Vector3[3];

            basis[0] = vector;

            for (int i = 1; i < 3; ++i)
                basis[i] = matrix * basis[i - 1];

            return new VectorSpace3(basis);
        }

        public static VectorSpace3 FromMatrixColumns(Matrix3 matrix) => FromVectors(matrix.Columns);

        public static VectorSpace3 FromMatrixRows(Matrix3 matrix) => FromVectors(matrix.Rows);

        #endregion
        #region OPERATORS

        public static implicit operator VectorSpace3(Vector3 v) => new VectorSpace3(v);

        #endregion
    }

    public class VectorSpace4
        : VectorSpace<VectorSpace4, Vector4, Scalar>
    {
        #region PROERTIES

        public static VectorSpace4 Empty => new VectorSpace4();

        public override Vector4 this[params Scalar[] coefficients]
        {
            get
            {
                if (coefficients.Length > 4)
                    throw new ArgumentOutOfRangeException($"A vector of the vector space '{nameof(VectorSpace4)}' can only contain a maximum of 4 coefficients.");

                Vector4 acc = default;

                for (int i = 0, l = Math.Min(coefficients.Length, Dimension); i < l; ++i)
                    acc += _basis[i] * coefficients[i];

                return acc;
            }
        }

        public Vector4 this[Scalar x0, Scalar x1, Scalar x2, Scalar x3] => this[new[] { x0, x1, x2, x3 }];

        public VectorSpace4 Orthogonalized => 
throw new NotImplementedException(); // TODO

        public VectorSpace4 Orthonormalized => Orthogonalized.Normalized;

        #endregion
        #region CONSTRUCTORS

        public VectorSpace4(IEnumerable<Vector4> basis)
            : base(basis)
        {
        }

        public VectorSpace4(params Vector4[] basis)
            : base(basis)
        {
        }

        #endregion
        #region INSTANCE METHODS

        public override bool Contains(Vector4 vector, out Vector4 coefficients)
        {
            coefficients = Vector4.Zero;

            if (vector.IsZero)
                return true;

            throw new NotImplementedException(); // TODO

            // Matrix4 m = Matrix4.FromColumns(_basis.Concat(Enumerable.Repeat(Vector4.Zero, 4 - _basis.Count)).ToArray());
            // 
            // coefficients = m.Solve(vector);
            // 
            // return ;
        }

        #endregion
        #region STATIC METHODS

        public static VectorSpace4 KrylovSpace(Vector4 vector, Matrix4 matrix)
        {
            Vector4[] basis = new Vector4[4];

            basis[0] = vector;

            for (int i = 1; i < 4; ++i)
                basis[i] = matrix * basis[i - 1];

            return new VectorSpace4(basis);
        }

        public static VectorSpace4 FromMatrixColumns(Matrix4 matrix) => FromVectors(matrix.Columns);

        public static VectorSpace4 FromMatrixRows(Matrix4 matrix) => FromVectors(matrix.Rows);

        #endregion
        #region OPERATORS

        public static implicit operator VectorSpace4(Vector4 v) => new VectorSpace4(v);

        #endregion
    }

    public class VectorSpace5
        : VectorSpace<VectorSpace5, Vector5, Scalar>
    {
        #region PROERTIES

        public static VectorSpace5 Empty => new VectorSpace5();

        public override Vector5 this[params Scalar[] coefficients]
        {
            get
            {
                if (coefficients.Length > 5)
                    throw new ArgumentOutOfRangeException($"A vector of the vector space '{nameof(VectorSpace5)}' can only contain a maximum of 5 coefficients.");

                Vector5 acc = default;

                for (int i = 0, l = Math.Min(coefficients.Length, Dimension); i < l; ++i)
                    acc += _basis[i] * coefficients[i];

                return acc;
            }
        }

        public Vector5 this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4] => this[new[] { x0, x1, x2, x3, x4 }];

        public VectorSpace5 Orthogonalized => 
throw new NotImplementedException(); // TODO

        public VectorSpace5 Orthonormalized => Orthogonalized.Normalized;

        #endregion
        #region CONSTRUCTORS

        public VectorSpace5(IEnumerable<Vector5> basis)
            : base(basis)
        {
        }

        public VectorSpace5(params Vector5[] basis)
            : base(basis)
        {
        }

        #endregion
        #region INSTANCE METHODS

        public override bool Contains(Vector5 vector, out Vector5 coefficients)
        {
            coefficients = Vector5.Zero;

            if (vector.IsZero)
                return true;

            throw new NotImplementedException(); // TODO

            // Matrix5 m = Matrix5.FromColumns(_basis.Concat(Enumerable.Repeat(Vector5.Zero, 5 - _basis.Count)).ToArray());
            // 
            // coefficients = m.Solve(vector);
            // 
            // return ;
        }

        #endregion
        #region STATIC METHODS

        public static VectorSpace5 KrylovSpace(Vector5 vector, Matrix5 matrix)
        {
            Vector5[] basis = new Vector5[5];

            basis[0] = vector;

            for (int i = 1; i < 5; ++i)
                basis[i] = matrix * basis[i - 1];

            return new VectorSpace5(basis);
        }

        public static VectorSpace5 FromMatrixColumns(Matrix5 matrix) => FromVectors(matrix.Columns);

        public static VectorSpace5 FromMatrixRows(Matrix5 matrix) => FromVectors(matrix.Rows);

        #endregion
        #region OPERATORS

        public static implicit operator VectorSpace5(Vector5 v) => new VectorSpace5(v);

        #endregion
    }

    public class VectorSpace6
        : VectorSpace<VectorSpace6, Vector6, Scalar>
    {
        #region PROERTIES

        public static VectorSpace6 Empty => new VectorSpace6();

        public override Vector6 this[params Scalar[] coefficients]
        {
            get
            {
                if (coefficients.Length > 6)
                    throw new ArgumentOutOfRangeException($"A vector of the vector space '{nameof(VectorSpace6)}' can only contain a maximum of 6 coefficients.");

                Vector6 acc = default;

                for (int i = 0, l = Math.Min(coefficients.Length, Dimension); i < l; ++i)
                    acc += _basis[i] * coefficients[i];

                return acc;
            }
        }

        public Vector6 this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5] => this[new[] { x0, x1, x2, x3, x4, x5 }];

        public VectorSpace6 Orthogonalized => 
throw new NotImplementedException(); // TODO

        public VectorSpace6 Orthonormalized => Orthogonalized.Normalized;

        #endregion
        #region CONSTRUCTORS

        public VectorSpace6(IEnumerable<Vector6> basis)
            : base(basis)
        {
        }

        public VectorSpace6(params Vector6[] basis)
            : base(basis)
        {
        }

        #endregion
        #region INSTANCE METHODS

        public override bool Contains(Vector6 vector, out Vector6 coefficients)
        {
            coefficients = Vector6.Zero;

            if (vector.IsZero)
                return true;

            throw new NotImplementedException(); // TODO

            // Matrix6 m = Matrix6.FromColumns(_basis.Concat(Enumerable.Repeat(Vector6.Zero, 6 - _basis.Count)).ToArray());
            // 
            // coefficients = m.Solve(vector);
            // 
            // return ;
        }

        #endregion
        #region STATIC METHODS

        public static VectorSpace6 KrylovSpace(Vector6 vector, Matrix6 matrix)
        {
            Vector6[] basis = new Vector6[6];

            basis[0] = vector;

            for (int i = 1; i < 6; ++i)
                basis[i] = matrix * basis[i - 1];

            return new VectorSpace6(basis);
        }

        public static VectorSpace6 FromMatrixColumns(Matrix6 matrix) => FromVectors(matrix.Columns);

        public static VectorSpace6 FromMatrixRows(Matrix6 matrix) => FromVectors(matrix.Rows);

        #endregion
        #region OPERATORS

        public static implicit operator VectorSpace6(Vector6 v) => new VectorSpace6(v);

        #endregion
    }

    public class VectorSpace7
        : VectorSpace<VectorSpace7, Vector7, Scalar>
    {
        #region PROERTIES

        public static VectorSpace7 Empty => new VectorSpace7();

        public override Vector7 this[params Scalar[] coefficients]
        {
            get
            {
                if (coefficients.Length > 7)
                    throw new ArgumentOutOfRangeException($"A vector of the vector space '{nameof(VectorSpace7)}' can only contain a maximum of 7 coefficients.");

                Vector7 acc = default;

                for (int i = 0, l = Math.Min(coefficients.Length, Dimension); i < l; ++i)
                    acc += _basis[i] * coefficients[i];

                return acc;
            }
        }

        public Vector7 this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6] => this[new[] { x0, x1, x2, x3, x4, x5, x6 }];

        public VectorSpace7 Orthogonalized => 
throw new NotImplementedException(); // TODO

        public VectorSpace7 Orthonormalized => Orthogonalized.Normalized;

        #endregion
        #region CONSTRUCTORS

        public VectorSpace7(IEnumerable<Vector7> basis)
            : base(basis)
        {
        }

        public VectorSpace7(params Vector7[] basis)
            : base(basis)
        {
        }

        #endregion
        #region INSTANCE METHODS

        public override bool Contains(Vector7 vector, out Vector7 coefficients)
        {
            coefficients = Vector7.Zero;

            if (vector.IsZero)
                return true;

            throw new NotImplementedException(); // TODO

            // Matrix7 m = Matrix7.FromColumns(_basis.Concat(Enumerable.Repeat(Vector7.Zero, 7 - _basis.Count)).ToArray());
            // 
            // coefficients = m.Solve(vector);
            // 
            // return ;
        }

        #endregion
        #region STATIC METHODS

        public static VectorSpace7 KrylovSpace(Vector7 vector, Matrix7 matrix)
        {
            Vector7[] basis = new Vector7[7];

            basis[0] = vector;

            for (int i = 1; i < 7; ++i)
                basis[i] = matrix * basis[i - 1];

            return new VectorSpace7(basis);
        }

        public static VectorSpace7 FromMatrixColumns(Matrix7 matrix) => FromVectors(matrix.Columns);

        public static VectorSpace7 FromMatrixRows(Matrix7 matrix) => FromVectors(matrix.Rows);

        #endregion
        #region OPERATORS

        public static implicit operator VectorSpace7(Vector7 v) => new VectorSpace7(v);

        #endregion
    }

    public class VectorSpace8
        : VectorSpace<VectorSpace8, Vector8, Scalar>
    {
        #region PROERTIES

        public static VectorSpace8 Empty => new VectorSpace8();

        public override Vector8 this[params Scalar[] coefficients]
        {
            get
            {
                if (coefficients.Length > 8)
                    throw new ArgumentOutOfRangeException($"A vector of the vector space '{nameof(VectorSpace8)}' can only contain a maximum of 8 coefficients.");

                Vector8 acc = default;

                for (int i = 0, l = Math.Min(coefficients.Length, Dimension); i < l; ++i)
                    acc += _basis[i] * coefficients[i];

                return acc;
            }
        }

        public Vector8 this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7] => this[new[] { x0, x1, x2, x3, x4, x5, x6, x7 }];

        public VectorSpace8 Orthogonalized => 
throw new NotImplementedException(); // TODO

        public VectorSpace8 Orthonormalized => Orthogonalized.Normalized;

        #endregion
        #region CONSTRUCTORS

        public VectorSpace8(IEnumerable<Vector8> basis)
            : base(basis)
        {
        }

        public VectorSpace8(params Vector8[] basis)
            : base(basis)
        {
        }

        #endregion
        #region INSTANCE METHODS

        public override bool Contains(Vector8 vector, out Vector8 coefficients)
        {
            coefficients = Vector8.Zero;

            if (vector.IsZero)
                return true;

            throw new NotImplementedException(); // TODO

            // Matrix8 m = Matrix8.FromColumns(_basis.Concat(Enumerable.Repeat(Vector8.Zero, 8 - _basis.Count)).ToArray());
            // 
            // coefficients = m.Solve(vector);
            // 
            // return ;
        }

        #endregion
        #region STATIC METHODS

        public static VectorSpace8 KrylovSpace(Vector8 vector, Matrix8 matrix)
        {
            Vector8[] basis = new Vector8[8];

            basis[0] = vector;

            for (int i = 1; i < 8; ++i)
                basis[i] = matrix * basis[i - 1];

            return new VectorSpace8(basis);
        }

        public static VectorSpace8 FromMatrixColumns(Matrix8 matrix) => FromVectors(matrix.Columns);

        public static VectorSpace8 FromMatrixRows(Matrix8 matrix) => FromVectors(matrix.Rows);

        #endregion
        #region OPERATORS

        public static implicit operator VectorSpace8(Vector8 v) => new VectorSpace8(v);

        #endregion
    }

    public class VectorSpace9
        : VectorSpace<VectorSpace9, Vector9, Scalar>
    {
        #region PROERTIES

        public static VectorSpace9 Empty => new VectorSpace9();

        public override Vector9 this[params Scalar[] coefficients]
        {
            get
            {
                if (coefficients.Length > 9)
                    throw new ArgumentOutOfRangeException($"A vector of the vector space '{nameof(VectorSpace9)}' can only contain a maximum of 9 coefficients.");

                Vector9 acc = default;

                for (int i = 0, l = Math.Min(coefficients.Length, Dimension); i < l; ++i)
                    acc += _basis[i] * coefficients[i];

                return acc;
            }
        }

        public Vector9 this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8] => this[new[] { x0, x1, x2, x3, x4, x5, x6, x7, x8 }];

        public VectorSpace9 Orthogonalized => 
throw new NotImplementedException(); // TODO

        public VectorSpace9 Orthonormalized => Orthogonalized.Normalized;

        #endregion
        #region CONSTRUCTORS

        public VectorSpace9(IEnumerable<Vector9> basis)
            : base(basis)
        {
        }

        public VectorSpace9(params Vector9[] basis)
            : base(basis)
        {
        }

        #endregion
        #region INSTANCE METHODS

        public override bool Contains(Vector9 vector, out Vector9 coefficients)
        {
            coefficients = Vector9.Zero;

            if (vector.IsZero)
                return true;

            throw new NotImplementedException(); // TODO

            // Matrix9 m = Matrix9.FromColumns(_basis.Concat(Enumerable.Repeat(Vector9.Zero, 9 - _basis.Count)).ToArray());
            // 
            // coefficients = m.Solve(vector);
            // 
            // return ;
        }

        #endregion
        #region STATIC METHODS

        public static VectorSpace9 KrylovSpace(Vector9 vector, Matrix9 matrix)
        {
            Vector9[] basis = new Vector9[9];

            basis[0] = vector;

            for (int i = 1; i < 9; ++i)
                basis[i] = matrix * basis[i - 1];

            return new VectorSpace9(basis);
        }

        public static VectorSpace9 FromMatrixColumns(Matrix9 matrix) => FromVectors(matrix.Columns);

        public static VectorSpace9 FromMatrixRows(Matrix9 matrix) => FromVectors(matrix.Rows);

        #endregion
        #region OPERATORS

        public static implicit operator VectorSpace9(Vector9 v) => new VectorSpace9(v);

        #endregion
    }

    public class VectorSpace10
        : VectorSpace<VectorSpace10, Vector10, Scalar>
    {
        #region PROERTIES

        public static VectorSpace10 Empty => new VectorSpace10();

        public override Vector10 this[params Scalar[] coefficients]
        {
            get
            {
                if (coefficients.Length > 10)
                    throw new ArgumentOutOfRangeException($"A vector of the vector space '{nameof(VectorSpace10)}' can only contain a maximum of 10 coefficients.");

                Vector10 acc = default;

                for (int i = 0, l = Math.Min(coefficients.Length, Dimension); i < l; ++i)
                    acc += _basis[i] * coefficients[i];

                return acc;
            }
        }

        public Vector10 this[Scalar x0, Scalar x1, Scalar x2, Scalar x3, Scalar x4, Scalar x5, Scalar x6, Scalar x7, Scalar x8, Scalar x9] => this[new[] { x0, x1, x2, x3, x4, x5, x6, x7, x8, x9 }];

        public VectorSpace10 Orthogonalized => 
throw new NotImplementedException(); // TODO

        public VectorSpace10 Orthonormalized => Orthogonalized.Normalized;

        #endregion
        #region CONSTRUCTORS

        public VectorSpace10(IEnumerable<Vector10> basis)
            : base(basis)
        {
        }

        public VectorSpace10(params Vector10[] basis)
            : base(basis)
        {
        }

        #endregion
        #region INSTANCE METHODS

        public override bool Contains(Vector10 vector, out Vector10 coefficients)
        {
            coefficients = Vector10.Zero;

            if (vector.IsZero)
                return true;

            throw new NotImplementedException(); // TODO

            // Matrix10 m = Matrix10.FromColumns(_basis.Concat(Enumerable.Repeat(Vector10.Zero, 10 - _basis.Count)).ToArray());
            // 
            // coefficients = m.Solve(vector);
            // 
            // return ;
        }

        #endregion
        #region STATIC METHODS

        public static VectorSpace10 KrylovSpace(Vector10 vector, Matrix10 matrix)
        {
            Vector10[] basis = new Vector10[10];

            basis[0] = vector;

            for (int i = 1; i < 10; ++i)
                basis[i] = matrix * basis[i - 1];

            return new VectorSpace10(basis);
        }

        public static VectorSpace10 FromMatrixColumns(Matrix10 matrix) => FromVectors(matrix.Columns);

        public static VectorSpace10 FromMatrixRows(Matrix10 matrix) => FromVectors(matrix.Rows);

        #endregion
        #region OPERATORS

        public static implicit operator VectorSpace10(Vector10 v) => new VectorSpace10(v);

        #endregion
    }

}
