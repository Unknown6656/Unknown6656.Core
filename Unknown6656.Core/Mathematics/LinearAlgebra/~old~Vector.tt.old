<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffffff")#>              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

#define READONLY

#nullable enable

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System;

using MathLibrary.Analysis;

using static System.Math;


namespace MathLibrary.LinearAlgebra
{
<#
    const string comp = "XYZWVU";
    int maxdim = 11;

    try
    {
        string path = Host.ResolvePath("../maxdim.txt");

        maxdim = int.Parse(File.ReadAllText(path).Trim()) + 1;
    }
    catch { }

    IEnumerable<int> r(int f, int t) => Enumerable.Range(f, t);

    for (int dim = 2; dim < maxdim; ++dim)
    {
        string matname = "Matrix" + dim;
        string typename = "Vector" + dim;
        string[] comps = r(0, dim).Select(i => "_" + i).ToArray();
#>
    #region <#=typename#>

    /// <summary>
    /// Represents a <#=dim#>-dimensional vector.
    /// </summary>
    /// <inheritdoc cref="IMatrix{M,V,S}"/>
    [StructLayout(LayoutKind.Sequential), NativeCppClass]
#if READONLY
    readonly
#endif
    public partial struct <#=typename#>
        : IVector<<#=matname#>, <#=typename#>, Scalar>
        , IEnumerable<Scalar>
#if READONLY
    {
<#
        for (int i = 0; i < dim; ++i)
        {
#>
        private readonly Scalar <#=comps[i]#>;
<#
        }
#>
#else
        , INative
    {
<#
        for (int i = 0; i < dim; ++i)
        {
#>
        private Scalar <#=comps[i]#>;
<#
        }
#>
#endif

        /// <inheritdoc cref="IVector{S}.Size"/>
        public const int Dimension = <#=dim#>;

        /// <summary>
        /// The zero vector
        /// </summary>
        public static <#=typename#> Zero { get; } = new <#=typename#>(0);
<#
        if (dim <= comp.Length)
            for (int i = 0; i < dim; ++i)
            {
                int[] tuple = new int[dim];
                tuple[i] = 1;
#>

        /// <summary>
        /// The unit vector in <#=comp[i]#>-direction
        /// </summary>
        public static <#=typename#> Unit<#=comp[i]#> { get; } = (<#=string.Join(", ", tuple)#>);
<#
            }
#>

        /// <summary>
        /// The raw memory size of the <see cref="<#=typename#>"/>-structure in bytes.
        /// </summary>
        public unsafe int BinarySize { get; } = sizeof(<#=typename#>);


<#
        if (dim <= comp.Length)
        {
            for (int i = 0; i < dim; ++i)
            {
#>
        /// <summary>
        /// Sets or gets the the vector's <#=comp[i]#>-coefficient (Index = <#=i#>).
        /// </summary>
        public Scalar <#=comp[i]#>
        {
            get => <#=comps[i]#>;
#if !READONLY
            set => <#=comps[i]#> = value;
#endif
        }

<#
            }

            if (dim > 2)
            {
#>
        // TODO: opencv-like properties for any combination of coefficients?

<#
            }
        }
#>
        /// <inheritdoc/>
        public Scalar this[int index]
        {
            get => index switch
            {
<#=string.Join("\n", r(0, dim).Select(i => $"                {i} => {comps[i]},"))#>
                _ => throw new IndexOutOfRangeException()
            };
#if !READONLY
            set
            {
<#
        for (int i = 0; i < dim; ++i)
        {
#>
                <#=i > 0 ? "else " : ""#>if (index == <#=i#>) <#=comps[i]#> = value;
<#
        }
#>
                else throw new IndexOutOfRangeException();
            }
#else
        }
            
        /// <inheritdoc/>
        public <#=typename#> this[int index, Scalar new_value]
        {
            get
            {
                Scalar[] arr = this;

                arr[index] = new_value;

                return new <#=typename#>(arr);
            }
#endif
        }
        
        /// <inheritdoc/>
        public <#=typename#> AdditiveInverse => Negate();

        /// <inheritdoc/>
        public int Size => Dimension;
        
        /// <summary>
        /// Returns the squared length of the current vector. This is equal to the dot product of the current instance with itself.
        /// </summary>
        public Scalar SquaredLength => <#=string.Join(" + ", comps.Select(s => s + " * " + s)) #>;

        /// <inheritdoc/>
        public Scalar Length => SquaredLength.Sqrt();

        /// <inheritdoc/>
        public Scalar Sum => ToArray().Sum();

        /// <inheritdoc/>
        public Scalar Avg => Sum / Dimension;

        /// <inheritdoc/>
        public Scalar Min => ToArray().Min();

        /// <inheritdoc/>
        public Scalar Max => ToArray().Max();

        /// <inheritdoc/>
        public <#=matname#> HouseholderMatrix => IsZero ? throw new InvalidOperationException("The Householder matrix is undefined for zero vectors.") : 2 / SquaredLength * OuterProduct(this);

        /// <inheritdoc/>
        public <#=typename#> Normalized => this == Zero ? Zero : this / Length;

        /// <inheritdoc/>
        public bool IsPositive => ToArray().All(c => c > 0);

        /// <inheritdoc/>
        public bool IsNegative => ToArray().All(c => c < 0);

        /// <inheritdoc/>
        public bool IsNormalized => Length.Is(1);

        /// <inheritdoc/>
        public bool IsZero => Zero == this;
        
        /// <inheritdoc/>
        public bool HasNaNs => <#=string.Join(" || ", comps.Select(s => s + ".IsNaN"))#>;


        /// <summary>
        /// Creates a new <#=dim#>-dimensional uniform vector
        /// </summary>
        /// <param name="s">The coefficients' value</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#>(Scalar s = default)
            : this(<#=string.Join(", ", Enumerable.Repeat("s", dim))#>)
        {
        }

        /// <summary>
        /// Creates a new <#=dim#>-dimensional vector
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#>(<#=string.Join(", ", r(0, dim).Select(i => "Scalar x" + i))#>)
        {
<#
        for (int i = 0; i < dim; ++i)
        {
#>
            <#=comps[i]#> = x<#=i#>;
<#
        }
#>
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe <#=typename#>(<#=typename#>* ptr)
            : this(*ptr)
        {
        }
<#
        for (int i = dim; i < maxdim; ++i)
        {
#>

        /// <summary>
        /// Creates a new <#=dim#>-dimensional vector from the given <#=i#>-dimensional one
        /// </summary>
        /// <param name="v">The <#=i#>-dimensional vector</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#>(Vector<#=i#> v)
            : this(<#=string.Join(", ", r(0, dim).Select(j => $"v[{j}]"))#>)
        {
        }
<#
        }

        if (dim > 2)
        {
#>

        /// <summary>
        /// Creates a new <#=dim#>-dimensional vector from the given <#=dim-1#>-dimensional one and an additional coefficient
        /// </summary>
        /// <param name="v">The <#=dim-1#>-dimensional vector</param>
        /// <param name="c">The additional coefficient</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#>(Vector<#=dim-1#> v, Scalar c)
            : this(<#=string.Join(", ", r(0, dim - 1).Select(j => $"v[{j}]"))#>, c)
        {
        }
<#
        }
#>

        /// <summary>
        /// Creates a new <#=dim#>-dimensional vector from the given coefficient array
        /// </summary>
        /// <param name="v">The vector's coefficients</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#>(IEnumerable<Scalar> v)
            : this() => FromArray(v?.ToArray() ?? new Scalar[<#=dim#>]);

        /// <summary>
        /// Creates a new <#=dim#>-dimensional vector from the given coefficient array
        /// </summary>
        /// <param name="v">The vector's coefficients</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#>(IEnumerable<double> v)
            : this() => FromArray(v?.ToArray() ?? new double[<#=dim#>]);

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> Add(<#=typename#> second) => (<#=string.Join(", ", comps.Select(s => $"{s} + second.{s}"))#>);

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> Negate() => -this;

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> Subtract(<#=typename#> second) => Add(second.Negate());

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> Multiply(<#=typename#> second) => (<#=string.Join(", ", comps.Select(s => $"{s} * second.{s}"))#>);

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> Multiply(Scalar factor) => Multiply(new <#=typename#>(factor));

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> Divide(Scalar factor) => Multiply(1 / factor);

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> ComponentwiseDivide(<#=typename#> second) => (<#=string.Join(", ", comps.Select(s => $"{s} * second.{s}"))#>);

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> ComponentwiseMultiply(<#=typename#> second) => Multiply(second);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> Power(int e)
        {
            if (e < 0)
                throw new ArgumentOutOfRangeException(nameof(e));

            <#=typename#> r = (<#=string.Join(", ", Enumerable.Repeat(1, dim))#>);

            for (int i = 0; i < e; ++i)
                r = r.Multiply(this);

            return r;
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Scalar Dot(<#=typename#> other) => Multiply(other).Sum;
        
        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> Abs() => (<#=string.Join(", ", comps.Select(s => $"Math.Abs({s})"))#>);
        
        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> Sqrt() => (<#=string.Join(", ", comps.Select(s => $"Math.Sqrt({s})"))#>);
        
        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> Lerp(<#=typename#> other, Scalar factor) => Lerp(this, other, factor);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> Reflect(<#=typename#> normal) => 2 * Dot(normal) * normal - this;

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#>? Refract(<#=typename#> normal, Scalar eta)
        {
            Scalar θ = Dot(normal);
            Scalar k = Scalar.One - eta * eta * (Scalar.One - θ * θ);

            if (k.IsNegative)
                return null;

            return eta * this + (eta * θ - Math.Sqrt(k)) * normal;
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Scalar AngleTo(<#=typename#> other) => Math.Acos(Dot(other));

        /// <inheritdoc cref="IVector{V, S}.Clamp(S, S)"/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> Clamp() => Clamp(Scalar.Zero, Scalar.One);
        
        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=typename#> Clamp(Scalar low, Scalar high) => (<#=string.Join(", ", comps.Select(s => $"{s}.Clamp(low, high)"))#>);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=matname#> OuterProduct(<#=typename#> other) => (
            <#=string.Join("\n            ", r(0, dim).Select(i => string.Join(", ", comps.Select(s => $"{s} * other.{s}")) + (i < dim - 1 ? "," : "")))#>
        );

        /// <inheritdoc/>
        public bool IsLinearIndependent(<#=typename#> other) => !(this / other).IsZero;

        /// <inheritdoc/>
        public <#=typename#> SwapEntries(int src_idx, int dst_idx)
        {
            Scalar[] res = ToArray();
            Scalar tmp = res[dst_idx];

            res[dst_idx] = res[src_idx];
            res[src_idx] = tmp;

            return FromArray(res);
        }

        /// <inheritdoc/>
        public int CompareTo(<#=typename#> other) => Length.CompareTo(other.Length);

        /// <inheritdoc/>
        public override string ToString() => $"(<#=string.Join(", ", comps.Select(s => "{" + s + "}"))#>)";

        /// <inheritdoc/>
        public Scalar[] ToArray() => new[] { <#=string.Join(", ", comps)#> };

        /// <inheritdoc/>
        public Polynomial ToPolynomial() => ToArray();

        /// <summary>
        /// Returns the vector' <#=dim-1#>D-minor at the given index
        /// </summary>
        /// <param name="row">Zero-based row index</param>
        /// <returns><#=dim-1#>D-minor</returns>
<#
        if (dim == 2)
        {
#>
        public Scalar Minor(int row) => row switch
        {
            0 => _1,
            1 => _0,
            _ => throw new IndexOutOfRangeException()
        };
<#
        }
        else if (dim > 2)
        {
#>
        public Vector<#=dim-1#> Minor(int row)
        {
            Scalar[] f = ToArray();

            return new Vector<#=dim-1#>(f.Take(row).Concat(f.Skip(row + 1)));
        }
<#
        }
#>

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object obj) => obj is <#=typename#> v && Equals(v);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(<#=typename#> other) => <#=string.Join(" && ", comps.Select(s => $"other.{s}.Is({s})"))#>;

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() => <#=string.Join(" ^ ", comps.Select(s => s + ".GetHashCode()"))#>;
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IEnumerator<Scalar> GetEnumerator()
        {
<#
        for (int i = 0; i < dim; ++i)
        {
#>
            yield return _<#=i#>;
<#
        }
#>
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Deconstruct(<#=string.Join(", ", r(0, dim).Select(i => $"out Scalar x{i}"))#>) => (<#=string.Join(", ", r(0, dim).Select(i => "x" + i))#>) = (<#=string.Join(", ", r(0, dim).Select(i => "_" + i))#>);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public unsafe void ToNative<T>(T* dst) where T : unmanaged => ToArray().BinaryCopy(dst, BinarySize);

        /// <inheritdoc/>
        public T[] ToArray<T>() where T : unmanaged => new[] { this }.BinaryCopy<<#=typename#>, T>(BinarySize);
        

        public static <#=typename #> FromArray(params Scalar[] v) => v switch {
            null => throw new ArgumentNullException(nameof(v)),
            _ when v.Length < Dimension => throw new ArgumentException($"The array must have a minimum length of {Dimension}.", nameof(v)),
            _ => new <#=typename#>(<#=string.Join(", ", r(0, dim).Select(i => $"v[{i}]"))#>)
        };

        /// <inheritdoc cref="FromNative{T}"/>
        public static unsafe <#=typename#> FromPointer<T>(T* src)
            where T : unmanaged => new <#=typename#>((<#=typename#>*)src);

        /// <inheritdoc cref="IVector{V}.Dot"/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Scalar Dot(<#=typename#> v1, <#=typename#> v2) => v1.Dot(v2);
        
        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Scalar AngleBetween(<#=typename#> v1, <#=typename#> v2) => v1.AngleTo(v2);

        /// <inheritdoc cref="IVector{V}.IsLinearIndependent"/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsLinearIndependent(<#=typename#> v1, <#=typename#> v2) => v1.IsLinearIndependent(v2);

        /// <inheritdoc cref="IVector{M,V,S}.OuterProduct"/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=matname#> OuterProduct(<#=typename#> v1, <#=typename#> v2) => v1.OuterProduct(v2);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> Lerp(<#=typename#> v1, <#=typename#> v2, Scalar factor) => v1 + factor * (v2 - v1);


        /// <summary>
        /// Normalizes the given vector
        /// </summary>
        /// <param name="v">Original vector</param>
        /// <returns>Normalized vector</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator ~(<#=typename#> v) => v.Normalized;

        /// <summary>
        /// Negates the given vector
        /// </summary>
        /// <param name="v">Original vector</param>
        /// <returns>Negated vector</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator -(<#=typename#> v) => v * -1;

        /// <summary>
        /// Identity function (returns the given vector unchanged)
        /// </summary>
        /// <param name="v">Original vector</param>
        /// <returns>Unchanged vector</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator +(<#=typename#> v) => v;

        /// <summary>
        /// Performs the addition of two vectors by adding their respective coefficients.
        /// </summary>
        /// <param name="v1">First vector</param>
        /// <param name="v2">Second vector</param>
        /// <returns>Addition result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator +(<#=typename#> v1, <#=typename#> v2) => v1.Add(v2);

        /// <summary>
        /// Performs the addition of a vector with the given Scalar by adding the Scalar to each of the vector's coefficents.
        /// </summary>
        /// <param name="v">Vector</param>
        /// <param name="f">Scalar value</param>
        /// <returns>Addition result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator +(<#=typename#> v, Scalar f) => v + new <#=typename#>(f);

        /// <summary>
        /// Performs the addition of a vector with the given Scalar by adding the Scalar to each of the vector's coefficents.
        /// </summary>
        /// <param name="v">Vector</param>
        /// <param name="f">Scalar value</param>
        /// <returns>Addition result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator +(Scalar f, <#=typename#> v) => v + f;

        /// <summary>
        /// Performs the subtraction of two vectors by subtracting their respective coefficients.
        /// </summary>
        /// <param name="v1">First vector</param>
        /// <param name="v2">Second vector</param>
        /// <returns>Subtraction result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator -(<#=typename#> v1, <#=typename#> v2) => v1 + -v2;

        /// <summary>
        /// Performs the subtraction of a Scalar from vector by subtracting the Scalar from each of the vector's coefficents.
        /// </summary>
        /// <param name="v">Vector</param>
        /// <param name="f">Scalar value</param>
        /// <returns>Subtraction result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator -(<#=typename#> v, Scalar f) => v + -f;

        /// <summary>
        /// Performs the subtraction of a vector from a Scalar value.
        /// </summary>
        /// <param name="v">Vector</param>
        /// <param name="f">Scalar value</param>
        /// <returns>Subtraction result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator -(Scalar f, <#=typename#> v) => -v + f;

        /// <summary>
        /// Performs the multiplication of a vector with the given Scalar by mulitplying the Scalar with each of the vector's coefficents.
        /// </summary>
        /// <param name="v">Vector</param>
        /// <param name="f">Scalar value</param>
        /// <returns>Multiplication result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator *(<#=typename#> v, Scalar f) => v.Multiply(f);

        /// <summary>
        /// Performs the multiplication of a vector with the given Scalar by mulitplying the Scalar with each of the vector's coefficents.
        /// </summary>
        /// <param name="v">Vector</param>
        /// <param name="f">Scalar value</param>
        /// <returns>Multiplication result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator *(Scalar f, <#=typename#> v) => v.Multiply(f);

        /// <summary>
        /// Calculates the dot product of two vectors by multiplying their respective coefficients and summing them. THIS IS NOT TO BE CONFUSED WITH THE COMPONENT-WISE PRODUCT!
        /// </summary>
        /// <param name="v1">First vector</param>
        /// <param name="v2">Second vector</param>
        /// <returns>Dot product</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Scalar operator *(<#=typename#> v1, <#=typename#> v2) => v1.Dot(v2);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator ^(<#=typename#> m, int c) => m.Power(c);

        /// <summary>
        /// Performs the division of a vector by the given Scalar by dividing each of the vector's coefficents by the Scalar.
        /// </summary>
        /// <param name="v">Vector</param>
        /// <param name="f">Scalar value</param>
        /// <returns>Division result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator /(<#=typename#> v, Scalar f) => v.Divide(f);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typename#> operator /(Scalar f, <#=typename#> v) => new <#=typename#>(f).ComponentwiseDivide(v);

        /// <summary>
        /// Performs the division of two vectors by dividing each of the vector's respective coefficents by each other.
        /// </summary>
        /// <param name="v1">First Vector</param>
        /// <param name="v2">Second Vector</param>
        /// <returns>Division result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Scalar operator /(<#=typename#> v1, <#=typename#> v2)
        {
            Scalar[] components = v1.ToArray().Zip(v2.ToArray(), (x1, x2) => x1 / x2).Distinct().ToArray();

            return components.Length == 1 ? components[0] : Scalar.NaN;
        }

        /// <summary>
        /// Compares the lengths of the two given vectors and returns whether the first is shorter than the second one.
        /// </summary>
        /// <param name="v1">First Vector</param>
        /// <param name="v2">Second Vector</param>
        /// <returns>Comparison result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator <(<#=typename#> v1, <#=typename#> v2) => v1.Length < v2.Length;

        /// <summary>
        /// Compares the lengths of the two given vectors and returns whether the first is longer than the second one.
        /// </summary>
        /// <param name="v1">First Vector</param>
        /// <param name="v2">Second Vector</param>
        /// <returns>Comparison result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator >(<#=typename#> v1, <#=typename#> v2) => v1.Length > v2.Length;

        /// <summary>
        /// Compares the lengths of the two given vectors and returns whether the first is shorter or equally long to the second vector.
        /// </summary>
        /// <param name="v1">First Vector</param>
        /// <param name="v2">Second Vector</param>
        /// <returns>Comparison result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator <=(<#=typename#> v1, <#=typename#> v2) => v1.Length <= v2.Length;

        /// <summary>
        /// Compares the lengths of the two given vectors and returns whether the first is longer or equally long to the second vector.
        /// </summary>
        /// <param name="v1">First Vector</param>
        /// <param name="v2">Second Vector</param>
        /// <returns>Comparison result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator >=(<#=typename#> v1, <#=typename#> v2) => v1.Length >= v2.Length;

        /// <summary>
        /// Compares whether the two given vectors are equal regarding their coefficients.
        /// </summary>
        /// <param name="v1">First Vector</param>
        /// <param name="v2">Second Vector</param>
        /// <returns>Comparison result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(<#=typename#> v1, <#=typename#> v2) => v1.Equals(v2);

        /// <summary>
        /// Compares whether the two given vectors are unequal regarding their coefficients.
        /// </summary>
        /// <param name="v1">First Vector</param>
        /// <param name="v2">Second Vector</param>
        /// <returns>Comparison result</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(<#=typename#> v1, <#=typename#> v2) => !(v1 == v2);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Scalar[](<#=typename#> v) => v.ToArray();
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator <#=typename#>(Scalar[] arr) => new <#=typename#>(arr);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator (<#=string.Join(", ", r(0, dim).Select(i => "Scalar x" + i))#>) (<#=typename#> v) => (<#=string.Join(", ", comps.Select(s => "v." + s))#>);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator <#=typename#>((<#=string.Join(", ", r(0, dim).Select(i => "Scalar x" + i))#>) t) => new <#=typename#>(<#=string.Join(", ", r(0, dim).Select(i => "t.x" + i))#>);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Polynomial(<#=typename#> v) => v.ToPolynomial();
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator <#=typename#>(Polynomial p) => new <#=typename#>(p.Coefficients);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator VectorN(<#=typename#> v) => v.ToArray();
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator <#=typename#>(VectorN v) => new <#=typename#>(v.Coefficients);
    }

    #endregion
<#
    }
#>
}
