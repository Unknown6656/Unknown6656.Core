<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Drawing" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Drawing" #>
<#@ output extension=".cs" #>
<#
var colors = typeof(Color).GetProperties(BindingFlags.Static | BindingFlags.Public).Select(p => {
    int argb = ((Color)p.GetValue(null)).ToArgb();

    return (hex: argb.ToString("x8"), name: p.Name);
}).ToList();
var additional_colors = new List<(string, string)>();


additional_colors.AddRange(new[] {
    (2000, 15, 4020, "FF9BB7D4"),
    (2001, 17, 203, "FFC74375"),
    (2002, 19, 166, "FFBF1932"),
    (2003, 14, 481, "FF7BC4C4"),
    (2004, 17, 145, "FFE2583E"),
    (2005, 15, 5217, "FF53B0AE"),
    (2006, 13, 1106, "FFDECDBE"),
    (2007, 19, 1557, "FF9B1B30"),
    (2008, 18, 3943, "FF5A5B9F"),
    (2009, 14, 0848, "FFF0C05A"),
    (2010, 15, 5519, "FF45B5AA"),
    (2011, 18, 2120, "FFD94F70"),
    (2012, 17, 1463, "FFDD4124"),
    (2013, 17, 5641, "FF009473"),
    (2014, 18, 3224, "FFB163A3"),
    (2015, 18, 1438, "FF955251"),
    (2016, 13, 1520, "FFF7CAC9"),
    (2017, 15, 0343, "FF88B04B"),
    (2018, 18, 3838, "FF5F4B8B"),
    (2019, 16, 1546, "FFFF6F61"),
    (2020, 19, 4052, "FF0F4C81"),
    (2021, 17, 5104, "FF939597"),
}.SelectMany(t => new[] {
    (t.Item4, "Pantone" + t.Item1),
    (t.Item4, $"Pantone_{t.Item2}_{t.Item3}"),
}));
additional_colors.AddRange(new[] {
    ("FF92A8D1", "Pantone_15_3919"),
    ("FFF5DF4D", "Pantone_13_0647"),
    ("FF8FFE09", "KXCD_AcidGreen"),
    ("FFBD6C48", "KXCD_Adobe"),
    ("FF54AC68", "KXCD_Algae"),
    ("FF21C36F", "KXCD_AlgaeGreen"),
    ("FF070D0D", "KXCD_AlmostBlack"),
    ("FFFEB308", "KXCD_Amber"),
    ("FF9B5FC0", "KXCD_Amethyst"),
    ("FF6ECB3C", "KXCD_Apple"),
    ("FF76CD26", "KXCD_AppleGreen"),
    ("FFFFB16D", "KXCD_Apricot"),
    ("FF13EAC9", "KXCD_Aqua"),
    ("FF02D8E9", "KXCD_AquaBlue"),
    ("FF12E193", "KXCD_AquaGreen"),
    ("FF2EE8BB", "KXCD_AquaMarine"),
    ("FF04D8B2", "KXCD_Aquamarine"),
    ("FF4B5D16", "KXCD_ArmyGreen"),
    ("FF77AB56", "KXCD_Asparagus"),
    ("FF3D0734", "KXCD_Aubergine"),
    ("FF9A3001", "KXCD_Auburn"),
    ("FF90B134", "KXCD_Avocado"),
    ("FF87A922", "KXCD_AvocadoGreen"),
    ("FF1D5DEC", "KXCD_Azul"),
    ("FF069AF3", "KXCD_Azure"),
    ("FFA2CFFE", "KXCD_BabyBlue"),
    ("FF8CFF9E", "KXCD_BabyGreen"),
    ("FFFFB7CE", "KXCD_BabyPink"),
    ("FFAB9004", "KXCD_BabyPoo"),
    ("FF937C00", "KXCD_BabyPoop"),
    ("FF8F9805", "KXCD_BabyPoopGreen"),
    ("FFB6C406", "KXCD_BabyPukeGreen"),
    ("FFCA9BF7", "KXCD_BabyPurple"),
    ("FFAD900D", "KXCD_BabyShitBrown"),
    ("FF889717", "KXCD_BabyShitGreen"),
    ("FFFFFF7E", "KXCD_Banana"),
    ("FFFAFE4B", "KXCD_BananaYellow"),
    ("FFFE46A5", "KXCD_BarbiePink"),
    ("FF94AC02", "KXCD_BarfGreen"),
    ("FFAC1DB8", "KXCD_Barney"),
    ("FFA00498", "KXCD_BarneyPurple"),
    ("FF6B7C85", "KXCD_BattleshipGrey"),
    ("FFE6DAA6", "KXCD_Beige"),
    ("FF990F4B", "KXCD_Berry"),
    ("FFB5C306", "KXCD_Bile"),
    ("FF000000", "KXCD_Black"),
    ("FFAFA88B", "KXCD_Bland"),
    ("FF770001", "KXCD_Blood"),
    ("FFFE4B03", "KXCD_BloodOrange"),
    ("FF980002", "KXCD_BloodRed"),
    ("FF0343DF", "KXCD_Blue"),
    ("FF2242C7", "KXCD_BlueBlue"),
    ("FF137E6D", "KXCD_BlueGreen"),
    ("FF607C8E", "KXCD_BlueGrey"),
    ("FF5729CE", "KXCD_BluePurple"),
    ("FF5D06E9", "KXCD_BlueViolet"),
    ("FF533CC6", "KXCD_BlueWithAHintOfPurple"),
    ("FF0F9B8E", "KXCD_BlueOrGreen"),
    ("FF758DA3", "KXCD_BlueOrGrey"),
    ("FF5A06EF", "KXCD_BlueOrPurple"),
    ("FF464196", "KXCD_Blueberry"),
    ("FF017A79", "KXCD_Bluegreen"),
    ("FF85A3B2", "KXCD_Bluegrey"),
    ("FF2BB179", "KXCD_BlueyGreen"),
    ("FF89A0B0", "KXCD_BlueyGrey"),
    ("FF6241C7", "KXCD_BlueyPurple"),
    ("FF2976BB", "KXCD_Bluish"),
    ("FF10A674", "KXCD_BluishGreen"),
    ("FF748B97", "KXCD_BluishGrey"),
    ("FF703BE7", "KXCD_BluishPurple"),
    ("FF5539CC", "KXCD_Blurple"),
    ("FFF29E8E", "KXCD_Blush"),
    ("FFFE828C", "KXCD_BlushPink"),
    ("FF9BB53C", "KXCD_Booger"),
    ("FF96B403", "KXCD_BoogerGreen"),
    ("FF7B002C", "KXCD_Bordeaux"),
    ("FF63B365", "KXCD_BoringGreen"),
    ("FF044A05", "KXCD_BottleGreen"),
    ("FFA03623", "KXCD_Brick"),
    ("FFC14A09", "KXCD_BrickOrange"),
    ("FF8F1402", "KXCD_BrickRed"),
    ("FF0BF9EA", "KXCD_BrightAqua"),
    ("FF0165FC", "KXCD_BrightBlue"),
    ("FF41FDFE", "KXCD_BrightCyan"),
    ("FF01FF07", "KXCD_BrightGreen"),
    ("FFC760FF", "KXCD_BrightLavender"),
    ("FF26F7FD", "KXCD_BrightLightBlue"),
    ("FF2DFE54", "KXCD_BrightLightGreen"),
    ("FFC95EFB", "KXCD_BrightLilac"),
    ("FF87FD05", "KXCD_BrightLime"),
    ("FF65FE08", "KXCD_BrightLimeGreen"),
    ("FFFF08E8", "KXCD_BrightMagenta"),
    ("FF9CBB04", "KXCD_BrightOlive"),
    ("FFFF5B00", "KXCD_BrightOrange"),
    ("FFFE01B1", "KXCD_BrightPink"),
    ("FFBE03FD", "KXCD_BrightPurple"),
    ("FFFF000D", "KXCD_BrightRed"),
    ("FF05FFA6", "KXCD_BrightSeaGreen"),
    ("FF02CCFE", "KXCD_BrightSkyBlue"),
    ("FF01F9C6", "KXCD_BrightTeal"),
    ("FF0FFEF9", "KXCD_BrightTurquoise"),
    ("FFAD0AFD", "KXCD_BrightViolet"),
    ("FFFFFD01", "KXCD_BrightYellow"),
    ("FF9DFF00", "KXCD_BrightYellowGreen"),
    ("FF05480D", "KXCD_BritishRacingGreen"),
    ("FFA87900", "KXCD_Bronze"),
    ("FF653700", "KXCD_Brown"),
    ("FF706C11", "KXCD_BrownGreen"),
    ("FF8D8468", "KXCD_BrownGrey"),
    ("FFB96902", "KXCD_BrownOrange"),
    ("FF922B05", "KXCD_BrownRed"),
    ("FFB29705", "KXCD_BrownYellow"),
    ("FF9C6D57", "KXCD_Brownish"),
    ("FF6A6E09", "KXCD_BrownishGreen"),
    ("FF86775F", "KXCD_BrownishGrey"),
    ("FFCB7723", "KXCD_BrownishOrange"),
    ("FFC27E79", "KXCD_BrownishPink"),
    ("FF76424E", "KXCD_BrownishPurple"),
    ("FF9E3623", "KXCD_BrownishRed"),
    ("FFC9B003", "KXCD_BrownishYellow"),
    ("FF6F6C0A", "KXCD_BrownyGreen"),
    ("FFCA6B02", "KXCD_BrownyOrange"),
    ("FF7E4071", "KXCD_Bruise"),
    ("FFFF69AF", "KXCD_BubbleGumPink"),
    ("FFFF6CB5", "KXCD_Bubblegum"),
    ("FFFE83CC", "KXCD_BubblegumPink"),
    ("FFFEF69E", "KXCD_Buff"),
    ("FF610023", "KXCD_Burgundy"),
    ("FFC04E01", "KXCD_BurntOrange"),
    ("FF9F2305", "KXCD_BurntRed"),
    ("FFB75203", "KXCD_BurntSiena"),
    ("FFB04E0F", "KXCD_BurntSienna"),
    ("FFA0450E", "KXCD_BurntUmber"),
    ("FFD5AB09", "KXCD_BurntYellow"),
    ("FF6832E3", "KXCD_Burple"),
    ("FFFFFF81", "KXCD_Butter"),
    ("FFFFFD74", "KXCD_ButterYellow"),
    ("FFFDB147", "KXCD_Butterscotch"),
    ("FF4E7496", "KXCD_CadetBlue"),
    ("FFC69F59", "KXCD_Camel"),
    ("FF7F8F4E", "KXCD_Camo"),
    ("FF526525", "KXCD_CamoGreen"),
    ("FF4B6113", "KXCD_CamouflageGreen"),
    ("FFFDFF63", "KXCD_Canary"),
    ("FFFFFE40", "KXCD_CanaryYellow"),
    ("FFFF63E9", "KXCD_CandyPink"),
    ("FFAF6F09", "KXCD_Caramel"),
    ("FF9D0216", "KXCD_Carmine"),
    ("FFFD798F", "KXCD_Carnation"),
    ("FFFF7FA7", "KXCD_CarnationPink"),
    ("FF8AB8FE", "KXCD_CarolinaBlue"),
    ("FFBEFDB7", "KXCD_Celadon"),
    ("FFC1FD95", "KXCD_Celery"),
    ("FFA5A391", "KXCD_Cement"),
    ("FFDE0C62", "KXCD_Cerise"),
    ("FF0485D1", "KXCD_Cerulean"),
    ("FF056EEE", "KXCD_CeruleanBlue"),
    ("FF343837", "KXCD_Charcoal"),
    ("FF3C4142", "KXCD_CharcoalGrey"),
    ("FFC1F80A", "KXCD_Chartreuse"),
    ("FFCF0234", "KXCD_Cherry"),
    ("FFF7022A", "KXCD_CherryRed"),
    ("FF742802", "KXCD_Chestnut"),
    ("FF3D1C02", "KXCD_Chocolate"),
    ("FF411900", "KXCD_ChocolateBrown"),
    ("FFAC4F06", "KXCD_Cinnamon"),
    ("FF680018", "KXCD_Claret"),
    ("FFB66A50", "KXCD_Clay"),
    ("FFB2713D", "KXCD_ClayBrown"),
    ("FF247AFD", "KXCD_ClearBlue"),
    ("FFACC2D9", "KXCD_CloudyBlue"),
    ("FF1E488F", "KXCD_Cobalt"),
    ("FF030AA7", "KXCD_CobaltBlue"),
    ("FF875F42", "KXCD_Cocoa"),
    ("FFA6814C", "KXCD_Coffee"),
    ("FF4984B8", "KXCD_CoolBlue"),
    ("FF33B864", "KXCD_CoolGreen"),
    ("FF95A3A6", "KXCD_CoolGrey"),
    ("FFB66325", "KXCD_Copper"),
    ("FFFC5A50", "KXCD_Coral"),
    ("FFFF6163", "KXCD_CoralPink"),
    ("FF6A79F7", "KXCD_Cornflower"),
    ("FF5170D7", "KXCD_CornflowerBlue"),
    ("FF9E003A", "KXCD_Cranberry"),
    ("FFFFFFC2", "KXCD_Cream"),
    ("FFFFFFB6", "KXCD_Creme"),
    ("FF8C000F", "KXCD_Crimson"),
    ("FFFFFD78", "KXCD_Custard"),
    ("FF00FFFF", "KXCD_Cyan"),
    ("FFFEDF08", "KXCD_Dandelion"),
    ("FF1B2431", "KXCD_Dark"),
    ("FF05696B", "KXCD_DarkAqua"),
    ("FF017371", "KXCD_DarkAquamarine"),
    ("FFAC9362", "KXCD_DarkBeige"),
    ("FF00035B", "KXCD_DarkBlue"),
    ("FF005249", "KXCD_DarkBlueGreen"),
    ("FF1F3B4D", "KXCD_DarkBlueGrey"),
    ("FF341C02", "KXCD_DarkBrown"),
    ("FFCF524E", "KXCD_DarkCoral"),
    ("FFFFF39A", "KXCD_DarkCream"),
    ("FF0A888A", "KXCD_DarkCyan"),
    ("FF002D04", "KXCD_DarkForestGreen"),
    ("FF9D0759", "KXCD_DarkFuchsia"),
    ("FFB59410", "KXCD_DarkGold"),
    ("FF388004", "KXCD_DarkGrassGreen"),
    ("FF033500", "KXCD_DarkGreen"),
    ("FF1F6357", "KXCD_DarkGreenBlue"),
    ("FF363737", "KXCD_DarkGrey"),
    ("FF29465B", "KXCD_DarkGreyBlue"),
    ("FFD90166", "KXCD_DarkHotPink"),
    ("FF1F0954", "KXCD_DarkIndigo"),
    ("FF9B8F55", "KXCD_DarkKhaki"),
    ("FF856798", "KXCD_DarkLavender"),
    ("FF9C6DA5", "KXCD_DarkLilac"),
    ("FF84B701", "KXCD_DarkLime"),
    ("FF7EBD01", "KXCD_DarkLimeGreen"),
    ("FF960056", "KXCD_DarkMagenta"),
    ("FF3C0008", "KXCD_DarkMaroon"),
    ("FF874C62", "KXCD_DarkMauve"),
    ("FF48C072", "KXCD_DarkMint"),
    ("FF20C073", "KXCD_DarkMintGreen"),
    ("FFA88905", "KXCD_DarkMustard"),
    ("FF000435", "KXCD_DarkNavy"),
    ("FF00022E", "KXCD_DarkNavyBlue"),
    ("FF373E02", "KXCD_DarkOlive"),
    ("FF3C4D03", "KXCD_DarkOliveGreen"),
    ("FFC65102", "KXCD_DarkOrange"),
    ("FF56AE57", "KXCD_DarkPastelGreen"),
    ("FFDE7E5D", "KXCD_DarkPeach"),
    ("FF665FD1", "KXCD_DarkPeriwinkle"),
    ("FFCB416B", "KXCD_DarkPink"),
    ("FF3F012C", "KXCD_DarkPlum"),
    ("FF35063E", "KXCD_DarkPurple"),
    ("FF840000", "KXCD_DarkRed"),
    ("FFB5485D", "KXCD_DarkRose"),
    ("FF02066F", "KXCD_DarkRoyalBlue"),
    ("FF598556", "KXCD_DarkSage"),
    ("FFC85A53", "KXCD_DarkSalmon"),
    ("FFA88F59", "KXCD_DarkSand"),
    ("FF11875D", "KXCD_DarkSeaGreen"),
    ("FF1FB57A", "KXCD_DarkSeafoam"),
    ("FF3EAF76", "KXCD_DarkSeafoamGreen"),
    ("FF448EE4", "KXCD_DarkSkyBlue"),
    ("FF214761", "KXCD_DarkSlateBlue"),
    ("FFAF884A", "KXCD_DarkTan"),
    ("FF7F684E", "KXCD_DarkTaupe"),
    ("FF014D4E", "KXCD_DarkTeal"),
    ("FF045C5A", "KXCD_DarkTurquoise"),
    ("FF34013F", "KXCD_DarkViolet"),
    ("FFD5B60A", "KXCD_DarkYellow"),
    ("FF728F02", "KXCD_DarkYellowGreen"),
    ("FF030764", "KXCD_Darkblue"),
    ("FF054907", "KXCD_Darkgreen"),
    ("FF014182", "KXCD_DarkishBlue"),
    ("FF287C37", "KXCD_DarkishGreen"),
    ("FFDA467D", "KXCD_DarkishPink"),
    ("FF751973", "KXCD_DarkishPurple"),
    ("FFA90308", "KXCD_DarkishRed"),
    ("FF08787F", "KXCD_DeepAqua"),
    ("FF040273", "KXCD_DeepBlue"),
    ("FF410200", "KXCD_DeepBrown"),
    ("FF02590F", "KXCD_DeepGreen"),
    ("FF8D5EB7", "KXCD_DeepLavender"),
    ("FF966EBD", "KXCD_DeepLilac"),
    ("FFA0025C", "KXCD_DeepMagenta"),
    ("FFDC4D01", "KXCD_DeepOrange"),
    ("FFCB0162", "KXCD_DeepPink"),
    ("FF36013F", "KXCD_DeepPurple"),
    ("FF9A0200", "KXCD_DeepRed"),
    ("FFC74767", "KXCD_DeepRose"),
    ("FF015482", "KXCD_DeepSeaBlue"),
    ("FF0D75F8", "KXCD_DeepSkyBlue"),
    ("FF00555A", "KXCD_DeepTeal"),
    ("FF017374", "KXCD_DeepTurquoise"),
    ("FF490648", "KXCD_DeepViolet"),
    ("FF3B638C", "KXCD_Denim"),
    ("FF3B5B92", "KXCD_DenimBlue"),
    ("FFCCAD60", "KXCD_Desert"),
    ("FF9F8303", "KXCD_Diarrhea"),
    ("FF8A6E45", "KXCD_Dirt"),
    ("FF836539", "KXCD_DirtBrown"),
    ("FF3F829D", "KXCD_DirtyBlue"),
    ("FF667E2C", "KXCD_DirtyGreen"),
    ("FFC87606", "KXCD_DirtyOrange"),
    ("FFCA7B80", "KXCD_DirtyPink"),
    ("FF734A65", "KXCD_DirtyPurple"),
    ("FFCDC50A", "KXCD_DirtyYellow"),
    ("FF3E82FC", "KXCD_DodgerBlue"),
    ("FF828344", "KXCD_Drab"),
    ("FF749551", "KXCD_DrabGreen"),
    ("FF4B0101", "KXCD_DriedBlood"),
    ("FFC3FBF4", "KXCD_DuckEggBlue"),
    ("FF49759C", "KXCD_DullBlue"),
    ("FF876E4B", "KXCD_DullBrown"),
    ("FF74A662", "KXCD_DullGreen"),
    ("FFD8863B", "KXCD_DullOrange"),
    ("FFD5869D", "KXCD_DullPink"),
    ("FF84597E", "KXCD_DullPurple"),
    ("FFBB3F3F", "KXCD_DullRed"),
    ("FF5F9E8F", "KXCD_DullTeal"),
    ("FFEEDC5B", "KXCD_DullYellow"),
    ("FF4E5481", "KXCD_Dusk"),
    ("FF26538D", "KXCD_DuskBlue"),
    ("FF475F94", "KXCD_DuskyBlue"),
    ("FFCC7A8B", "KXCD_DuskyPink"),
    ("FF895B7B", "KXCD_DuskyPurple"),
    ("FFBA6873", "KXCD_DuskyRose"),
    ("FFB2996E", "KXCD_Dust"),
    ("FF5A86AD", "KXCD_DustyBlue"),
    ("FF76A973", "KXCD_DustyGreen"),
    ("FFAC86A8", "KXCD_DustyLavender"),
    ("FFF0833A", "KXCD_DustyOrange"),
    ("FFD58A94", "KXCD_DustyPink"),
    ("FF825F87", "KXCD_DustyPurple"),
    ("FFB9484E", "KXCD_DustyRed"),
    ("FFC0737A", "KXCD_DustyRose"),
    ("FF4C9085", "KXCD_DustyTeal"),
    ("FFA2653E", "KXCD_Earth"),
    ("FF8CFD7E", "KXCD_EasterGreen"),
    ("FFC071FE", "KXCD_EasterPurple"),
    ("FFFEFFCA", "KXCD_Ecru"),
    ("FFFFFCC4", "KXCD_EggShell"),
    ("FF380835", "KXCD_Eggplant"),
    ("FF430541", "KXCD_EggplantPurple"),
    ("FFFFFFD4", "KXCD_Eggshell"),
    ("FFC4FFF7", "KXCD_EggshellBlue"),
    ("FF0652FF", "KXCD_ElectricBlue"),
    ("FF21FC0D", "KXCD_ElectricGreen"),
    ("FFA8FF04", "KXCD_ElectricLime"),
    ("FFFF0490", "KXCD_ElectricPink"),
    ("FFAA23FF", "KXCD_ElectricPurple"),
    ("FF01A049", "KXCD_Emerald"),
    ("FF028F1E", "KXCD_EmeraldGreen"),
    ("FF05472A", "KXCD_Evergreen"),
    ("FF658CBB", "KXCD_FadedBlue"),
    ("FF7BB274", "KXCD_FadedGreen"),
    ("FFF0944D", "KXCD_FadedOrange"),
    ("FFDE9DAC", "KXCD_FadedPink"),
    ("FF916E99", "KXCD_FadedPurple"),
    ("FFD3494E", "KXCD_FadedRed"),
    ("FFFEFF7F", "KXCD_FadedYellow"),
    ("FFCFAF7B", "KXCD_Fawn"),
    ("FF63A950", "KXCD_Fern"),
    ("FF548D44", "KXCD_FernGreen"),
    ("FFFE0002", "KXCD_FireEngineRed"),
    ("FF3C73A8", "KXCD_FlatBlue"),
    ("FF699D4C", "KXCD_FlatGreen"),
    ("FF08FF08", "KXCD_FluorescentGreen"),
    ("FF0AFF02", "KXCD_FluroGreen"),
    ("FF90FDA9", "KXCD_FoamGreen"),
    ("FF0B5509", "KXCD_Forest"),
    ("FF06470C", "KXCD_ForestGreen"),
    ("FF154406", "KXCD_ForrestGreen"),
    ("FF436BAD", "KXCD_FrenchBlue"),
    ("FF69D84F", "KXCD_FreshGreen"),
    ("FF58BC08", "KXCD_FrogGreen"),
    ("FFED0DD9", "KXCD_Fuchsia"),
    ("FFDBB40C", "KXCD_Gold"),
    ("FFF5BF03", "KXCD_Golden"),
    ("FFB27A01", "KXCD_GoldenBrown"),
    ("FFF9BC08", "KXCD_GoldenRod"),
    ("FFFEC615", "KXCD_GoldenYellow"),
    ("FFFAC205", "KXCD_Goldenrod"),
    ("FF6C3461", "KXCD_Grape"),
    ("FF5D1451", "KXCD_GrapePurple"),
    ("FFFD5956", "KXCD_Grapefruit"),
    ("FF5CAC2D", "KXCD_Grass"),
    ("FF3F9B0B", "KXCD_GrassGreen"),
    ("FF419C03", "KXCD_GrassyGreen"),
    ("FF15B01A", "KXCD_Green"),
    ("FF5EDC1F", "KXCD_GreenApple"),
    ("FF06B48B", "KXCD_GreenBlue"),
    ("FF544E03", "KXCD_GreenBrown"),
    ("FF77926F", "KXCD_GreenGrey"),
    ("FF0CB577", "KXCD_GreenTeal"),
    ("FFC9FF27", "KXCD_GreenYellow"),
    ("FF01C08D", "KXCD_GreenOrBlue"),
    ("FFB5CE08", "KXCD_GreenOrYellow"),
    ("FF23C48B", "KXCD_Greenblue"),
    ("FF40A368", "KXCD_Greenish"),
    ("FFC9D179", "KXCD_GreenishBeige"),
    ("FF0B8B87", "KXCD_GreenishBlue"),
    ("FF696112", "KXCD_GreenishBrown"),
    ("FF2AFEB7", "KXCD_GreenishCyan"),
    ("FF96AE8D", "KXCD_GreenishGrey"),
    ("FFBCCB7A", "KXCD_GreenishTan"),
    ("FF32BF84", "KXCD_GreenishTeal"),
    ("FF00FBB0", "KXCD_GreenishTurquoise"),
    ("FFCDFD02", "KXCD_GreenishYellow"),
    ("FF42B395", "KXCD_GreenyBlue"),
    ("FF696006", "KXCD_GreenyBrown"),
    ("FF7EA07A", "KXCD_GreenyGrey"),
    ("FFC6F808", "KXCD_GreenyYellow"),
    ("FF929591", "KXCD_Grey"),
    ("FF6B8BA4", "KXCD_GreyBlue"),
    ("FF7F7053", "KXCD_GreyBrown"),
    ("FF789B73", "KXCD_GreyGreen"),
    ("FFC3909B", "KXCD_GreyPink"),
    ("FF826D8C", "KXCD_GreyPurple"),
    ("FF5E9B8A", "KXCD_GreyTeal"),
    ("FF647D8E", "KXCD_GreyOrBlue"),
    ("FF86A17D", "KXCD_GreyOrGreen"),
    ("FF77A1B5", "KXCD_Greyblue"),
    ("FFA8A495", "KXCD_Greyish"),
    ("FF5E819D", "KXCD_GreyishBlue"),
    ("FF7A6A4F", "KXCD_GreyishBrown"),
    ("FF82A67D", "KXCD_GreyishGreen"),
    ("FFC88D94", "KXCD_GreyishPink"),
    ("FF887191", "KXCD_GreyishPurple"),
    ("FF719F91", "KXCD_GreyishTeal"),
    ("FFA0BF16", "KXCD_GrossGreen"),
    ("FF536267", "KXCD_Gunmetal"),
    ("FF8E7618", "KXCD_Hazel"),
    ("FFA484AC", "KXCD_Heather"),
    ("FFD94FF5", "KXCD_Heliotrope"),
    ("FF1BFC06", "KXCD_HighlighterGreen"),
    ("FF9BE5AA", "KXCD_HospitalGreen"),
    ("FF25FF29", "KXCD_HotGreen"),
    ("FFF504C9", "KXCD_HotMagenta"),
    ("FFFF028D", "KXCD_HotPink"),
    ("FFCB00F5", "KXCD_HotPurple"),
    ("FF0B4008", "KXCD_HunterGreen"),
    ("FFD6FFFA", "KXCD_Ice"),
    ("FFD7FFFE", "KXCD_IceBlue"),
    ("FF8FAE22", "KXCD_IckyGreen"),
    ("FF850E04", "KXCD_IndianRed"),
    ("FF380282", "KXCD_Indigo"),
    ("FF3A18B1", "KXCD_IndigoBlue"),
    ("FF6258C4", "KXCD_Iris"),
    ("FF019529", "KXCD_IrishGreen"),
    ("FFFFFFCB", "KXCD_Ivory"),
    ("FF1FA774", "KXCD_Jade"),
    ("FF2BAF6A", "KXCD_JadeGreen"),
    ("FF048243", "KXCD_JungleGreen"),
    ("FF009337", "KXCD_KelleyGreen"),
    ("FF02AB2E", "KXCD_KellyGreen"),
    ("FF5CB200", "KXCD_KermitGreen"),
    ("FFAEFF6E", "KXCD_KeyLime"),
    ("FFAAA662", "KXCD_Khaki"),
    ("FF728639", "KXCD_KhakiGreen"),
    ("FF9CEF43", "KXCD_Kiwi"),
    ("FF8EE53F", "KXCD_KiwiGreen"),
    ("FFC79FEF", "KXCD_Lavender"),
    ("FF8B88F8", "KXCD_LavenderBlue"),
    ("FFDD85D7", "KXCD_LavenderPink"),
    ("FF4DA409", "KXCD_LawnGreen"),
    ("FF71AA34", "KXCD_Leaf"),
    ("FF5CA904", "KXCD_LeafGreen"),
    ("FF51B73B", "KXCD_LeafyGreen"),
    ("FFAC7434", "KXCD_Leather"),
    ("FFFDFF52", "KXCD_Lemon"),
    ("FFADF802", "KXCD_LemonGreen"),
    ("FFBFFE28", "KXCD_LemonLime"),
    ("FFFDFF38", "KXCD_LemonYellow"),
    ("FF8FB67B", "KXCD_Lichen"),
    ("FF8CFFDB", "KXCD_LightAqua"),
    ("FF7BFDC7", "KXCD_LightAquamarine"),
    ("FFFFFEB6", "KXCD_LightBeige"),
    ("FF95D0FC", "KXCD_LightBlue"),
    ("FF7EFBB3", "KXCD_LightBlueGreen"),
    ("FFB7C9E2", "KXCD_LightBlueGrey"),
    ("FF76FDA8", "KXCD_LightBluishGreen"),
    ("FF53FE5C", "KXCD_LightBrightGreen"),
    ("FFAD8150", "KXCD_LightBrown"),
    ("FFA8415B", "KXCD_LightBurgundy"),
    ("FFACFFFC", "KXCD_LightCyan"),
    ("FF894585", "KXCD_LightEggplant"),
    ("FF4F9153", "KXCD_LightForestGreen"),
    ("FFFDDC5C", "KXCD_LightGold"),
    ("FF9AF764", "KXCD_LightGrassGreen"),
    ("FF96F97B", "KXCD_LightGreen"),
    ("FF56FCA2", "KXCD_LightGreenBlue"),
    ("FF63F7B4", "KXCD_LightGreenishBlue"),
    ("FFD8DCD6", "KXCD_LightGrey"),
    ("FF9DBCD4", "KXCD_LightGreyBlue"),
    ("FFB7E1A1", "KXCD_LightGreyGreen"),
    ("FF6D5ACF", "KXCD_LightIndigo"),
    ("FFE6F2A2", "KXCD_LightKhaki"),
    ("FFEFC0FE", "KXCD_LightLavendar"),
    ("FFDFC5FE", "KXCD_LightLavender"),
    ("FFCAFFFB", "KXCD_LightLightBlue"),
    ("FFC8FFB0", "KXCD_LightLightGreen"),
    ("FFEDC8FF", "KXCD_LightLilac"),
    ("FFAEFD6C", "KXCD_LightLime"),
    ("FFB9FF66", "KXCD_LightLimeGreen"),
    ("FFFA5FF7", "KXCD_LightMagenta"),
    ("FFA24857", "KXCD_LightMaroon"),
    ("FFC292A1", "KXCD_LightMauve"),
    ("FFB6FFBB", "KXCD_LightMint"),
    ("FFA6FBB2", "KXCD_LightMintGreen"),
    ("FFA6C875", "KXCD_LightMossGreen"),
    ("FFF7D560", "KXCD_LightMustard"),
    ("FF155084", "KXCD_LightNavy"),
    ("FF2E5A88", "KXCD_LightNavyBlue"),
    ("FF4EFD54", "KXCD_LightNeonGreen"),
    ("FFACBF69", "KXCD_LightOlive"),
    ("FFA4BE5C", "KXCD_LightOliveGreen"),
    ("FFFDAA48", "KXCD_LightOrange"),
    ("FFB2FBA5", "KXCD_LightPastelGreen"),
    ("FFC4FE82", "KXCD_LightPeaGreen"),
    ("FFFFD8B1", "KXCD_LightPeach"),
    ("FFC1C6FC", "KXCD_LightPeriwinkle"),
    ("FFFFD1DF", "KXCD_LightPink"),
    ("FF9D5783", "KXCD_LightPlum"),
    ("FFBF77F6", "KXCD_LightPurple"),
    ("FFFF474C", "KXCD_LightRed"),
    ("FFFFC5CB", "KXCD_LightRose"),
    ("FF3A2EFE", "KXCD_LightRoyalBlue"),
    ("FFBCECAC", "KXCD_LightSage"),
    ("FFFEA993", "KXCD_LightSalmon"),
    ("FF98F6B0", "KXCD_LightSeaGreen"),
    ("FFA0FEBF", "KXCD_LightSeafoam"),
    ("FFA7FFB5", "KXCD_LightSeafoamGreen"),
    ("FFC6FCFF", "KXCD_LightSkyBlue"),
    ("FFFBEEAC", "KXCD_LightTan"),
    ("FF90E4C1", "KXCD_LightTeal"),
    ("FF7EF4CC", "KXCD_LightTurquoise"),
    ("FFB36FF6", "KXCD_LightUrple"),
    ("FFD6B4FC", "KXCD_LightViolet"),
    ("FFFFFE7A", "KXCD_LightYellow"),
    ("FFCCFD7F", "KXCD_LightYellowGreen"),
    ("FFC2FF89", "KXCD_LightYellowishGreen"),
    ("FF7BC8F6", "KXCD_Lightblue"),
    ("FF75FD63", "KXCD_LighterGreen"),
    ("FFA55AF4", "KXCD_LighterPurple"),
    ("FF76FF7B", "KXCD_Lightgreen"),
    ("FF3D7AFD", "KXCD_LightishBlue"),
    ("FF61E160", "KXCD_LightishGreen"),
    ("FFA552E6", "KXCD_LightishPurple"),
    ("FFFE2F4A", "KXCD_LightishRed"),
    ("FFCEA2FD", "KXCD_Lilac"),
    ("FFC48EFD", "KXCD_Liliac"),
    ("FFAAFF32", "KXCD_Lime"),
    ("FF89FE05", "KXCD_LimeGreen"),
    ("FFD0FE1D", "KXCD_LimeYellow"),
    ("FFD5174E", "KXCD_Lipstick"),
    ("FFC0022F", "KXCD_LipstickRed"),
    ("FFEFB435", "KXCD_MacaroniAndCheese"),
    ("FFC20078", "KXCD_Magenta"),
    ("FF4A0100", "KXCD_Mahogany"),
    ("FFF4D054", "KXCD_Maize"),
    ("FFFFA62B", "KXCD_Mango"),
    ("FFFFFA86", "KXCD_Manilla"),
    ("FFFCC006", "KXCD_Marigold"),
    ("FF042E60", "KXCD_Marine"),
    ("FF01386A", "KXCD_MarineBlue"),
    ("FF650021", "KXCD_Maroon"),
    ("FFAE7181", "KXCD_Mauve"),
    ("FF2C6FBB", "KXCD_MediumBlue"),
    ("FF7F5112", "KXCD_MediumBrown"),
    ("FF39AD48", "KXCD_MediumGreen"),
    ("FF7D7F7C", "KXCD_MediumGrey"),
    ("FFF36196", "KXCD_MediumPink"),
    ("FF9E43A2", "KXCD_MediumPurple"),
    ("FFFF7855", "KXCD_Melon"),
    ("FF730039", "KXCD_Merlot"),
    ("FF4F738E", "KXCD_MetallicBlue"),
    ("FF276AB3", "KXCD_MidBlue"),
    ("FF50A747", "KXCD_MidGreen"),
    ("FF03012D", "KXCD_Midnight"),
    ("FF020035", "KXCD_MidnightBlue"),
    ("FF280137", "KXCD_MidnightPurple"),
    ("FF667C3E", "KXCD_MilitaryGreen"),
    ("FF7F4E1E", "KXCD_MilkChocolate"),
    ("FF9FFEB0", "KXCD_Mint"),
    ("FF8FFF9F", "KXCD_MintGreen"),
    ("FF0BF77D", "KXCD_MintyGreen"),
    ("FF9D7651", "KXCD_Mocha"),
    ("FF769958", "KXCD_Moss"),
    ("FF658B38", "KXCD_MossGreen"),
    ("FF638B27", "KXCD_MossyGreen"),
    ("FF735C12", "KXCD_Mud"),
    ("FF60460F", "KXCD_MudBrown"),
    ("FF606602", "KXCD_MudGreen"),
    ("FF886806", "KXCD_MuddyBrown"),
    ("FF657432", "KXCD_MuddyGreen"),
    ("FFBFAC05", "KXCD_MuddyYellow"),
    ("FF920A4E", "KXCD_Mulberry"),
    ("FF6C7A0E", "KXCD_MurkyGreen"),
    ("FFBA9E88", "KXCD_Mushroom"),
    ("FFCEB301", "KXCD_Mustard"),
    ("FFAC7E04", "KXCD_MustardBrown"),
    ("FFA8B504", "KXCD_MustardGreen"),
    ("FFD2BD0A", "KXCD_MustardYellow"),
    ("FF3B719F", "KXCD_MutedBlue"),
    ("FF5FA052", "KXCD_MutedGreen"),
    ("FFD1768F", "KXCD_MutedPink"),
    ("FF805B87", "KXCD_MutedPurple"),
    ("FF70B23F", "KXCD_NastyGreen"),
    ("FF01153E", "KXCD_Navy"),
    ("FF001146", "KXCD_NavyBlue"),
    ("FF35530A", "KXCD_NavyGreen"),
    ("FF04D9FF", "KXCD_NeonBlue"),
    ("FF0CFF0C", "KXCD_NeonGreen"),
    ("FFFE019A", "KXCD_NeonPink"),
    ("FFBC13FE", "KXCD_NeonPurple"),
    ("FFFF073A", "KXCD_NeonRed"),
    ("FFCFFF04", "KXCD_NeonYellow"),
    ("FF107AB0", "KXCD_NiceBlue"),
    ("FF040348", "KXCD_NightBlue"),
    ("FF017B92", "KXCD_Ocean"),
    ("FF03719C", "KXCD_OceanBlue"),
    ("FF3D9973", "KXCD_OceanGreen"),
    ("FFBF9B0C", "KXCD_Ocher"),
    ("FFBF9005", "KXCD_Ochre"),
    ("FFC69C04", "KXCD_Ocre"),
    ("FF5684AE", "KXCD_OffBlue"),
    ("FF6BA353", "KXCD_OffGreen"),
    ("FFFFFFE4", "KXCD_OffWhite"),
    ("FFF1F33F", "KXCD_OffYellow"),
    ("FFC77986", "KXCD_OldPink"),
    ("FFC87F89", "KXCD_OldRose"),
    ("FF6E750E", "KXCD_Olive"),
    ("FF645403", "KXCD_OliveBrown"),
    ("FF6F7632", "KXCD_OliveDrab"),
    ("FF677A04", "KXCD_OliveGreen"),
    ("FFC2B709", "KXCD_OliveYellow"),
    ("FFF97306", "KXCD_Orange"),
    ("FFBE6400", "KXCD_OrangeBrown"),
    ("FFFF6F52", "KXCD_OrangePink"),
    ("FFFD411E", "KXCD_OrangeRed"),
    ("FFFFAD01", "KXCD_OrangeYellow"),
    ("FFFD8D49", "KXCD_Orangeish"),
    ("FFFE420F", "KXCD_Orangered"),
    ("FFB16002", "KXCD_OrangeyBrown"),
    ("FFFA4224", "KXCD_OrangeyRed"),
    ("FFFDB915", "KXCD_OrangeyYellow"),
    ("FFFC824A", "KXCD_Orangish"),
    ("FFB25F03", "KXCD_OrangishBrown"),
    ("FFF43605", "KXCD_OrangishRed"),
    ("FFC875C4", "KXCD_Orchid"),
    ("FFFFF9D0", "KXCD_Pale"),
    ("FFB8FFEB", "KXCD_PaleAqua"),
    ("FFD0FEFE", "KXCD_PaleBlue"),
    ("FFB1916E", "KXCD_PaleBrown"),
    ("FFB7FFFA", "KXCD_PaleCyan"),
    ("FFFDDE6C", "KXCD_PaleGold"),
    ("FFC7FDB5", "KXCD_PaleGreen"),
    ("FFFDFDFE", "KXCD_PaleGrey"),
    ("FFEECFFE", "KXCD_PaleLavender"),
    ("FFB1FC99", "KXCD_PaleLightGreen"),
    ("FFE4CBFF", "KXCD_PaleLilac"),
    ("FFBEFD73", "KXCD_PaleLime"),
    ("FFB1FF65", "KXCD_PaleLimeGreen"),
    ("FFD767AD", "KXCD_PaleMagenta"),
    ("FFFED0FC", "KXCD_PaleMauve"),
    ("FFB9CC81", "KXCD_PaleOlive"),
    ("FFB1D27B", "KXCD_PaleOliveGreen"),
    ("FFFFA756", "KXCD_PaleOrange"),
    ("FFFFE5AD", "KXCD_PalePeach"),
    ("FFFFCFDC", "KXCD_PalePink"),
    ("FFB790D4", "KXCD_PalePurple"),
    ("FFD9544D", "KXCD_PaleRed"),
    ("FFFDC1C5", "KXCD_PaleRose"),
    ("FFFFB19A", "KXCD_PaleSalmon"),
    ("FFBDF6FE", "KXCD_PaleSkyBlue"),
    ("FF82CBB2", "KXCD_PaleTeal"),
    ("FFA5FBD5", "KXCD_PaleTurquoise"),
    ("FFCEAEFA", "KXCD_PaleViolet"),
    ("FFFFFF84", "KXCD_PaleYellow"),
    ("FFFEFCAF", "KXCD_Parchment"),
    ("FFA2BFFE", "KXCD_PastelBlue"),
    ("FFB0FF9D", "KXCD_PastelGreen"),
    ("FFFF964F", "KXCD_PastelOrange"),
    ("FFFFBACD", "KXCD_PastelPink"),
    ("FFCAA0FF", "KXCD_PastelPurple"),
    ("FFDB5856", "KXCD_PastelRed"),
    ("FFFFFE71", "KXCD_PastelYellow"),
    ("FFA4BF20", "KXCD_Pea"),
    ("FF8EAB12", "KXCD_PeaGreen"),
    ("FF929901", "KXCD_PeaSoup"),
    ("FF94A617", "KXCD_PeaSoupGreen"),
    ("FFFFB07C", "KXCD_Peach"),
    ("FFFF9A8A", "KXCD_PeachyPink"),
    ("FF016795", "KXCD_PeacockBlue"),
    ("FFCBF85F", "KXCD_Pear"),
    ("FF8E82FE", "KXCD_Periwinkle"),
    ("FF8F99FB", "KXCD_PeriwinkleBlue"),
    ("FF8F8CE7", "KXCD_Perrywinkle"),
    ("FF005F6A", "KXCD_Petrol"),
    ("FFE78EA5", "KXCD_PigPink"),
    ("FF2B5D34", "KXCD_Pine"),
    ("FF0A481E", "KXCD_PineGreen"),
    ("FFFF81C0", "KXCD_Pink"),
    ("FFDB4BDA", "KXCD_PinkPurple"),
    ("FFF5054F", "KXCD_PinkRed"),
    ("FFEF1DE7", "KXCD_PinkOrPurple"),
    ("FFD46A7E", "KXCD_Pinkish"),
    ("FFB17261", "KXCD_PinkishBrown"),
    ("FFC8ACA9", "KXCD_PinkishGrey"),
    ("FFFF724C", "KXCD_PinkishOrange"),
    ("FFD648D7", "KXCD_PinkishPurple"),
    ("FFF10C45", "KXCD_PinkishRed"),
    ("FFD99B82", "KXCD_PinkishTan"),
    ("FFFC86AA", "KXCD_Pinky"),
    ("FFC94CBE", "KXCD_PinkyPurple"),
    ("FFFC2647", "KXCD_PinkyRed"),
    ("FFDDD618", "KXCD_PissYellow"),
    ("FFC0FA8B", "KXCD_Pistachio"),
    ("FF580F41", "KXCD_Plum"),
    ("FF4E0550", "KXCD_PlumPurple"),
    ("FF40FD14", "KXCD_PoisonGreen"),
    ("FF8F7303", "KXCD_Poo"),
    ("FF885F01", "KXCD_PooBrown"),
    ("FF7F5E00", "KXCD_Poop"),
    ("FF7A5901", "KXCD_PoopBrown"),
    ("FF6F7C00", "KXCD_PoopGreen"),
    ("FFB1D1FC", "KXCD_PowderBlue"),
    ("FFFFB2D0", "KXCD_PowderPink"),
    ("FF0804F9", "KXCD_PrimaryBlue"),
    ("FF004577", "KXCD_PrussianBlue"),
    ("FFA57E52", "KXCD_Puce"),
    ("FFA5A502", "KXCD_Puke"),
    ("FF947706", "KXCD_PukeBrown"),
    ("FF9AAE07", "KXCD_PukeGreen"),
    ("FFC2BE0E", "KXCD_PukeYellow"),
    ("FFE17701", "KXCD_Pumpkin"),
    ("FFFB7D07", "KXCD_PumpkinOrange"),
    ("FF0203E2", "KXCD_PureBlue"),
    ("FF7E1E9C", "KXCD_Purple"),
    ("FF632DE9", "KXCD_PurpleBlue"),
    ("FF673A3F", "KXCD_PurpleBrown"),
    ("FF866F85", "KXCD_PurpleGrey"),
    ("FFE03FD8", "KXCD_PurplePink"),
    ("FF990147", "KXCD_PurpleRed"),
    ("FF5D21D0", "KXCD_PurpleOrBlue"),
    ("FFD725DE", "KXCD_PurpleOrPink"),
    ("FF98568D", "KXCD_Purpleish"),
    ("FF6140EF", "KXCD_PurpleishBlue"),
    ("FFDF4EC8", "KXCD_PurpleishPink"),
    ("FF8756E4", "KXCD_Purpley"),
    ("FF5F34E7", "KXCD_PurpleyBlue"),
    ("FF947E94", "KXCD_PurpleyGrey"),
    ("FFC83CB9", "KXCD_PurpleyPink"),
    ("FF94568C", "KXCD_Purplish"),
    ("FF601EF9", "KXCD_PurplishBlue"),
    ("FF6B4247", "KXCD_PurplishBrown"),
    ("FF7A687F", "KXCD_PurplishGrey"),
    ("FFCE5DAE", "KXCD_PurplishPink"),
    ("FFB0054B", "KXCD_PurplishRed"),
    ("FF983FB2", "KXCD_Purply"),
    ("FF661AEE", "KXCD_PurplyBlue"),
    ("FFF075E6", "KXCD_PurplyPink"),
    ("FFBEAE8A", "KXCD_Putty"),
    ("FF014600", "KXCD_RacingGreen"),
    ("FF2CFA1F", "KXCD_RadioactiveGreen"),
    ("FFB00149", "KXCD_Raspberry"),
    ("FF9A6200", "KXCD_RawSienna"),
    ("FFA75E09", "KXCD_RawUmber"),
    ("FFD4FFFF", "KXCD_ReallyLightBlue"),
    ("FFE50000", "KXCD_Red"),
    ("FF8B2E16", "KXCD_RedBrown"),
    ("FFFD3C06", "KXCD_RedOrange"),
    ("FFFA2A55", "KXCD_RedPink"),
    ("FF820747", "KXCD_RedPurple"),
    ("FF9E0168", "KXCD_RedViolet"),
    ("FF8C0034", "KXCD_RedWine"),
    ("FFC44240", "KXCD_Reddish"),
    ("FF7F2B0A", "KXCD_ReddishBrown"),
    ("FF997570", "KXCD_ReddishGrey"),
    ("FFF8481C", "KXCD_ReddishOrange"),
    ("FFFE2C54", "KXCD_ReddishPink"),
    ("FF910951", "KXCD_ReddishPurple"),
    ("FF6E1005", "KXCD_ReddyBrown"),
    ("FF021BF9", "KXCD_RichBlue"),
    ("FF720058", "KXCD_RichPurple"),
    ("FF8AF1FE", "KXCD_RobinEggBlue"),
    ("FF6DEDFD", "KXCD_RobinsEgg"),
    ("FF98EFF9", "KXCD_RobinsEggBlue"),
    ("FFFE86A4", "KXCD_Rosa"),
    ("FFCF6275", "KXCD_Rose"),
    ("FFF7879A", "KXCD_RosePink"),
    ("FFBE013C", "KXCD_RoseRed"),
    ("FFF6688E", "KXCD_RosyPink"),
    ("FFAB1239", "KXCD_Rouge"),
    ("FF0C1793", "KXCD_Royal"),
    ("FF0504AA", "KXCD_RoyalBlue"),
    ("FF4B006E", "KXCD_RoyalPurple"),
    ("FFCA0147", "KXCD_Ruby"),
    ("FFA13905", "KXCD_Russet"),
    ("FFA83C09", "KXCD_Rust"),
    ("FF8B3103", "KXCD_RustBrown"),
    ("FFC45508", "KXCD_RustOrange"),
    ("FFAA2704", "KXCD_RustRed"),
    ("FFCD5909", "KXCD_RustyOrange"),
    ("FFAF2F0D", "KXCD_RustyRed"),
    ("FFFEB209", "KXCD_Saffron"),
    ("FF87AE73", "KXCD_Sage"),
    ("FF88B378", "KXCD_SageGreen"),
    ("FFFF796C", "KXCD_Salmon"),
    ("FFFE7B7C", "KXCD_SalmonPink"),
    ("FFE2CA76", "KXCD_Sand"),
    ("FFCBA560", "KXCD_SandBrown"),
    ("FFFCE166", "KXCD_SandYellow"),
    ("FFC9AE74", "KXCD_Sandstone"),
    ("FFF1DA7A", "KXCD_Sandy"),
    ("FFC4A661", "KXCD_SandyBrown"),
    ("FFFDEE73", "KXCD_SandyYellow"),
    ("FF5C8B15", "KXCD_SapGreen"),
    ("FF2138AB", "KXCD_Sapphire"),
    ("FFBE0119", "KXCD_Scarlet"),
    ("FF3C9992", "KXCD_Sea"),
    ("FF047495", "KXCD_SeaBlue"),
    ("FF53FCA1", "KXCD_SeaGreen"),
    ("FF80F9AD", "KXCD_Seafoam"),
    ("FF78D1B6", "KXCD_SeafoamBlue"),
    ("FF7AF9AB", "KXCD_SeafoamGreen"),
    ("FF18D17B", "KXCD_Seaweed"),
    ("FF35AD6B", "KXCD_SeaweedGreen"),
    ("FF985E2B", "KXCD_Sepia"),
    ("FF01B44C", "KXCD_Shamrock"),
    ("FF02C14D", "KXCD_ShamrockGreen"),
    ("FF7F5F00", "KXCD_Shit"),
    ("FF7B5804", "KXCD_ShitBrown"),
    ("FF758000", "KXCD_ShitGreen"),
    ("FFFE02A2", "KXCD_ShockingPink"),
    ("FF9DB92C", "KXCD_SickGreen"),
    ("FF94B21C", "KXCD_SicklyGreen"),
    ("FFD0E429", "KXCD_SicklyYellow"),
    ("FFA9561E", "KXCD_Sienna"),
    ("FFC5C9C7", "KXCD_Silver"),
    ("FF82CAFC", "KXCD_Sky"),
    ("FF75BBFD", "KXCD_SkyBlue"),
    ("FF516572", "KXCD_Slate"),
    ("FF5B7C99", "KXCD_SlateBlue"),
    ("FF658D6D", "KXCD_SlateGreen"),
    ("FF59656D", "KXCD_SlateGrey"),
    ("FF99CC04", "KXCD_SlimeGreen"),
    ("FFACBB0D", "KXCD_Snot"),
    ("FF9DC100", "KXCD_SnotGreen"),
    ("FF6488EA", "KXCD_SoftBlue"),
    ("FF6FC276", "KXCD_SoftGreen"),
    ("FFFDB0C0", "KXCD_SoftPink"),
    ("FFA66FB5", "KXCD_SoftPurple"),
    ("FF1EF876", "KXCD_Spearmint"),
    ("FFA9F971", "KXCD_SpringGreen"),
    ("FF0A5F38", "KXCD_Spruce"),
    ("FFF2AB15", "KXCD_Squash"),
    ("FF738595", "KXCD_Steel"),
    ("FF5A7D9A", "KXCD_SteelBlue"),
    ("FF6F828A", "KXCD_SteelGrey"),
    ("FFADA587", "KXCD_Stone"),
    ("FF507B9C", "KXCD_StormyBlue"),
    ("FFFCF679", "KXCD_Straw"),
    ("FFFB2943", "KXCD_Strawberry"),
    ("FF0C06F7", "KXCD_StrongBlue"),
    ("FFFF0789", "KXCD_StrongPink"),
    ("FFFFDF22", "KXCD_SunYellow"),
    ("FFFFC512", "KXCD_Sunflower"),
    ("FFFFDA03", "KXCD_SunflowerYellow"),
    ("FFFFF917", "KXCD_SunnyYellow"),
    ("FFFFFD37", "KXCD_SunshineYellow"),
    ("FF698339", "KXCD_Swamp"),
    ("FF748500", "KXCD_SwampGreen"),
    ("FFD1B26F", "KXCD_Tan"),
    ("FFAB7E4C", "KXCD_TanBrown"),
    ("FFA9BE70", "KXCD_TanGreen"),
    ("FFFF9408", "KXCD_Tangerine"),
    ("FFB9A281", "KXCD_Taupe"),
    ("FF65AB7C", "KXCD_Tea"),
    ("FFBDF8A3", "KXCD_TeaGreen"),
    ("FF029386", "KXCD_Teal"),
    ("FF01889F", "KXCD_TealBlue"),
    ("FF25A36F", "KXCD_TealGreen"),
    ("FF24BCA8", "KXCD_Tealish"),
    ("FF0CDC73", "KXCD_TealishGreen"),
    ("FFC9643B", "KXCD_TerraCotta"),
    ("FFCB6843", "KXCD_Terracota"),
    ("FFCA6641", "KXCD_Terracotta"),
    ("FF7BF2DA", "KXCD_TiffanyBlue"),
    ("FFEF4026", "KXCD_Tomato"),
    ("FFEC2D01", "KXCD_TomatoRed"),
    ("FF13BBAF", "KXCD_Topaz"),
    ("FFC7AC7D", "KXCD_Toupe"),
    ("FF61DE2A", "KXCD_ToxicGreen"),
    ("FF2A7E19", "KXCD_TreeGreen"),
    ("FF010FCC", "KXCD_TrueBlue"),
    ("FF089404", "KXCD_TrueGreen"),
    ("FF06C2AC", "KXCD_Turquoise"),
    ("FF06B1C4", "KXCD_TurquoiseBlue"),
    ("FF04F489", "KXCD_TurquoiseGreen"),
    ("FF75B84F", "KXCD_TurtleGreen"),
    ("FF4E518B", "KXCD_Twilight"),
    ("FF0A437A", "KXCD_TwilightBlue"),
    ("FF31668A", "KXCD_UglyBlue"),
    ("FF7D7103", "KXCD_UglyBrown"),
    ("FF7A9703", "KXCD_UglyGreen"),
    ("FFCD7584", "KXCD_UglyPink"),
    ("FFA442A0", "KXCD_UglyPurple"),
    ("FFD0C101", "KXCD_UglyYellow"),
    ("FF2000B1", "KXCD_Ultramarine"),
    ("FF1805DB", "KXCD_UltramarineBlue"),
    ("FFB26400", "KXCD_Umber"),
    ("FF750851", "KXCD_Velvet"),
    ("FFF4320C", "KXCD_Vermillion"),
    ("FF000133", "KXCD_VeryDarkBlue"),
    ("FF1D0200", "KXCD_VeryDarkBrown"),
    ("FF062E03", "KXCD_VeryDarkGreen"),
    ("FF2A0134", "KXCD_VeryDarkPurple"),
    ("FFD5FFFF", "KXCD_VeryLightBlue"),
    ("FFD3B683", "KXCD_VeryLightBrown"),
    ("FFD1FFBD", "KXCD_VeryLightGreen"),
    ("FFFFF4F2", "KXCD_VeryLightPink"),
    ("FFF6CEFC", "KXCD_VeryLightPurple"),
    ("FFD6FFFE", "KXCD_VeryPaleBlue"),
    ("FFCFFDBC", "KXCD_VeryPaleGreen"),
    ("FF0339F8", "KXCD_VibrantBlue"),
    ("FF0ADD08", "KXCD_VibrantGreen"),
    ("FFAD03DE", "KXCD_VibrantPurple"),
    ("FF9A0EEA", "KXCD_Violet"),
    ("FF510AC9", "KXCD_VioletBlue"),
    ("FFFB5FFC", "KXCD_VioletPink"),
    ("FFA50055", "KXCD_VioletRed"),
    ("FF1E9167", "KXCD_Viridian"),
    ("FF152EFF", "KXCD_VividBlue"),
    ("FF2FEF10", "KXCD_VividGreen"),
    ("FF9900FA", "KXCD_VividPurple"),
    ("FFA2A415", "KXCD_Vomit"),
    ("FF89A203", "KXCD_VomitGreen"),
    ("FFC7C10C", "KXCD_VomitYellow"),
    ("FF4B57DB", "KXCD_WarmBlue"),
    ("FF964E02", "KXCD_WarmBrown"),
    ("FF978A84", "KXCD_WarmGrey"),
    ("FFFB5581", "KXCD_WarmPink"),
    ("FF952E8F", "KXCD_WarmPurple"),
    ("FFBCF5A6", "KXCD_WashedOutGreen"),
    ("FF0E87CC", "KXCD_WaterBlue"),
    ("FFFD4659", "KXCD_Watermelon"),
    ("FF3AE57F", "KXCD_WeirdGreen"),
    ("FFFBDD7E", "KXCD_Wheat"),
    ("FFFFFFFF", "KXCD_White"),
    ("FF3778BF", "KXCD_WindowsBlue"),
    ("FF80013F", "KXCD_Wine"),
    ("FF7B0323", "KXCD_WineRed"),
    ("FF20F986", "KXCD_Wintergreen"),
    ("FFA87DC2", "KXCD_Wisteria"),
    ("FFFFFF14", "KXCD_Yellow"),
    ("FFB79400", "KXCD_YellowBrown"),
    ("FFC0FB2D", "KXCD_YellowGreen"),
    ("FFCB9D06", "KXCD_YellowOchre"),
    ("FFFCB001", "KXCD_YellowOrange"),
    ("FFFFE36E", "KXCD_YellowTan"),
    ("FFC8FD3D", "KXCD_YellowOrGreen"),
    ("FFBBF90F", "KXCD_Yellowgreen"),
    ("FFFAEE66", "KXCD_Yellowish"),
    ("FF9B7A01", "KXCD_YellowishBrown"),
    ("FFB0DD16", "KXCD_YellowishGreen"),
    ("FFFFAB0F", "KXCD_YellowishOrange"),
    ("FFFCFC81", "KXCD_YellowishTan"),
    ("FFAE8B0C", "KXCD_YellowyBrown"),
    ("FFBFF128", "KXCD_YellowyGreen"),
    ("FFEFDECD", "Crayon_Almond"),
    ("FFCD9575", "Crayon_AntiqueBrass"),
    ("FFFDD9B5", "Crayon_Apricot"),
    ("FF78DBE2", "Crayon_Aquamarine"),
    ("FF87A96B", "Crayon_Asparagus"),
    ("FFFFA474", "Crayon_AtomicTangerine"),
    ("FFFAE7B5", "Crayon_BananaMania"),
    ("FF9F8170", "Crayon_Beaver"),
    ("FFFD7C6E", "Crayon_Bittersweet"),
    ("FF000000", "Crayon_Black"),
    ("FF1F75FE", "Crayon_Blue"),
    ("FFA2A2D0", "Crayon_BlueBell"),
    ("FF0D98BA", "Crayon_BlueGreen"),
    ("FF7366BD", "Crayon_BlueViolet"),
    ("FFDE5D83", "Crayon_Blush"),
    ("FFCB4154", "Crayon_BrickRed"),
    ("FFB4674D", "Crayon_Brown"),
    ("FFFF7F49", "Crayon_BurntOrange"),
    ("FFEA7E5D", "Crayon_BurntSienna"),
    ("FFB0B7C6", "Crayon_CadetBlue"),
    ("FFFFFF99", "Crayon_Canary"),
    ("FF00CC99", "Crayon_CaribbeanGreen"),
    ("FFFFAACC", "Crayon_CarnationPink"),
    ("FFDD4492", "Crayon_Cerise"),
    ("FF1DACD6", "Crayon_Cerulean"),
    ("FFBC5D58", "Crayon_Chestnut"),
    ("FFDD9475", "Crayon_Copper"),
    ("FF9ACEEB", "Crayon_Cornflower"),
    ("FFFFBCD9", "Crayon_CottonCandy"),
    ("FFFDDB6D", "Crayon_Dandelion"),
    ("FF2B6CC4", "Crayon_Denim"),
    ("FFEFCDB8", "Crayon_DesertSand"),
    ("FF6E5160", "Crayon_Eggplant"),
    ("FFCEFF1D", "Crayon_ElectricLime"),
    ("FF71BC78", "Crayon_Fern"),
    ("FF6DAE81", "Crayon_ForestGreen"),
    ("FFC364C5", "Crayon_Fuchsia"),
    ("FFCC6666", "Crayon_FuzzyWuzzy"),
    ("FFE7C697", "Crayon_Gold"),
    ("FFFCD975", "Crayon_Goldenrod"),
    ("FFA8E4A0", "Crayon_GrannySmithApple"),
    ("FF95918C", "Crayon_Gray"),
    ("FF1CAC78", "Crayon_Green"),
    ("FFF0E891", "Crayon_GreenYellow"),
    ("FFFF1DCE", "Crayon_HotMagenta"),
    ("FFB2EC5D", "Crayon_Inchworm"),
    ("FF5D76CB", "Crayon_Indigo"),
    ("FFCA3767", "Crayon_JazzberryJam"),
    ("FF3BB08F", "Crayon_JungleGreen"),
    ("FFFEFE22", "Crayon_LaserLemon"),
    ("FFFCB4D5", "Crayon_Lavender"),
    ("FFFFBD88", "Crayon_MacaroniandCheese"),
    ("FFF664AF", "Crayon_Magenta"),
    ("FFCD4A4C", "Crayon_Mahogany"),
    ("FF979AAA", "Crayon_Manatee"),
    ("FFFF8243", "Crayon_MangoTango"),
    ("FFC8385A", "Crayon_Maroon"),
    ("FFEF98AA", "Crayon_Mauvelous"),
    ("FFFDBCB4", "Crayon_Melon"),
    ("FF1A4876", "Crayon_MidnightBlue"),
    ("FF30BA8F", "Crayon_MountainMeadow"),
    ("FF1974D2", "Crayon_NavyBlue"),
    ("FFFFA343", "Crayon_NeonCarrot"),
    ("FFBAB86C", "Crayon_OliveGreen"),
    ("FFFF7538", "Crayon_Orange"),
    ("FFE6A8D7", "Crayon_Orchid"),
    ("FF414A4C", "Crayon_OuterSpace"),
    ("FFFF6E4A", "Crayon_OutrageousOrange"),
    ("FF1CA9C9", "Crayon_PacificBlue"),
    ("FFFFCFAB", "Crayon_Peach"),
    ("FFC5D0E6", "Crayon_Periwinkle"),
    ("FFFDDDE6", "Crayon_PiggyPink"),
    ("FF158078", "Crayon_PineGreen"),
    ("FFFC74FD", "Crayon_PinkFlamingo"),
    ("FFF78FA7", "Crayon_PinkSherbert"),
    ("FF8E4585", "Crayon_Plum"),
    ("FF7442C8", "Crayon_PurpleHeart"),
    ("FF9D81BA", "Crayon_PurpleMountainsMajesty"),
    ("FFFE4EDA", "Crayon_PurplePizzazz"),
    ("FFFF496C", "Crayon_RadicalRed"),
    ("FFD68A59", "Crayon_RawSienna"),
    ("FFFF48D0", "Crayon_RazzleDazzleRose"),
    ("FFE3256B", "Crayon_Razzmatazz"),
    ("FFEE204D", "Crayon_Red"),
    ("FFFF5349", "Crayon_RedOrange"),
    ("FFC0448F", "Crayon_RedViolet"),
    ("FF1FCECB", "Crayon_RobinsEggBlue"),
    ("FF7851A9", "Crayon_RoyalPurple"),
    ("FFFF9BAA", "Crayon_Salmon"),
    ("FFFC2847", "Crayon_Scarlet"),
    ("FF76FF7A", "Crayon_ScreamingGreen"),
    ("FF93DFB8", "Crayon_SeaGreen"),
    ("FFA5694F", "Crayon_Sepia"),
    ("FF8A795D", "Crayon_Shadow"),
    ("FF45CEA2", "Crayon_Shamrock"),
    ("FFFB7EFD", "Crayon_ShockingPink"),
    ("FFCDC5C2", "Crayon_Silver"),
    ("FF80DAEB", "Crayon_SkyBlue"),
    ("FFECEABE", "Crayon_SpringGreen"),
    ("FFFFCF48", "Crayon_Sunglow"),
    ("FFFD5E53", "Crayon_SunsetOrange"),
    ("FFFAA76C", "Crayon_Tan"),
    ("FFFC89AC", "Crayon_TickleMePink"),
    ("FFDBD7D2", "Crayon_Timberwolf"),
    ("FF17806D", "Crayon_TropicalRainForest"),
    ("FFDEAA88", "Crayon_Tumbleweed"),
    ("FF77DDE7", "Crayon_TurquoiseBlue"),
    ("FFFFFF66", "Crayon_UnmellowYellow"),
    ("FF926EAE", "Crayon_VioletPurple"),
    ("FFF75394", "Crayon_VioletRed"),
    ("FFFFA089", "Crayon_VividTangerine"),
    ("FF8F509D", "Crayon_VividViolet"),
    ("FFFFFFFF", "Crayon_White"),
    ("FFA2ADD0", "Crayon_WildBlueYonder"),
    ("FFFF43A4", "Crayon_WildStrawberry"),
    ("FFFC6C85", "Crayon_WildWatermelon"),
    ("FFCDA4DE", "Crayon_Wisteria"),
    ("FFFCE883", "Crayon_Yellow"),
    ("FFC5E384", "Crayon_YellowGreen"),
    ("FFFFAE42", "Crayon_YellowOrange"),
});

foreach ((string hex, string name) in additional_colors)
    if (colors.All(t => t.Item1 != hex && t.Item2 != name))
        colors.Add((hex, name));


var members = new string[]
{
    @"public readonly double Average => ($R + $G + $B) / 3;",
    @"public readonly double CIEGray => (.299 * $R) + (.587 * $G) + (.114 * $B);",
    @"public readonly (double L, double a, double b) CIELAB94 => ToCIELAB94();",
    @"public (double Hue, double Saturation, double Luminosity) HSL
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        readonly get => ToHSL();
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set
        {
            $type color = FromHSL(value.Hue, value.Saturation, value.Luminosity);
            ($R, $G, $B) = (color.$R, color.$G, color.$B);
        }
    }",
    @"public (double Hue, double Saturation, double Value) HSV
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        readonly get => ToHSV();
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set
        {
            $type color = FromHSV(value.Hue, value.Saturation, value.Value);
            ($R, $G, $B) = (color.$R, color.$G, color.$B);
        }
    }",
    @"public (double Hue, double Chroma, double Luma) HCL
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        readonly get => ToHCL();
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set
        {
            $type color = FromHCL(value.Hue, value.Chroma, value.Luma);
            ($R, $G, $B) = (color.$R, color.$G, color.$B);
        }
    }",
    @"public (double Hue, double Chroma, double Y) HCY
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        readonly get => ToHCY();
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set
        {
            $type color = FromHCY(value.Hue, value.Chroma, value.Y);
            ($R, $G, $B) = (color.$R, color.$G, color.$B);
        }
    }",
    @"public (double C, double M, double Y, double K) CMYK
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        readonly get => ToCMYK();
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set
        {
            $type color = FromCMYK(value.C, value.M, value.Y, value.K);
            ($R, $G, $B) = (color.$R, color.$G, color.$B);
        }
    }",
    @"public (double Y, double U, double V) YUV
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        readonly get => ToYUV();
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set
        {
            $type color = FromYUV(value.Y, value.U, value.V);
            ($R, $G, $B) = (color.$R, color.$G, color.$B);
        }
    }",
    @"public (double Y, double I, double Q) YIQ
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        readonly get => ToYIQ();
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set
        {
            $type color = FromYIQ(value.Y, value.I, value.Q);
            ($R, $G, $B) = (color.$R, color.$G, color.$B);
        }
    }",
    @"public readonly ($type @this, $type Triadic1, $type Triadic2) Triadic
    {
        get
        {
            (double h, double s, double l) = ToHSL();

            return (
                this,
                FromHSL(h + Math.PI * 2 / 3, s, l, $A),
                FromHSL(h + Math.PI * 4 / 3, s, l, $A)
            );
        }
    }",
    @"public readonly $type[] Analogous
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            $type copy = this;

            return Enumerable.Range(-3, 7).Select(i => copy.Rotate(i * Math.PI / 6)).ToArray();
        }
    }",
    @"public readonly $type[] Neutrals
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get
        {
            $type copy = this;

            return Enumerable.Range(-3, 7).Select(i => copy.Rotate(i * Math.PI / 12)).ToArray();
        }
    }",
    @"public readonly $type Normalized
    {
        get
        {
            $type copy = this;
            double max = Math.Max(copy.$R, Math.Max(copy.$G, copy.$B));

            if (max > 0)
            {
                copy.$R /= max;
                copy.$G /= max;
                copy.$B /= max;
            }

            return copy;
        }
    }",
    @"public $type(uint argb)
        : this((int)argb)
    {
    }",
    @"public $type(double r, double g, double b)
        : this(r, g, b, 1)
    {
    }",
    @"public $type($type color)
        : this(color, color.$A)
    {
    }",
    @"public $type($type color, double α)
        : this(color.$R, color.$G, color.$B, α)
    {
    }",
    @"public $type(double gray)
        : this(gray, 1.0)
    {
    }",
    @"public $type(double gray, double α)
        : this(gray, gray, gray, α)
    {
    }",
    @"public $type($type* ptr)
        : this(*ptr)
    {
    }",
    @"public $type($type** ptr)
        : this(**ptr)
    {
    }",
    @"public $type(double r, double g, double b, double α)
        : this()
    {
        $A = α;
        $R = r;
        $G = g;
        $B = b;
    }",
    @"public $type(int argb) : this() => $HEX = argb;",
    @"",
    @"public readonly $type Rotate(Scalar φ)
    {
        φ += Scalar.Tau;
        φ %= Scalar.Tau;

        if (φ.IsZero)
            return this;
        else if (φ.Is(Scalar.Pi))
            return Complement;

        (double h, double s, double l) = ToHSL();

        return FromHSL(h + φ, s, l, $A);
    }",
    @"public readonly $type[] GetNeutrals(Scalar φ_step, int count)
    {
        $type copy = this;

        return Enumerable.Range(-count / 2, count).Select(i => copy.Rotate(i * φ_step)).ToArray();
    }",
    @"public readonly $type CorrectGamma(Scalar gamma) => new $type(
        Math.Pow($R, 1 / gamma),
        Math.Pow($G, 1 / gamma),
        Math.Pow($B, 1 / gamma),
        $A
    );",
    @"public readonly Scalar EucledianRGBDistanceTo($type other) => ((Vector3)this).DistanceTo(other);",
    @"public readonly Scalar EucledianRGBADistanceTo($type other) => ((Vector4)this).DistanceTo(other);",
    @"public readonly Scalar CIALAB94DistanceTo(IColor other)
    {
        (double L1, double a1, double b1) = ToCIELAB94();
        (double L2, double a2, double b2) = other.ToCIELAB94();

        double δL = L1 - L2;
        double δa = a1 - a2;
        double δb = b1 - b2;

        double c1 = Math.Sqrt(a1 * a1 + b1 *b1);
        double c2 = Math.Sqrt(a2 * a2 + b2 * b2);
        double δC = c1 - c2;
        double δH = δa * δa + δb * δb - δC * δC;

        δH = δH < 0 ? 0 : Math.Sqrt(δH);

        double sc = 1 + .045 * c1;
        double sh = 1 + .015 * c1;

        double δCkcsc = δC / sc;
        double δHkhsh = δH / sh;

        double i = δL * δL + δCkcsc * δCkcsc + δHkhsh * δHkhsh;

        return i < 0 ? 0 : Math.Sqrt(i);
    }",
    // @"public readonly void Deconstruct(out double r, out double g, out double b, out double α)
    // {
    //     r = $R;
    //     g = $G;
    //     b = $B;
    //     α = $A;
    // }",
    // @"public readonly void Deconstruct(out double r, out double g, out double b) => Deconstruct(out r, out g, out b, out _);",
    @"public readonly (double H, double S, double L) ToHSL()
    {
        double a = Math.Min(Math.Min($R, $G), $B);
        double b = Math.Max(Math.Max($R, $G), $B);
        double δ = b - a;
        double l = (b + a) / 2;
        double h, s;

        if (δ < 1e-5)
            s = h = 0;
        else
        {
            s = δ / (l < .5 ? b + a : 2 - b - a);

            double δr = (b - $R) / δ;
            double δg = (b - $G) / δ;
            double δb = (b - $B) / δ;

            h = $R == b ? δb - δg :
                $G == b ? 2 + δr - δb :
                          4 + δg - δr;

            h *= 60;

            if (h < 0)
                h += 360;

            h *= Math.PI / 180;
        }

        return (h, s, l);
    }",
    @"public readonly (double R, double G, double B) ToRGB() => ($R, $G, $B);",
    @"public readonly (double H, double S, double V) ToHSV()
    {
        (double H, double S, double L) = ToHSL();
        double V = S * Math.Min(L, 1 - L) + L;

        return (H, V > 0 ? 2 - 2 * L / V : 0, V);
    }",
    @"public readonly (double H, double C, double Y) ToHCY()
    {
        Vector3 HCV = ToHCV();
        double Y = (Vector3)this * HCYwts;
        double Z = FromHue(HCV.X) * HCYwts;
        double C = Y < Z ? Z / (1e-10 + Y) : (1 - Z) / (1e-10 + 1 - Y);

        return (HCV.X, HCV.Y * C, Y);
    }",
    @"public readonly (double L, double a, double b) ToCIELAB94()
    {
        static double pre(double channel) => channel > .04045 ? Math.Pow((channel + .055) / 1.055, 2.4) : channel / 12.92;
        static double post(double channel) => channel > .008856 ? Math.Pow(channel, 1 / 3) : (7.787 * channel) + 16 / 116;

        double rf = pre($R);
        double gf = pre($G);
        double bf = pre($B);
        double x = (rf * .4124 + gf * .3576 + bf * .1805) /  .95047;
        double y = (rf * .2126 + gf * .7152 + bf * .0722) / 1.00000;
        double z = (rf * .0193 + gf * .1192 + bf * .9505) / 1.08883;

        x = post(x);
        y = post(y);
        z = post(z);

        return (
            L: (116 * y) - 16,
            a: 500 * (x - y),
            b: 200 * (y - z)
        );
    }",
    @"public readonly (double C, double M, double Y, double K) ToCMYK()
    {
        double K = 1 - Math.Max(Math.Max($R, $G), $B);

        return (
            (1 - $R - K) / (1 - K),
            (1 - $G - K) / (1 - K),
            (1 - $B - K) / (1 - K),
            K
        );
    }",
    @"public readonly DiscreteSpectrum ToSpectrum()
    {
        $type color = this;
        Dictionary<Wavelength, double> intensities = Wavelength.VisibleWavelengths.ToDictionary(LINQ.id, w => color.GetIntensity(w, 0));

        return new DiscreteSpectrum(intensities);
    }",
    @"public readonly double GetIntensity(Wavelength wavelength, double tolerance = 1e-1)
    {
        (Wavelength lo, Wavelength hi) = (wavelength.InNanometers + tolerance, wavelength.InNanometers - tolerance);
        double dist_mid = wavelength.ToColor().CIALAB94DistanceTo(this);

        if (tolerance < Scalar.ComputationalEpsilon)
            return dist_mid;

        double dist_lo = lo.ToColor().CIALAB94DistanceTo(this);
        double dist_hi = hi.ToColor().CIALAB94DistanceTo(this);

        return (dist_lo * .2 + dist_mid * .6 + dist_hi * .2).Clamp();
    }",
    @"public readonly (double Y, double U, double V) ToYUV() => (
         .257 * $R + .504 * $G + .098 * $B + 16,
        -.148 * $R - .291 * $G + .439 * $B + 128,
         .439 * $R - .368 * $G - .071 * $B + 128
    );",
    @"public readonly (double Y, double I, double Q) ToYIQ() => (
        .299  * $R + .587  * $G + .114  * $B,
        .5959 * $R - .2746 * $G - .3213 * $B,
        .2115 * $R - .5227 * $G + .3112 * $B
    );",
    @"public readonly (double Y, double Cb, double Cr) ToYCbCr() => (
         .299   * $R + .587   * $G + .114   * $B,
        -.16874 * $R - .33126 * $G + .5     * $B + 128,
         .5     * $R - .41869 * $G - .08131 * $B + 128
    );",
    @"public readonly (double H, double C, double V) ToHCV()
    {
        Vector4 P = $G < $B ? new($B, $G, -1, 2 / 3.0) : new($G, $B, 0, -1 / 3.0);
        Vector4 Q = $R < P.x ? new(P.XYW, $R) : new($R, P.YZX);
        double C = Q.x - Math.Min(Q.W, Q.Y);
        double H = Math.Abs((Q.W - Q.Y) / (6 * C + 1e-10) + Q.Z);

        return (H, C, Q.X);
    }",
    @"public readonly (double H, double C, double L) ToHCL()
    {
        double H = 0;
        double U = Math.Min($R, Math.Min($G, $B));
        double V = Math.Max($R, Math.Max($G, $B));
        double Q = HCLgamma / HCLy0;
        double C = V - U;

        if (C != 0)
        {
            H = Math.Atan2($G - $B, $R - $G) / Math.PI;
            Q *= U / V;
        }

        Q = Math.Exp(Q);
        H = (H / 2 - Math.Min(H % 1, -H % 1) / 6) % 1;
        C *= Q;

        double L = (-U * (1 - Q) + V * Q) / (HCLmaxL * 2);

        return (H, C, L);
    }",
    @"public readonly ConsoleColor ToConsoleColor(ConsoleColorScheme color_scheme)
    {
        $type copy = this;
        Scalar norm = Scalar.Sqrt(3);

        return (from kvp in IColor.ConsoleColorSchemes[color_scheme]
                orderby copy.EucledianRGBDistanceTo(($type)kvp.Value) / norm ascending
                select kvp.Key).FirstOrDefault();
    }",
    @"public readonly int CompareTo([AllowNull] $type other)
    {
        int dist = ((Vector3)this).Length.CompareTo(((Vector3)other).Length);

        return dist is 0 ? $A.CompareTo(other.$A) : dist;
    }",
    @"public readonly double DistanceTo($type other, ColorEqualityMetric metric) => metric switch
    {
        ColorEqualityMetric.RGBAChannels => Math.Abs($R - other.$R)
                                          + Math.Abs($G - other.$G)
                                          + Math.Abs($B - other.$B)
                                          + Math.Abs($A - other.$A),
        ColorEqualityMetric.RGBChannels => Math.Abs($R - other.$R)
                                         + Math.Abs($G - other.$G)
                                         + Math.Abs($B - other.$B),
        ColorEqualityMetric.RChannel => Math.Abs($R - other.$R),
        ColorEqualityMetric.GChannel => Math.Abs($G - other.$G),
        ColorEqualityMetric.BChannel => Math.Abs($B - other.$B),
        ColorEqualityMetric.Alpha => Math.Abs($A - other.$A),
        ColorEqualityMetric.RGChannels => Math.Abs($R - other.$R)
                                        + Math.Abs($G - other.$G),
        ColorEqualityMetric.RBChannels => Math.Abs($R - other.$R)
                                        + Math.Abs($B - other.$B),
        ColorEqualityMetric.RAChannels => Math.Abs($R - other.$R)
                                        + Math.Abs($A - other.$A),
        ColorEqualityMetric.GBChannels => Math.Abs($G - other.$G)
                                        + Math.Abs($B - other.$B),
        ColorEqualityMetric.GAChannels => Math.Abs($G - other.$G)
                                        + Math.Abs($A - other.$A),
        ColorEqualityMetric.BAChannels => Math.Abs($A - other.$A)
                                        + Math.Abs($B - other.$B),
        ColorEqualityMetric.RGAChannels => Math.Abs($R - other.$R)
                                         + Math.Abs($G - other.$G)
                                         + Math.Abs($A - other.$A),
        ColorEqualityMetric.RBAChannels => Math.Abs($R - other.$R)
                                         + Math.Abs($B - other.$B)
                                         + Math.Abs($A - other.$A),
        ColorEqualityMetric.GBAChannels => Math.Abs($G - other.$G)
                                         + Math.Abs($B - other.$B)
                                         + Math.Abs($A - other.$A),
        ColorEqualityMetric.CChannel => Math.Abs(ToCMYK().C - other.ToCMYK().C),
        ColorEqualityMetric.MChannel => Math.Abs(ToCMYK().M - other.ToCMYK().M),
        ColorEqualityMetric.YChannel => Math.Abs(ToCMYK().Y - other.ToCMYK().Y),
        ColorEqualityMetric.KChannel => Math.Abs(ToCMYK().K - other.ToCMYK().K),
        ColorEqualityMetric.Hue => Math.Abs(ToHSL().H - other.ToHSL().H),
        ColorEqualityMetric.Saturation => Math.Abs(ToHSL().S - other.ToHSL().S),
        ColorEqualityMetric.Luminance => Math.Abs(ToHSL().L - other.ToHSL().L),
        ColorEqualityMetric.CIALAB94 => CIALAB94DistanceTo(other),
        ColorEqualityMetric.CIEGray => Math.Abs(CIEGray - other.CIEGray),
        ColorEqualityMetric.Average => Math.Abs(Average - other.Average),
        ColorEqualityMetric.EucledianRGBLength => EucledianRGBDistanceTo(other),
        ColorEqualityMetric.EucledianRGBALength => EucledianRGBADistanceTo(other),
        ColorEqualityMetric.LegacyConsoleColor => FromConsoleColor(ToConsoleColor(ConsoleColorScheme.Legacy), ConsoleColorScheme.Legacy).DistanceTo(
            FromConsoleColor(other.ToConsoleColor(ConsoleColorScheme.Legacy), ConsoleColorScheme.Legacy),
            ColorEqualityMetric.RGAChannels
        ),
        ColorEqualityMetric.Windows10ConsoleColor => FromConsoleColor(ToConsoleColor(ConsoleColorScheme.Windows10), ConsoleColorScheme.Windows10).DistanceTo(
            FromConsoleColor(other.ToConsoleColor(ConsoleColorScheme.Windows10), ConsoleColorScheme.Windows10),
            ColorEqualityMetric.RGAChannels
        ),
        _ => throw new ArgumentOutOfRangeException(nameof(metric)),
    };",
    @"public override readonly int GetHashCode() => $HEX;",
    @"public override bool Equals(object? other) => other is $type c && Equals(c);",
    @"public readonly bool Equals($type other) => $HEX == other.$HEX;",
    @"public readonly bool Equals($type other, ColorEqualityMetric metric) => Equals(other, metric, Scalar.ComputationalEpsilon);",
    @"public readonly bool Equals($type other, ColorEqualityMetric metric, double tolerance) => Equals(other, new(tolerance, metric));",
    @"public readonly bool Equals($type other, ColorTolerance tolerance) => DistanceTo(other, tolerance.Metric) <= tolerance.Tolerance;",
    @"public static $type FromConsoleColor(ConsoleColor color, ConsoleColorScheme color_scheme) => ($type)IColor.ConsoleColorSchemes[color_scheme][color];",
    @"public static $type FromComplexWrapped(Complex c) => FromComplexWrapped(c, 1);",
    @"public static $type FromComplexWrapped(Complex c, double α)
    {
        Scalar l = c.Length;
        Scalar i = 1L << (int)Math.Log2(l);

        if (l < 1)
            return FromHSL(c.Argument, 1, l / 2, α);

        l %= i;
        l /= (long)i << 1;
        l *= 4 / 5d;
        l += 1 / 5d;

        return FromHSL(c.Argument, 1, l, α);
    }",
    @"public static $type FromComplexSmooth(Complex c) => FromComplexSmooth(c, 1);",
    @"public static $type FromComplexSmooth(Complex c, double α) => FromComplexSmooth(c, α, .95);",
    @"public static $type FromComplexSmooth(Complex c, double α, Scalar white_shift) => FromHSL(c.Argument, 1, 1 - white_shift.Clamp().Power(c.Length), α);",
    @"public static $type FromRGB(double R, double G, double B) => FromRGB(R, G, B, 1);",
    @"public static $type FromRGB(double R, double G, double B, double α) => new $type(R, G, B, α);",
    @"public static $type FromHSL(double H, double S, double L) => FromHSL(H, S, L, 1);",
    @"public static $type FromHSL(double H, double S, double L, double α)
    {
        if (S.IsZero())
        {
            byte gray = (byte)Math.Round(L * 255);

            return new $type(gray, gray, gray, α);
        }
        else
        {
            double t2 = L < .5 ? L * (1 + S) : L + S - (L * S);
            double t1 = (2 * L) - t2;

            H *= 180 / Math.PI;

            return new $type(
                calc(H + 120, t1, t2),
                calc(H, t1, t2),
                calc(H - 120, t1, t2),
                α
            );

            static double calc(double h, double t1, double t2)
            {
                h = (h + 360) % 360;

                return h < 60 ? t1 + ((t2 - t1) * h / 60)
                     : h < 180 ? t2
                     : h < 240 ? t1 + ((t2 - t1) * (240 - h) / 60)
                     : t1;
            }
        }
    }",
    @"public static $type FromHue(double hue) => FromHSV(hue, 1, 1, 1);",
    @"public static $type FromHSV(double H, double S, double V) => FromHSV(H, S, V, 1);",
    @"public static $type FromHSV(double H, double S, double V, double α)
    {
        double L = V - V * S / 2;
        double m = Math.Min(L, 1 - L);

        return FromHSL(H, m > 0 ? (V - L) / m : 0, L, α);
    }",
    @"public static $type FromHCY(double H, double C, double Y) => FromHCY(H, C, Y, 1);",
    @"public static $type FromHCY(double H, double C, double Y, double α)
    {
        $type RGB = FromHue(H);
        double Z = RGB * HCYwts;

        if (Y < Z)
            C *= Y / Z;
        else if (Z < 1)
            C *= (1 - Y) / (1 - Z);

        return new Vector4((RGB - Z) * C + Y, α);
    }",
    @"public static $type FromCIELAB94(double L, double a, double b) => FromCIELAB94(L, a, b, 1);",
    @"public static $type FromCIELAB94(double L, double a, double b, double α)
    {
        double y = (L + 16) / 116;
        double x = a / 500 + y;
        double z = y - b / 200;
        void pre(double fac, ref double channel)
        {
            double c3 = channel * channel * channel;

            channel = fac * ((c3 > .008856) ? c3 : (channel - 16 / 116) / 7.787);
        }
        double post(double channel) => ((channel > .0031308) ? (1.055 * Math.Pow(channel, 1 / 2.4) - .055) : 12.92 * channel).Clamp();

        pre( .95047, ref x);
        pre(1.00000, ref y);
        pre(1.08883, ref z);

        double rf = post(3.2406 * x - 1.5372 * y -  .4986 * z);
        double gf = post(-.9689 * x + 1.8758 * y +  .0415 * z);
        double bf = post( .0557 * x -  .2040 * y + 1.0570 * z);

        return new $type(rf, gf, bf, α);
    }",
    @"public static $type FromXYZ(double X, double Y) => FromXYZ(X, Y, 0);",
    @"public static $type FromXYZ(double X, double Y, double Z) => FromXYZ(X, Y, Z, 1);",
    @"public static $type FromXYZ(double X, double Y, double Z, double α)
    {
        Matrix3 M = (
            2.28783845614809,    -.833367666472978,  -.45447078967511,
            -.511651382108328,   1.42275838011598,    .0888930019923529,
             .00572041000477002, -.0159068489924701, 1.0101864389877
        );

        return new Vector4(M * (X, Y, Z), α);
    }",
    @"public static $type FromUV(double U, double V) => FromUV(U, V, 1);",
    @"public static $type FromUV(double U, double V, double α) => FromXYZ((9 * U) / ((6 * U) - (16 * V) + 12), (4 * V) / ((6 * U) - (16 * V) + 12), α);",
    @"public static $type FromYUV(double Y, double U, double V) => FromYUV(Y, U, V, 1);",
    @"public static $type FromYUV(double Y, double U, double V, double α)
    {
        Y -= 16;
        U -= 128;
        V -= 128;

        return new $type(
            1.164 * Y + 1.596 * V,
            1.164 * Y -  .392 * U - .813 * V,
            1.164 * Y + 2.017 * U,
            α
        );
    }",
    @"public static $type FromHCL(double H, double C, double L) => FromHCL(H, C, L, 1);",
    @"public static $type FromHCL(double H, double C, double L, double α)
    {
        Vector3 rgb = Vector3.Zero;

        if (L != 0)
        {
            L *= HCLmaxL;

            double Q = Math.Exp((1 - C / (2 * L)) * (HCLgamma / HCLy0));
            double U = (2 * L - C) / (2 * Q - 1);
            double V = C / Q;
            double A = (H + Math.Min(((2 * H) % 1) / 4, ((-2 * H) % 1) / 8)) * Math.Tau;
            double T = Math.tan(A);

            H *= 6;
            rgb = H switch
            {
                <= 0.999 => new(1, T / (1 + T), 0),
                <= 1.001 => new(1, 1, 0),
                <= 2 => new((1 + T) / T, 1, 0),
                <= 3 => new(0, 1, 1 + T),
                <= 3.999 => new(0, 1 / (1 + T), 1),
                <= 4.001 => new(0, 0, 1),
                <= 5 => new(-1 / T, 0, 1),
                _ => new(1, 0, -T)
            };
            rgb = rgb * V + U;
        }

        return new Vector4(rgb, α);
    }",
    @"public static $type FromYIQ(double Y, double I, double Q) => FromYIQ(Y, I, Q, 1);",
    @"public static $type FromYIQ(double Y, double I, double Q, double α) => new $type(
        Y +  .956 * I +  .619 * Q,
        Y -  .272 * I -  .647 * Q,
        Y - 1.106 * I + 1.703 * Q,
        α
    );",
    @"public static $type FromYCbCr(double Y, double Cb, double Cr) => FromYCbCr(Y, Cb, Cr, 1);",
    @"public static $type FromYCbCr(double Y, double Cb, double Cr, double α) => new $type(
        Y + (Cr - 128) * 1.402,
        Y + (Cb - 128) * -.34414 + (Cr - 128) * -.71414,
        Y + (Cb - 128) * 1.772,
        α
    );",
    @"public static $type FromCMYK(double C, double M, double Y, double K) => FromCMYK(C, M, Y, K, 1);",
    @"public static $type FromCMYK(double C, double M, double Y, double K, double α) => (
        (1 - C) * (1 - K),
        (1 - M) * (1 - K),
        (1 - Y) * (1 - K),
        α
    );",
    @"public static $type FromWavelength(in Wavelength wavelength) => FromWavelength(in wavelength, 1);",
    @"public static $type FromWavelength(in Wavelength wavelength, double α)
    {
        double r = 0, g = 0, b = 0;

        if (wavelength.IsVisible)
        {
            double l = wavelength.InNanometers;
            double t;

            if (l < 410)
            {
                t = (l - 400) / 10d;
                r = .33 * t - .20 * t * t;
            }
            else if ((l >= 410) && (l < 475))
            { 
                t = (l - 410) / 65d;
                r = .14 - .13 * t * t;
            }
            else if ((l >= 545) && (l < 595))
            {
                t = (l - 545) / 50d;
                r = 1.98 * t - t * t;
            }
            else if ((l >= 595) && (l < 650))
            {
                t = (l - 595) / 55d;
                r = .98 + .06 * t - .40 * t * t;
            }
            else if (l >= 650)
            {
                t = (l - 650) / 50d;
                r = .65 - .84 * t + .20 * t * t;
            }

            if (l >= 415 && l < 475)
            {
                t = (l - 415) / 60d;
                g = .8 * t * t;
            }
            else if (l >= 475 && l < 590)
            {
                t = (l - 475) / 115d;
                g = .8 + .76 * t - .8 * t * t;
            }
            else if (l >= 585 && l < 639.0)
            {
                t = (l - 585) / 54d;
                g = .84 * (1 - t);
            }

            if (l >= 400 && l < 475)
            {
                t = (l - 400) / 75d;
                b = 2.2 * t - 1.5 * t * t;
            }
            else if (l >= 475 && l < 560)
            {
                t = (l - 475) / 85d;
                b = .7 - t + .3 * t * t;
            }
        }

        return new $type(r, g, b, α);
    }",
    @"public static $type FromSpectrum(Spectrum spectrum) => FromSpectrum(spectrum, 1);",
    @"public static $type FromSpectrum(Spectrum spectrum, double α)
    {
        Vector4 color = Vector4.Zero;
        double total = 0;

        IEnumerable<(Wavelength w, double i)> intensities;

        if (spectrum is DiscreteSpectrum discrete)
            intensities = discrete.Intensities.FromDictionary();
        else
        {
            List<(Wavelength, double)> list = new();

            foreach (Wavelength wavelength in Wavelength.VisibleWavelengths)
                list.Add((wavelength, spectrum.GetIntensity(wavelength)));

            intensities = list;
        }

        foreach ((Wavelength wavelength, double intensity) in intensities)
        {
            color += intensity * (Vector4)FromWavelength(in wavelength);
            total += intensity;
        }

        color /= total;

        return new $type(color.X, color.Y, color.Z, α);
    }",
    @"public static $type FromBlackbodyRadiation(double temperature) => FromBlackbodyRadiation(temperature, 1);",
    @"public static $type FromBlackbodyRadiation(double temperature, double α)
    {
        double x = temperature / 1000;
        double x2 = x * x;
        double x3 = x2 * x;
        double x4 = x3 * x;
        double x5 = x4 * x;
        double R, G, B;

        if (temperature <= 6600)
            R = 1;
        else
            R = .0002889 * x5 - .01258 * x4 + .2148 * x3 - 1.776 * x2 + 6.907 * x - 8.723;

        if (temperature <= 6600)
            G = -4.593e-5 * x5 + .001424 * x4 - .01489 * x3 + .0498 * x2 + .1669 * x - .1653;
        else
            G = -1.308e-7 * x5 + 1.745e-5 * x4 - .0009116 * x3 + .02348 * x2 - .3048 * x + 2.159;

        if (temperature <= 2000)
            B = 0;
        else if (temperature < 6600)
            B = 1.764e-5 * x5 + .0003575 * x4 - .01554 * x3 + .1549 * x2 - .3682 * x + .2386;
        else
            B = 1;

        return new $type(R, G, B, α);
    }",
    @"public static $type LinearInterpolate($type color1, $type color2, double amount)
    {
        $type res = default;

        res.$R = color1.$R * (1 - amount) + color2.$R * amount;
        res.$G = color1.$G * (1 - amount) + color2.$G * amount;
        res.$B = color1.$B * (1 - amount) + color2.$B * amount;
        res.$A = color1.$A * (1 - amount) + color2.$A * amount;

        return res;
    }",
    @"public static $type FromARGB32(int argb) => new(argb);",
    @"public static $type FromARGB32(uint argb) => new(argb);",
    @"public static bool operator ==($type first, $type second) => first.Equals(second);",
    @"public static bool operator !=($type first, $type second) => !(first == second);",
    @"public static bool operator <($type first, $type second) => first.CompareTo(second) < 0;",
    @"public static bool operator >($type first, $type second) => first.CompareTo(second) > 0;",
    @"public static bool operator <=($type first, $type second) => first.CompareTo(second) <= 0;",
    @"public static bool operator >=($type first, $type second) => first.CompareTo(second) >= 0;",
    @"public static $type operator +($type color) => color;",
    @"public static $type operator -($type color) => new(-color.$R, -color.$G, -color.$B, -color.$A);",
    @"public static $type operator +($type first, $type second) => new(first.$R + second.$R, first.$G + second.$G, first.$B + second.$B, first.$A + second.$A);",
    @"public static $type operator -($type first, $type second) => new(first.$R - second.$R, first.$G - second.$G, first.$B - second.$B, first.$A - second.$A);",
    @"public static $type operator *(double factor, $type color) => color * factor;",
    @"public static $type operator *($type color, double factor) => new(color.$R * factor, color.$G * factor, color.$B * factor, color.$A * factor);",
    @"public static $type operator /($type color, double factor) => new(color.$R / factor, color.$G / factor, color.$B / factor, color.$A / factor);",
    @"public static implicit operator (double r, double g, double b)($type color) => (color.$R, color.$G, color.$B);",
    @"public static implicit operator (double r, double g, double b, double α)($type color) => (color.$R, color.$G, color.$B, color.$A);",
    @"public static implicit operator $type((double r, double g, double b) color) => new(color.r, color.g, color.b, 1);",
    @"public static implicit operator $type((double r, double g, double b, double α) color) => new(color.r, color.g, color.b, color.α);",
    @"public static implicit operator Vector3($type color) => new(color.$R, color.$G, color.$B);",
    @"public static implicit operator Vector4($type color) => new(color.$R, color.$G, color.$B, color.$A);",
    @"public static implicit operator (Vector3 color, Scalar α)($type color) => (new(color.$R, color.$G, color.$B), color.$A);",
    @"public static implicit operator (Vector3 color, double α)($type color) => (new(color.$R, color.$G, color.$B), color.$A);",
    @"public static implicit operator $type(Vector3 color) => new(color.X, color.Y, color.Z, 1d);",
    @"public static implicit operator $type(Vector4 color) => new(color.X, color.Y, color.Z, color.W);",
    @"public static implicit operator $type((Vector3 color, Scalar α) rgba) => new(rgba.color.X, rgba.color.Y, rgba.color.Z, rgba.α);",
    @"public static implicit operator $type((Vector3 color, double α) rgba) => new(rgba.color.X, rgba.color.Y, rgba.color.Z, rgba.α);",
    @"public static implicit operator $type(in Wavelength wavelength) => FromWavelength(in wavelength);",
};
var types = new (string name, Func<string, string> proc)[]
{
    ("HDRColor", s => s.Replace($"$HEX", "ARGB32").Replace("$R", "R").Replace("$G", "G").Replace("$B", "B").Replace("$A", "A")),
    ("RGBAColor", s => s.Replace($"$HEX", "ARGB").Replace("$R", "Rf").Replace("$G", "Gf").Replace("$B", "Bf").Replace("$A", "Af")),
};
#>
///////////////////////////////////////////////////////////////////////
//             AUTOGENERATED <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffffff")#>              //
//   All your changes to this file will be lost upon re-generation.  //
///////////////////////////////////////////////////////////////////////

using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Linq;
using System;

using Unknown6656.Physics.Optics;
using Unknown6656.Mathematics.LinearAlgebra;
using Unknown6656.Mathematics.Analysis;
using Unknown6656.Mathematics;
using Unknown6656.Generics;

namespace Unknown6656.Imaging;


public partial interface IColor
{
    internal static readonly Dictionary<uint, string> KnownColorNames = new()
    {
<#
foreach ((string hex, string name) in colors)
    WriteLine($"        [0x{hex}u] = \"{name}\",");
#>
    };
}
<#
bool M(string s, string p, out Match m) => (m = Regex.Match(s, p, RegexOptions.Compiled | RegexOptions.IgnoreCase)).Success;

foreach ((string name, Func<string, string> process) in types)
{
#>

public unsafe partial struct <#=name#>
{
    private const double HCLgamma = 3;
    private const double HCLy0 = 100;
    private static readonly double HCLmaxL = Math.Exp(HCLgamma / HCLy0) - 0.5;
    private static readonly Vector3 HCYwts = new(0.299, 0.587, 0.114);


<#
    foreach (string member in members)
    {
        string content = process(member).Replace("$type", name);

        if (string.IsNullOrWhiteSpace(content))
            continue;
        else if (content.Count(c => c is '\n') < 8 &&
            !content.Contains("MethodImplOptions") &&
            !M(content, @"^[^\n]+\w+\s*=>", out _))
            WriteLine("    [MethodImpl(MethodImplOptions.AggressiveInlining)]");

        WriteLine($"    {content}\r\n");
    }

    foreach (var color in colors)
    {
        int argb = int.Parse(color.hex, System.Globalization.NumberStyles.HexNumber);
        float a = ((argb & 0xff000000) >> 24) / 255f;
        float r = ((argb & 0xff0000) >> 24) / 255f;
        float g = ((argb & 0xff00) >> 24) / 255f;
        float b = (argb & 0xff) / 255f;
#>

    /// <summary>
    /// Represents the HTML color '<#=color.name#>' (#<#=color.hex#>) with the following color values for each channel:
    /// <list type="bullet">
    ///     <item><c>A: 0x<#=color.hex.Substring(0, 2)#> - <#=a.ToString()#></c></item>
    ///     <item><c>R: 0x<#=color.hex.Substring(2, 2)#> - <#=r.ToString()#></c></item>
    ///     <item><c>G: 0x<#=color.hex.Substring(4, 2)#> - <#=g.ToString()#></c></item>
    ///     <item><c>B: 0x<#=color.hex.Substring(6, 2)#> - <#=b.ToString()#></c></item>
    /// </list>
    /// </summary>
    public static RGBAColor <#=color.name#> { get; } = 0x<#=color.hex#>;
<#
    }
#>
}
<#
}
#>
